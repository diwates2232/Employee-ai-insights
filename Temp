const { denver } = require('../config/siteConfig');

exports.getDenverLiveOccupancy = async (req, res) => {
  // 1) Await the poolPromise instead of .connect()
  const pool = await denver.poolPromise;
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    // use pool.request() for queries
    const fresh = await fetchNewEvents(lastSeen, pool);
    // ‚Ä¶
  };

  await push();
  // ‚Ä¶
};














// config/siteConfig.js

const { sql, getPool } = require('./db');

// Pune uses the shared getPool():
const punePoolPromise = getPool();

// Denver pool factory
const denverConfig = {
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt:               true,
    trustServerCertificate: true
  },
  pool: {
    max: 5,
    min: 0,
    idleTimeoutMillis: 30000
  },
  connectionTimeout: 30000,
  requestTimeout:    0
};

let denverPoolPromise = null;
async function getDenverPool(attempts = 3) {
  if (denverPoolPromise) return denverPoolPromise;

  denverPoolPromise = (async () => {
    const pool = new sql.ConnectionPool(denverConfig);

    // Attach error listener to this pool instance
    pool.on('error', err => {
      console.error('‚ùå Denver MSSQL pool error:', err);
      // Reset so that next request will recreate it
      denverPoolPromise = null;
    });

    try {
      await pool.connect();
      console.log('‚úÖ Denver MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('‚ùå Denver pool connection failed:', err);
      denverPoolPromise = null;
      if (attempts > 0) {
        console.log(`‚è≥ Retrying Denver pool connect (${attempts} left)‚Ä¶`);
        await new Promise(res => setTimeout(res, 3000));
        return getDenverPool(attempts - 1);
      }
      throw err;
    }
  })();

  return denverPoolPromise;
}

// Optional keep‚Äêalive for Denver
setInterval(async () => {
  try {
    const pool = await getDenverPool();
    await pool.request().query('SELECT 1');
    // console.log('üîÑ Denver keep‚Äêalive ping');
  } catch (err) {
    console.error('‚ö†Ô∏è Denver keep‚Äêalive failed:', err);
    denverPoolPromise = null;
  }
}, 5 * 60 * 1000);

module.exports = {
  pune: {
    name:        'Pune',
    poolPromise: punePoolPromise,
    sql
  },
  denver: {
    name:        'Denver',
    poolPromise: getDenverPool(),
    sql
  }
};












// config/db.js

const sql    = require('mssql');
const dotenv = require('dotenv');
dotenv.config();

const config = {
  server:   process.env.DB_SERVER,
  user:     process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  connectionTimeout: 30000,    // 30s to establish
  requestTimeout:    0,        // no timeout on queries
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  },
  options: {
    encrypt:               true,
    trustServerCertificate: true
  }
};

let poolPromise = null;

/**
 * Get (and if needed, establish) the MSSQL connection pool.
 * Retries up to `attempts` times on failure.
 */
async function getPool(attempts = 3) {
  if (poolPromise) {
    return poolPromise;
  }

  poolPromise = (async () => {
    try {
      const pool = await sql.connect(config);
      console.log('‚úÖ MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('‚ùå MSSQL pool connection failed:', err);
      poolPromise = null;  // reset for retry
      if (attempts > 0) {
        console.log(`‚è≥ Retrying MSSQL connect (${attempts} left)‚Ä¶`);
        await new Promise(res => setTimeout(res, 3000));
        return getPool(attempts - 1);
      }
      throw err;
    }
  })();

  // Listen for async errors on the pool
  sql.on('error', err => {
    console.error('‚ùå MSSQL global error:', err);
  });

  return poolPromise;
}

// Keep‚Äêalive ping to prevent idle timeouts
setInterval(async () => {
  try {
    const pool = await getPool();
    await pool.request().query('SELECT 1');
    // console.log('üîÑ MSSQL keep‚Äêalive ping');
  } catch (err) {
    console.error('‚ö†Ô∏è MSSQL keep‚Äêalive failed, resetting pool:', err);
    poolPromise = null;  // force reconnect on next use
  }
}, 5 * 60 * 1000); // every 5 minutes

module.exports = { sql, getPool };




// config/siteConfig.js

const { sql, getPool } = require('./db');

// Pune site
const punePoolPromise = getPool(); // uses env‚Äêconfigured DB_*

// Denver site (different server/database)
const denverConfig = {
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt:               true,
    trustServerCertificate: true
  },
  pool: {
    max: 5,
    min: 0,
    idleTimeoutMillis: 30000
  },
  connectionTimeout: 30000,
  requestTimeout:    0
};

let denverPoolPromise = null;
async function getDenverPool(attempts = 3) {
  if (denverPoolPromise) return denverPoolPromise;

  denverPoolPromise = (async () => {
    const pool = new sql.ConnectionPool(denverConfig);
    try {
      await pool.connect();
      console.log('‚úÖ Denver MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('‚ùå Denver pool connection failed:', err);
      denverPoolPromise = null;
      if (attempts > 0) {
        await new Promise(res => setTimeout(res, 3000));
        return getDenverPool(attempts - 1);
      }
      throw err;
    }
  })();

  pool.on('error', err => {
    console.error('‚ùå Denver MSSQL pool error:', err);
    denverPoolPromise = null; // reset to reconnect
  });

  return denverPoolPromise;
}

// Optional keep‚Äêalive for Denver as well
setInterval(async () => {
  try {
    const pool = await getDenverPool();
    await pool.request().query('SELECT 1');
    // console.log('üîÑ Denver keep‚Äêalive ping');
  } catch (err) {
    console.error('‚ö†Ô∏è Denver keep‚Äêalive failed, resetting pool:', err);
  }
}, 5 * 60 * 1000);

module.exports = {
  pune: {
    name:         'Pune',
    poolPromise:  punePoolPromise,
    // ...other Pune config...
  },
  denver: {
    name:         'Denver',
    poolPromise:  getDenverPool(),
    // ...other Denver config...
  }
};





const { sql, getPool } = require('../config/db');
const pool = await getPool();       // ensures connection
const req  = pool.request();
// ‚Ä¶ query as before ‚Ä¶



const { denver } = require('../config/siteConfig');
const pool = await denver.poolPromise;
const req  = pool.request();
// ‚Ä¶ your Denver query ‚Ä¶




C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\config\db.js


// config/db.js

const sql = require('mssql');
const dotenv = require('dotenv');
dotenv.config();

const config = {
  server:   process.env.DB_SERVER,
  user:     process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  // bump the default timeouts and enable pooling
  connectionTimeout: 30000,    // 30 s to establish connection
  requestTimeout:    0,        // 0 = no timeout on queries
  pool: {
    max: 10,                   // up to 10 connections
    min: 0,
    idleTimeoutMillis: 30000   // 30 s before a connection is reaped
  },
  options: {
    encrypt:              true,
    trustServerCertificate: true
  }
};

const pool = new sql.ConnectionPool(config);
const poolConnect = pool
  .connect()
  .then(() => console.log('‚úÖ MSSQL pool connected'))
  .catch(err => console.error('‚ùå MSSQL pool connection failed:', err));

// log any asynchronous errors on the pool
pool.on('error', err => {
  console.error('‚ùå MSSQL pool error:', err);
});

module.exports = { sql, poolConnect, pool };





C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\config\siteConfig.js

// config/siteConfig.js

const { pool: punePool, sql } = require('./db'); 

// Create Denver connection
const denverPool = new sql.ConnectionPool({
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
});

denverPool.connect();

module.exports = {
  pune: {
    name: 'Pune',
    pool: punePool,
    doorZoneMap:   require('../data/doorZoneMap'),
    zoneFloorMap:  require('../data/zoneFloorMap')
  },
  denver: {
    name: 'Denver',
    pool: denverPool,
    zoneFloorMap:  require('../data/denverDoorFloorMap'),
  }
};




C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\.env

DB_SERVER=SRVWUPNQ0986V
DB_USER=GSOC_Test
DB_PASSWORD=Westernuniongsoc@2025
DB_DATABASE=ACVSUJournal_00010020
PORT=5000
