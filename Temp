// src/components/ZoneDetailsTable.jsx

import React, { useState, useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  // 3) Handler for search input
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      {/* Search input (optional reuse) */}
      <div style={{ marginBottom: '1rem', textAlign: 'right' }}>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={handleSearchChange}
          style={{
            padding: '0.4rem 0.8rem',
            fontSize: '0.9rem',
            borderRadius: 4,
            border: '1px solid #ccc'
          }}
        />
      </div>

      {sortedEntries.map(([zone, emps]) => {
        // 4) Filter employees by search
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}








// src/components/ZoneDetailsTable.jsx

import React, { useState, useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate (case-insensitive)
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  // 3) Handler for search input
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      {/* Back to Dashboard link + Search input */}
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '1rem'
        }}
      >
        <a
          href="/"
          style={{
            color: '#FFD100',
            fontSize: '1rem',
            textDecoration: 'none',
            fontWeight: 'bold'
          }}
        >
          ← Back to Dashboard
        </a>

        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={handleSearchChange}
          style={{
            padding: '0.4rem 0.8rem',
            fontSize: '0.9rem',
            borderRadius: 4,
            border: '1px solid #ccc',
            maxWidth: 250
          }}
        />
      </div>

      {sortedEntries.map(([zone, emps]) => {
        // 4) Filter employees by search term
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}













// src/components/ZoneDetailsTable.jsx

import React, { useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {}, searchTerm = '' }) {
  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate (using external searchTerm)
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      {sortedEntries.map(([zone, emps]) => {
        // 3) Filter employees by searchTerm
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}












// src/components/ZoneDetailsTable.jsx

import React, { useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {}, searchTerm = '' }) {
  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate (using external searchTerm)
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      {sortedEntries.map(([zone, emps]) => {
        // 3) Filter employees by searchTerm
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}










// src/pages/ZoneDetailsPage.jsx

import React, { useState, useMemo } from 'react';
import './ZoneDetailsPage.css';
import './components/ZoneDetailsTable.css';

export default function ZoneDetailsPage({ detailsData = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) Convert and sort zones by descending original count
  const sortedZones = useMemo(() => {
    return Object.entries(detailsData)
      .sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [detailsData]);

  // 2) Handler for search input
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  // 3) Case‐insensitive filter function
  const matchesSearch = (emp) =>
    emp.ObjectName1
      .toLowerCase()
      .includes(searchTerm.trim().toLowerCase());

  return (
    <div className="zone-details-page">
      {/* Search input */}
      <div className="search-container" style={{ marginBottom: '1rem' }}>
        <input
          type="text"
          placeholder="Search employee by name..."
          value={searchTerm}
          onChange={handleSearchChange}
          className="search-input"
          style={{
            width: '100%',
            maxWidth: 400,
            padding: '0.5rem 1rem',
            fontSize: '1rem',
            borderRadius: 4,
            border: '1px solid #ccc'
          }}
        />
      </div>

      {sortedZones.length === 0 ? (
        <p>No zone detail data available.</p>
      ) : (
        <div className="zone-cards-container">
          {sortedZones.map(([zone, employees]) => {
            // 4) Filter employees in this zone by searchTerm
            const filteredEmps = employees.filter(matchesSearch);
            if (filteredEmps.length === 0) {
              // If no employee in this zone matches the search, skip rendering
              return null;
            }

            return (
              <div key={zone} className="zone-card">
                <div className="zone-header">
                  <h3>{zone}</h3>
                  <span>{filteredEmps.length} people</span>
                </div>

                <table className="zone-table">
                  <thead>
                    <tr>
                      <th>Employee ID</th>
                      <th>Name</th>
                      <th>Door</th>
                      <th>Swipe Time</th>
                      <th>Personnel Type</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredEmps.map((emp, index) => (
                      <tr key={index}>
                        <td>{emp.EmployeeID}</td>
                        <td>{emp.ObjectName1}</td>
                        <td>{emp.Door}</td>
                        <td>{emp.Swipe_Time}</td>
                        <td>{emp.PersonnelType}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}








// src/components/ZoneDetailsTable.jsx

import React, { useState, useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  // 3) Handler for search input
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      {/* Search input (optional reuse) */}
      <div style={{ marginBottom: '1rem', textAlign: 'right' }}>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={handleSearchChange}
          style={{
            padding: '0.4rem 0.8rem',
            fontSize: '0.9rem',
            borderRadius: 4,
            border: '1px solid #ccc'
          }}
        />
      </div>

      {sortedEntries.map(([zone, emps]) => {
        // 4) Filter employees by search
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}














Read both below page details carefully and add option for search employee option and sort the Zone Details as per Zone Zount.
like Zone Which have more count will display top like 
dont make another changes give me updated js file carefully

//C:\Users\W0024618\Desktop\swipeData\client\src\pages\ZoneDeatailsPage.jsx
import React from 'react';
import './ZoneDetailsPage.css';
import ZoneDetailsTable from '../components/ZoneDetailsTable';
import './components/ZoneDetailsTable.css';

export default function ZoneDetailsPage({ detailsData = {} }) {
  const entries = Object.entries(detailsData);

  return (
    <div className="zone-details-page">
      {/* <h2>Zone Details (Pune)</h2> */}
      {entries.length === 0 ? (
        <p>No zone detail data available.</p>
      ) : (
        <div className="zone-cards-container">
          {entries.map(([zone, employees]) => (
            <div key={zone} className="zone-card">
              <div className="zone-header">
                <h3>{zone}</h3>
                <span>{employees.length} people</span>
              </div>
              <table className="zone-table">
                <thead>
                  <tr>
                    <th>Employee ID</th>
                    <th>Name</th>
                    <th>Door</th>
                    <th>Swipe Time</th>
                    <th>Personnel Type</th>
                  </tr>
                </thead>
                <tbody>
                  {employees.map((emp, index) => (
                    <tr key={index}>
                      <td>{emp.EmployeeID}</td>
                      <td>{emp.ObjectName1}</td>
                      <td>{emp.Door}</td>
                      <td>{emp.Swipe_Time}</td>
                      <td>{emp.PersonnelType}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}





//C:\Users\W0024618\Desktop\swipeData\client\src\components\ZoneDetailsTable.jsx

import React from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {} }) {
  const entries = Object.entries(data);
  if (!entries.length) return <p>No zone detail data available.</p>;

  return (
    <div className="zone-cards">
      {entries.map(([zone, emps]) => (
        <div key={zone} className="zone-card">
          <div className="zone-header">
            <h3>{zone}</h3>
            <span className="zone-badge">Total: {emps.length}</span>
          </div>

          <table className="zone-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Swipe Time</th>
                <th>Type</th>
                <th>Door Name</th>
              </tr>
            </thead>
            <tbody>
              {emps.map((emp, i) => (
                <tr key={`${emp.EmployeeID}-${i}`}>
                  <td>{emp.ObjectName1}</td>
                  <td>{emp.Swipe_Time}</td> 
                  <td>{emp.PersonnelType}</td>
                  <td>{emp.door}</td>
                </tr>
              ))}
            </tbody>
          </table>
    
        </div>
      ))}
    </div>
  );
}
