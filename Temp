// src/components/SummaryChart.jsx
import React, { useMemo } from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  LabelList,
} from 'recharts';
import { Card } from 'react-bootstrap';

// Gradients or solid colors per zone (you can swap these for solid fills if desired)
const ZONE_GRADIENTS = {
  'Red Zone':       ['#A80000', '#FFCCCC'],
  'Yellow Zone':    ['#B28000', '#FFF2CC'],
  'Orange Zone':    ['#C75D00', '#FFE0B2'],
  'Green Zone':     ['#006400', '#CCFFCC'],
  'Reception Area': ['#4B0082', '#E0CCFF'],
  'Tower B':        ['#bfd6ff', '#002f6c'],
};

// If you prefer a solid color per slice (instead of gradient), list them here in order:
const SOLID_COLORS = [
  '#FFD100', // fallback / accent if a zone isn’t in ZONE_GRADIENTS
  '#009E60',
  '#FF6F61',
  '#58595B',
  '#FFB800',
  '#C75D00',
];

const DEFAULT_GRADIENT = ['#3B4CCA', '#D0D8FF'];

export default function SummaryChart({ summary = [] }) {
  // summary is an array of objects: [ { zone: 'Red Zone', count: 10 }, ... ]
  // We want each slice to have equal angle in the half circle, but still carry the true count.

  // If there’s no data, show a placeholder card:
  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  // Build a new data array where each slice has a fixed 'value' of 1, so angles are equal.
  // We attach the real count in a separate field.
  const pieData = useMemo(
    () =>
      summary.map((z) => ({
        name: z.zone,
        value: 1,
        count: z.count,
      })),
    [summary]
  );

  // Custom tooltip to show real count when hovering
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload || !payload.length) return null;
    const { name, count } = payload[0].payload;
    return (
      <div
        style={{
          backgroundColor: '#fff',
          border: '1px solid #ccc',
          borderRadius: 4,
          padding: '8px',
          color: '#000',
        }}
      >
        <div>
          <strong>Zone:</strong> {name}
        </div>
        <div style={{ marginTop: 4 }}>
          <strong>Count:</strong> {count}
        </div>
      </div>
    );
  };

  // We’ll draw the Pie with a “startAngle” at 180° and “endAngle” at 0°,
  // so it spans a half-circle (a “semi-donut”). Each slice is therefore equal in width.
  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Zone-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            backgroundColor: 'var(--wu-gray-dark)',
            border: '1px solid var(--wu-yellow)',
            borderRadius: 4,
            padding: '0.5rem',
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              {/* Define gradients for each zone (by mapping index → gradient ID) */}
              <defs>
                {pieData.map((entry, idx) => {
                  // pick the gradient for this zone, fallback if missing:
                  const gradientKey = entry.name.replace(/\s+/g, '-');
                  const gradientColors =
                    ZONE_GRADIENTS[entry.name] || DEFAULT_GRADIENT;
                  return (
                    <linearGradient
                      id={`grad-${gradientKey}`}
                      key={gradientKey}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={gradientColors[0]} stopOpacity={1} />
                      <stop
                        offset="100%"
                        stopColor={gradientColors[1]}
                        stopOpacity={1}
                      />
                    </linearGradient>
                  );
                })}
              </defs>

              <Pie
                data={pieData}
                dataKey="value"        // all slices equal
                nameKey="name"
                startAngle={180}      // leftmost is 180°, end at 0° for a half circle
                endAngle={0}
                innerRadius={60}      // thickness of arc
                outerRadius={140}
                paddingAngle={2}      // small gap between slices
                labelLine={false}
                isAnimationActive={false}
              >
                {/* Place a LabelList that prints the real count (entry.count) at centroid of each slice */}
                <LabelList
                  dataKey="count"
                  position="inside"
                  fill="#fff"
                  style={{ fontSize: '1rem', fontWeight: 'bold' }}
                />
                {pieData.map((entry, idx) => {
                  const gradientKey = entry.name.replace(/\s+/g, '-');
                  const hasGradient = Boolean(ZONE_GRADIENTS[entry.name]);
                  // Fallback to a solid color if no gradient is defined
                  const fillColor = hasGradient
                    ? `url(#grad-${gradientKey})`
                    : SOLID_COLORS[idx % SOLID_COLORS.length];
                  // Stroke color can be the darker shade of that gradient, or fallback
                  const strokeColor = hasGradient
                    ? ZONE_GRADIENTS[entry.name][1]
                    : SOLID_COLORS[idx % SOLID_COLORS.length];
                  return (
                    <Cell
                      key={`slice-${idx}`}
                      fill={fillColor}
                      stroke={strokeColor}
                      strokeWidth={1}
                    />
                  );
                })}
              </Pie>

              <Tooltip content={renderTooltip} />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}












I want to Reoresent this chart data into above image format

// src/components/SummaryChart.jsx

import React, { useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

// Zone gradients
const ZONE_GRADIENTS = {
  'Red Zone': ['#A80000', '#FFCCCC'],
  'Yellow Zone': ['#B28000', '#FFF2CC'],
  'Orange Zone': ['#C75D00', '#FFE0B2'],
  'Green Zone': ['#006400', '#CCFFCC'],
  'Reception Area': ['#4B0082', '#E0CCFF'],
  'Tower B':['#bfd6ff', '#002f6c'],
};

const ZONE_LABEL_COLORS = {
  'Red Zone': '#A80000',
  'Yellow Zone': '#B28000',
  'Orange Zone': '#C75D00',
  'Green Zone': '#006400',
  'Reception Area': '#4B0082',
};

const DEFAULT_GRADIENT = ['#3B4CCA', '#D0D8FF'];

export default function SummaryChart({ summary = [] }) {
  useEffect(() => {
    console.log('Summary Chart Data:', summary);
  }, [summary]);

  if (!summary.length) return <Card body>No zone data available</Card>;

  const renderLabel = ({ x, y, width, value, index }) => {
    const zone = summary[index].zone;
    const color = ZONE_LABEL_COLORS[zone] || '#333';
    return (
      <text
        x={x + width / 2}
        y={y - 6}
        fill={color}
        textAnchor="middle"
        fontSize={12}
        fontWeight="bold"
      >
        {value}
      </text>
    );
  };

  const renderTooltip = ({ active, payload, label }) => {
    if (!active || !payload?.length) return null;
    const { zone, count } = payload[0].payload;
    const color = ZONE_LABEL_COLORS[zone] || '#333';
    return (
      <div
        style={{
          backgroundColor: '#fff',
          border: '1px solid #ccc',
          padding: '8px',
          borderRadius: '4px',
          color: '#000'
        }}
      >
        <div><strong>{label}</strong></div>
        <div style={{ color }}>
          {payload[0].name}: {count}
        </div>
      </div>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Zone-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        {/* <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#ffffff'
          }}
        > */}

        <div
          style={{
            height: '100%',
            border: '1px solid var(--wu-yellow)',
            borderRadius: '4px',
            backgroundColor: 'var(--wu-gray-dark)',
            padding: '0.5rem'
          }}
        >

          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={summary}
              margin={{ top: 20, right: 30, left: 0, bottom: 5 }}
              barCategoryGap="10%"
            >
              {/* Unique gradient defs by zone name */}
              <defs>
                {Object.entries(ZONE_GRADIENTS).map(([zone, [start, end]]) => (
                  <linearGradient
                    id={`grad-${zone.replace(/\s+/g, '-')}`}
                    key={zone}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={start} stopOpacity={1} />
                    <stop offset="100%" stopColor={end} stopOpacity={1} />
                  </linearGradient>
                ))}
              </defs>

              {/* <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#333' }} />
              <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#333' }} /> */}

              <CartesianGrid stroke="#555" strokeDasharray="4 4" />
              <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#fff' }} />
              <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#fff' }} />


              <Tooltip content={renderTooltip} />

              <Legend
                verticalAlign="bottom"
                wrapperStyle={{ paddingTop: 10 }}
                formatter={(value) => (
                  <span style={{ color: '#FFD100', fontWeight: 'bold' }}>
                    {value}
                  </span>
                )}
              />

              <Bar
                dataKey="count"
                name="Zone"
                radius={[6, 6, 0, 0]}
                label={renderLabel}
              >
                {summary.map((entry, idx) => {
                  const zone = entry.zone;
                  const gradientId = `grad-${zone.replace(/\s+/g, '-')}`;
                  const strokeColor = ZONE_LABEL_COLORS[zone] || '#333';
                  const gradientExists = ZONE_GRADIENTS.hasOwnProperty(zone);

                  return (
                    <Cell
                      key={`cell-${idx}`}
                      fill={gradientExists ? `url(#${gradientId})` : DEFAULT_GRADIENT[0]}
                      stroke={strokeColor}
                      strokeWidth={1}
                    />
                  );
                })}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}

