// controllers/liveOccupancyController.js

const { DateTime } = require('luxon');
const { sql, getPool } = require('../config/db');

const doorZoneMap  = require('../data/doorZoneMap');
const zoneFloorMap = require('../data/zoneFloorMap');
const ertMembers   = require('../data/puneErtMembers.json');

const warnedKeys = new Set();

/** Normalize raw door & direction into a “KEY___Direction” string **/
function normalizeZoneKey(rawDoor, rawDir) {
  const base = String(rawDoor || '')
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase();

  // Only two possible direction values in doorZoneMap: “InDirection” or “OutDirection”
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${base}___${dir}`;
}

/** Normalize “Last, First” or “First Last” → lowercase “first last” **/
function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}

/**
 * Map a swipe’s door+direction → one of your exact zones.
 * If the key isn’t found in doorZoneMap, return "Unknown Zone".
 * We will drop any "Unknown Zone" immediately.
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  const zone = doorZoneMap[key];

  if (!zone) {
    // warn only once per key
    if (!warnedKeys.has(key)) {
      console.warn(`⛔ Unmapped door–direction key: "${key}"`);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  return zone;
}

/** Fetch all swipe events since `since` (UTC) **/
async function fetchNewEvents(since) {
  const pool = await getPool();
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/** Build live‐occupancy structures **/
async function buildOccupancy(allEvents) {
  const current      = {};       // key → latest “checked in or out” event
  const uniquePeople = new Map(); // key → PersonnelType

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    // 1) Figure out which zone this swipe hits (strictly from doorZoneMap)
    const zoneRaw = mapDoorToZone(Door, Direction);

    // 2) If the map returned "Unknown Zone", drop it immediately
    if (zoneRaw === 'Unknown Zone') {
      continue;
    }

    // Dedup key for each person
    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = zoneRaw.toLowerCase();

    // 3) True “Out of office” → full eviction
    if (Direction === 'OutDirection' && zoneRaw === 'Out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    // 4) Any other OutDirection → mark them “checked out” but not evicted
    if (Direction === 'OutDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 5) InDirection → normal check‐in
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 6) Catch‐all eviction (should rarely happen)
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // Compute live headcounts (employees vs contractors)
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // Build a zone→list‐of‐people map, filtering out any “Out of office”
  const zoneMap = {};
  for (const personEvt of Object.values(current)) {
    // skip any final zone of “Out of office”
    if ((personEvt.zone || '').toLowerCase() === 'out of office') {
      continue;
    }
    zoneMap[personEvt.zone] = zoneMap[personEvt.zone] || [];
    zoneMap[personEvt.zone].push(personEvt);
  }

  // Convert zoneMap into zoneDetails: { zoneName → { total, byPersonnelType, employees: [ … ] } }
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType] || 0) + 1;
        return acc;
      }, {});
      return [ zone, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // Build floorBreakdown by folding each zone into its floor using zoneFloorMap
  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floorName = zoneFloorMap[zone];
    if (!floorName) {
      // If somehow a valid zone isn’t in zoneFloorMap, drop it
      continue;
    }
    floorMap[floorName] = floorMap[floorName] || { total: 0, byPersonnelType: {} };
    floorMap[floorName].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floorName].byPersonnelType[pt] =
        (floorMap[floorName].byPersonnelType[pt] || 0) + c;
    }
  }

  // Build ertStatus exactly as before
  const ertStatus = Object.fromEntries(
    Object.entries(ertMembers).map(([role, members]) => {
      const list = members.map(m => {
        const expected = normalizePersonName(m.name);
        const matchEvt = Object.values(current).find(e =>
          normalizePersonName(e.ObjectName1) === expected
        );
        return {
          ...m,
          present: !!matchEvt,
          zone:    matchEvt ? matchEvt.zone : null
        };
      });
      return [ role, list ];
    })
  );

  return {
    asOf: new Date().toISOString(),

    // zone summary array
    summary: Object.entries(zoneDetails).map(([z, d]) => ({
      zone:  z,
      count: d.total
    })),

    // zoneBreakdown array format
    zoneBreakdown: Object.entries(zoneDetails).map(([z, d]) => ({
      zone: z,
      ...d.byPersonnelType,
      total: d.total
    })),

    // floorBreakdown array format
    floorBreakdown: Object.entries(floorMap).map(([f, d]) => ({
      floor: f,
      ...d.byPersonnelType,
      total: d.total
    })),

    // raw details (zoneMap)
    details: zoneMap,

    // personnel summary (employees vs contractors)
    personnelSummary: { employees: employeeCount, contractors: contractorCount },

    // ertStatus (unchanged)
    ertStatus,

    // personnelBreakdown array
    personnelBreakdown: (() => {
      const map = new Map();
      for (const pt of uniquePeople.values()) {
        map.set(pt, (map.get(pt) || 0) + 1);
      }
      return Array.from(map, ([personnelType, count]) => ({ personnelType, count }));
    })()
  };
}

/**
 * Build “visited today” counts using evt.Dateonly (which is already “yyyy‐LL‐dd” in local zone)
 */
function buildVisitedToday(allEvents) {
  // “Today” in Asia/Kolkata, formatted as “yyyy‐LL‐dd”
  const today = DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

  // Only keep today’s InDirection swipes whose Dateonly matches “today”
  const todayIns = allEvents.filter(evt => {
    return evt.Direction === 'InDirection' && evt.Dateonly === today;
  });

  // Dedup by PersonGUID → keep latest by LocaleMessageTime
  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID || e.EmployeeID || e.CardNumber || e.ObjectName1;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }

  const finalList   = Array.from(dedup.values());
  const employees   = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

/** Server‐Sent‐Events endpoint */
exports.getLiveOccupancy = async (req, res) => {
  try {
    // ensure the pool is ready
    await getPool();

    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');

    // initial “since” = 24 hours ago
    let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const events = [];

    const push = async () => {
      const fresh = await fetchNewEvents(lastSeen);
      if (fresh.length) {
        lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
        events.push(...fresh);
      }

      const occupancy  = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday = {
        employees:   todayStats.employees,
        contractors: todayStats.contractors,
        total:       todayStats.total
      };

      // send body once
      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
    };

    // run immediately, then every second
    await push();
    const timer = setInterval(push, 1000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};













// data/doorZoneMap.js

const doorZoneMap = {
  // Podium / Red
  "APAC_IN_PUN_PODIUM_RED_IDF ROOM-02-Restricted Door___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED ZONE)___InDirection":      "Red Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 1 (RED ZONE)___OutDirection":      "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___InDirection":  "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR___OutDirection": "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)___InDirection":                "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW___OutDirection":"Reception Area",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___InDirection": "Red Zone",
  "APAC_IN_PUN_PODIUM_RED_RECREATION AREA FIRE EXIT 1-DOOR NEW___OutDirection":"Yellow Zone - Outer Area",

  // Podium / Yellow
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___InDirection":  "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST2 DOOR 2 (YELLOW)___OutDirection": "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MDF Restricted Door___InDirection":     "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_IT STORE ROOM-DOOR Restricted door___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_REPRO STORE-DOOR Restricted door___InDirection":   "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_CONTROL PANEL ROOM-DOOR Restricted door___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_PREACTION ROOM-DOOR Restricted door___InDirection":     "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_TESTING LAB-DOOR Restricted door___InDirection": "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___InDirection":      "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR___OutDirection":     "Reception Area",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___InDirection":  "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_MAIN LIFT LOBBY-DOOR NEW___OutDirection": "Out of office",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___InDirection":            "Yellow Zone",
  "APAC_IN_PUN_PODIUM_ST 1 DOOR 2 (YELLOW)___OutDirection":          "Yellow Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___InDirection":     "Yellow Zone",
  "APAC_IN_PUN_PODIUM_YELLOW_FIRE EXIT 1-DOOR NEW___OutDirection":    "Yellow Zone - Outer Area",

  // Podium / Green
  "APAC_IN_PUN_PODIUM_GREEN-_IDF ROOM 1-Restricted Door___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 1-DOOR Restricted door___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_UPS ENTRY 2-DOOR Restricted door___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_LOCKER HR STORE 3-DOOR Restricted door___InDirection": "Green Zone",
  "APAC_IN_PUN_PODIUM_ST4 DOOR 2 (GREEN)___InDirection":                 "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___InDirection":         "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN-MAIN LIFT LOBBY-DOOR___OutDirection":        "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___InDirection":                 "Green Zone",
  "APAC_IN_PUN_PODIUM_ST3 DOOR 2 (GREEN)___OutDirection":                "Green Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___InDirection":         "Green Zone",
  "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR___OutDirection":        "Reception Area",

  // Podium / Orange
  "APAC_IN_PUN_PODIUM_ST4 DOOR 1 (ORANGE)___InDirection":               "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___InDirection":      "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR___OutDirection":     "Reception Area",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___InDirection":              "Orange Zone",
  "APAC_IN_PUN_PODIUM_ST3_DOOR 1 (ORANGE)___OutDirection":             "Orange Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___InDirection":      "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_MAIN LIFT LOBBY-DOOR___OutDirection":     "Orange Zone - Outer Area",
  "APAC_IN_PUN_PODIUM_ORANGE-IDF ROOM 3-Restricted Door___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___InDirection": "Orange Zone",
  "APAC_IN_PUN_PODIUM_ORANGE_KITCHENETTE FIRE EXIT-DOOR NEW___OutDirection":"Orange Zone - Outer Area",
  
   "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___InDirection":  "Reception Area",
    "APAC_IN_PUN_PODIUM_MAIN PODIUM RIGHT ENTRY-DOOR NEW___OutDirection":  "Assembly Area",
    "APAC_IN_PUN_PODIUM_GSOC DOOR Restricted door___InDirection":           "Yellow Zone",
   

   "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___InDirection": "Reception Area",
   "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW___OutDirection": "Assembly Area",


  // Podium / Reception turnstiles
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-DOOR___InDirection":             "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2-DOOR___InDirection":             "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 3-DOOR___InDirection":             "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4-DOOR___InDirection":             "Reception Area",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 2 -OUT DOOR___OutDirection":       "Out of Office",
  "APAC_IN_PUN-PODIUM_P-1 TURNSTILE 3 -OUT DOOR___OutDirection":       "Out of Office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4 -OUT DOOR___OutDirection":       "Out of Office",
  "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 1-OUT DOOR___OutDirection":        "Out of Office",

  // 2nd Floor doors
  "APAC_IN_PUN_2NDFLR_IDF ROOM_10:05:86 Restricted Door___InDirection": "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_UPS/ELEC ROOM Restricted Door_10:05:FE___InDirection": "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B___InDirection":  "2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B___OutDirection": "Out of office",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR_10:05:74___InDirection":"2nd Floor, Pune",
  "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR_10:05:74___OutDirection":"2nd Floor, Pune",

  // Tower B
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___InDirection":         "Tower B",
  "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR___OutDirection":        "Out of office",
  "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___InDirection":             "Tower B",
   "APAC_IN_PUN_TOWER B_LIFT LOBBY DOOR___OutDirection":            "Out of office",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___InDirection":          "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_GYM SIDE DOOR___OutDirection":         "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___InDirection":          "Tower B",
  "APAC_IN_PUN_TOWER B_ST6_WKS SIDE DOOR___OutDirection":         "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___InDirection":         "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR___OutDirection":        "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___InDirection":          "Tower B",
  "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR___OutDirection":         "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___InDirection":        "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR___OutDirection":       "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___InDirection":       "Tower B",
  "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR___OutDirection":      "Tower B",
  "APAC_IN_PUN_TOWER B_IBMS ROOM___InDirection":                  "Tower B",
  "APAC_IN_PUN_TOWER B_UPS ROOM___InDirection":                   "Tower B",
  "APAC_IN_PUN_TOWER B_MDF ROOM___InDirection":                   "Tower B",
  "APAC_IN_PUN_TOWER B_PAC ROOM___InDirection":                   "Tower B",
  "APAC_IN_PUN_TOWER B_IT STORE ROOM___InDirection":             "Tower B",
  "APAC_IN_PUN_TOWER B_GYM ROOM___InDirection":                  "Tower B GYM",
  "APAC_IN_PUN_TOWER B_GYM ROOM___OutDirection":                 "Tower B GYM"  
};

module.exports = doorZoneMap;




// // data/zoneFloorMap.js

// const zoneFloorMap = {
//   // Podium Floor
//   "Red Zone":               "Podium Floor",
//   "Yellow Zone":            "Podium Floor",
//   "Reception Area":         "Podium Floor",
//   "Green Zone":             "Podium Floor",
//   "Orange Zone":            "Podium Floor",
//   "GSOC":                   "Podium Floor",
//   "Assembly Area":          "Podium Floor",

//   // 2nd Floor
//   "2nd Floor, Pune":        "2nd Floor",

//   // Tower B
//   "Tower B":                "Tower B",
//   "Reception Area Tower B": "Tower B",
//   "Tower B GYM":            "Tower B",

//   // Outer‐Area variants
//   "Red Zone - Outer Area":               "Podium Floor",
//   "Yellow Zone - Outer Area":            "Podium Floor",
//   "Reception Area":                       "Podium Floor",
//   "Green Zone - Outer Area":             "Podium Floor",
//   "Orange Zone - Outer Area":            "Podium Floor",
//   "GSOC":                                 "Podium Floor",
//   "Assembly Area":                        "Podium Floor",

//   "2nd Floor, Pune":                    "2nd Floor",

//   "Tower B ":                "Tower B",
//   "Reception Area Tower B":   "Tower B",
//   "Tower B GYM":                "Tower B",

//  // True “Out of office” evictions
//   "Out of office":       "Podium Floor",
//   "Out of Office":       "Podium Floor"
// };

// module.exports = zoneFloorMap;



// data/zoneFloorMap.js

const zoneFloorMap = {
  // Podium Floor
  "Red Zone":                    "Podium Floor",
  "Yellow Zone":                 "Podium Floor",
  "Reception Area":              "Podium Floor",
  "Green Zone":                  "Podium Floor",
  "Orange Zone":                 "Podium Floor",
  "Gsoc Zone":                   "Podium Floor",
  "Assembly Area":               "Podium Floor",
  "Red":"Podium Floor",

  // 2nd Floor
  "2nd Floor, Pune":             "2nd Floor",

  // Tower B
  "Tower B":                     "Tower B",
  "Reception Area Tower B":      "Tower B",
  "Tower B GYM":                 "Tower B",

  // Outer‐Area variants (same floors as their base zones)
  "Red Zone - Outer Area":               "Podium Floor",
  "Yellow Zone - Outer Area":            "Podium Floor",
  "Reception Area - Outer Area":         "Podium Floor",
  "Green Zone - Outer Area":             "Podium Floor",
  "Orange Zone - Outer Area":            "Podium Floor",
  "Assembly Area - Outer Area":          "Podium Floor",
  "2nd Floor, Pune - Outer Area":        "2nd Floor",
  "Tower B - Outer Area":                "Tower B",
  "Reception Area Tower B - Outer Area": "Tower B",
  "Tower B GYM - Outer Area":            "Tower B",

  // True “Out of office” eviction (we filter these out in the controller)
  "Out of office":               "Podium Floor"
};

module.exports = zoneFloorMap;





i mean strickly abovbe mentioned Zone and Floor Only dont create Unknown Zone or Floor Strickly

