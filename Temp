Read all Components file carefully and right now for pune Employees Visited Today & Contractors Visited Today
counts get 0 now why this happen let fix it .
let see api responce ,"totalVisitedToday":477,"visitedToday":{"employees":396,"contractors":81,"total":477}}

C:\Users\W0024618\Desktop\swipeData\client\src\components

file 1

C:\Users\W0024618\Desktop\swipeData\client\src\components\FloorOccupancyChart.jsx

// src/components/FloorOccupancyChart.jsx
import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Legend,
  CartesianGrid
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = {
  Contractor: '#fd7e14',
  'Property Management': '#28a745',
  // add more personnel types here...
};

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor data available</Card>;
  }

  // determine all personnel types present
  const types = Array.from(
    new Set(data.flatMap(d => Object.keys(d).filter(k => k !== 'floor' && k !== 'total')))
  );

  return (
    <Card className="mb-4">
      <Card.Header>Floor-wise Occupancy</Card.Header>
      <Card.Body style={{ height: 350 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="floor" tick={{ fontSize: 12 }} />
            <YAxis tick={{ fontSize: 12 }} />
            <Tooltip />
            <Legend wrapperStyle={{ bottom: -10 }} />
            {types.map((type, idx) => (
              <Bar
                key={type}
                dataKey={type}
                stackId="a"
                name={type}
                fill={COLORS[type] || '#cccccc'}
                radius={[8, 8, 0, 0]}
              />
            ))}
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}



file 2

C:\Users\W0024618\Desktop\swipeData\client\src\components\PersonnelDonutChart.jsx


// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#007bff', '#28a745', '#fd7e14', '#6f42c1'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, entry) => sum + entry.count, 0);

  if (!data.length || total === 0) {
    return <Card body>No personnel data available</Card>;
  }

  return (
    <Card className="mb-4">
      <Card.Header>Personnel Type Occupancy</Card.Header>
      <Card.Body style={{ height: 350 }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={data}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={100}
              paddingAngle={4}
              labelLine={false}
              label={({ name, percent }) =>
                `${name}: ${(percent * 100).toFixed(0)}%`
              }
            >
              {data.map((entry, idx) => (
                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={(value) => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}



file 3

C:\Users\W0024618\Desktop\swipeData\client\src\components\PersonnelTypeBreakdownTable.jsx

// src/components/PersonnelTypeBreakdownTable.jsx
import React from 'react';
import { Table } from 'react-bootstrap';

export default function PersonnelTypeBreakdownTable({ data }) {
  if (!data || data.length === 0) {
    return <p>No data available for personnel types.</p>;
  }

  return (
    <Table striped bordered hover responsive>
      <thead>
        <tr>
          <th>Personnel Type</th>
          <th>Count</th>
        </tr>
      </thead>
      <tbody>
        {data.map((entry, idx) => (
          <tr key={idx}>
            <td>{entry.type}</td>
            <td>{entry.count}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}



file 4


C:\Users\W0024618\Desktop\swipeData\client\src\components\SummaryCards.jsx

import React from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { FaUsers, FaUserTie, FaHardHat } from 'react-icons/fa';

const SummaryCards = ({
  totalOccupancy,
  employeeCount,
  contractorCount,
  totalVisitedToday,
  employeesVisitedToday,
  contractorsVisitedToday
}) => {
 const cards = [

  {
    title: 'Total Visited Today',
    value: totalVisitedToday,
    icon: <FaUsers size={24} />,
    color: '#6f42c1'
  },
  {
    title: 'Employees Visited Today',
    value: employeesVisitedToday,
    icon: <FaUserTie size={24} />,
    color: '#20c997'
  },
  {
    title: 'Contractors Visited Today',
    value: contractorsVisitedToday,
    icon: <FaHardHat size={24} />,
    color: '#ffc107'
  
  },


  {
    title: 'Total Occupancy (Current)',
    value: totalOccupancy,
    icon: <FaUsers size={24} />,
    color: '#007bff'
  },

  {
    title: 'Employees Occupancy (Current)',
    value: employeeCount,
    icon: <FaUserTie size={24} />,
    color: '#28a745'
  },


  {
    title: 'Contractors Occupancy (Current)',
    value: contractorCount,
    icon: <FaHardHat size={24} />,
    color: '#fd7e14'
  },

];

  return (
    <Row className="mb-4">
      {cards.map((card, idx) => (
        <Col key={idx} sm={6} md={3} className="mb-3">
          <Card
            className="text-center shadow-sm"
            style={{ borderLeft: `5px solid ${card.color}` }}
          >
            <Card.Body>
              <div className="mb-2" style={{ color: card.color }}>
                {card.icon}
              </div>
              <Card.Title>{card.title}</Card.Title>
              <Card.Text style={{ fontSize: '1.6rem', fontWeight: 'bold' }}>
                {card.value}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      ))}
    </Row>
  );
};

export default SummaryCards;




file 5


// src/components/SummaryChart.jsx
import React, { useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  defs,
  linearGradient,
  stop
} from 'recharts';
import { Card } from 'react-bootstrap';

export default function SummaryChart({ summary = [] }) {
  useEffect(() => {
    console.log('Summary Chart Data:', summary);
  }, [summary]);

  return (
    <Card className="mb-4">
      <Card.Header>Zone-wise Occupancy</Card.Header>
      <Card.Body style={{ height: 350 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={summary} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
            <defs>
              <linearGradient id="zoneGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#007bff" stopOpacity={0.8}/>
                <stop offset="95%" stopColor="#007bff" stopOpacity={0.2}/>
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="zone" tick={{ fontSize: 12 }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12 }} />
            <Tooltip />
            <Legend wrapperStyle={{ bottom: 0 }} />
            <Bar
              dataKey="count"
              name="Count"
              fill="url(#zoneGradient)"
              radius={[8, 8, 0, 0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}


file 6

// src/components/ZoneBreakdownTable.jsx
import React from 'react';
import { Table } from 'react-bootstrap';

function ZoneBreakdownTable({ data }) {
  if (!data || !data.length) return <p>No zone breakdown data available.</p>;

  // Get all unique personnel types across all zones
  const personnelTypes = Array.from(
    new Set(
      data.flatMap(zone => Object.keys(zone).filter(k => k !== 'zone' && k !== 'total'))
    )
  );

  return (
    <Table striped bordered hover responsive>
      <thead>
        <tr>
          <th>Zone</th>
          {personnelTypes.map((ptype) => (
            <th key={ptype}>{ptype}</th>
          ))}
          <th>Total</th>
        </tr>
      </thead>
      <tbody>
        {data.map((zoneRow, idx) => (
          <tr key={idx}>
            <td>{zoneRow.zone}</td>
            {personnelTypes.map((ptype) => (
              <td key={ptype}>{zoneRow[ptype] || 0}</td>
            ))}
            <td>{zoneRow.total}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}

export default ZoneBreakdownTable;

