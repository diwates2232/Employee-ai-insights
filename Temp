let see how i display Floor deatails graph.
Total Occupancy-1213,
Podium Floor-725,
Tower b -303,
2ND Floor-185,
this is our Seat Occupancy details


// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// A palette of 12 “WU-friendly” gradient pairs (dark → light)
const FLOOR_COLOR_PALETTE = [
  ['#FFD100', '#FFF2CC'],  // Yellow → Pale Yellow
  ['#009E60', '#CFFAF3'],  // Green → Mint
  ['#A80000', '#FFCCCC'],  // Red → Pale Red
  ['#58595B', '#D6E3F0'],  // Dark Gray → Lavender Gray
  ['#FF6F61', '#FFD1CD'],  // Coral → Blush
  ['#FFB800', '#FFF8CC'],  // Accent Yellow → Pale Accent
  ['#006400', '#CCFFCC'],  // Dark Green → Pale Green
  ['#4B0082', '#E0CCFF'],  // Indigo → Lavender
  ['#C75D00', '#FFE0B2'],  // Orange → Peach
  ['#264653', '#A0B5D8'],  // Deep Teal → Light Blue
  ['#9B2226', '#FFB3B3'],  // Burgundy → Pale Pink
  ['#005F73', '#CAEBF2']   // Deep Cyan → Pale Cyan
];

export default function FloorOccupancyChart({ data = [] }) {
  // If there’s no data, show a fallback card
  if (!data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // 1) Sort floors by “total” descending
  const sortedData = [...data].sort((a, b) => b.total - a.total);

  // 2) Custom tooltip: shows floor name + total + breakdown by type
  const renderTooltip = ({ active, payload, label }) => {
    if (!active || !payload?.length) return null;
    const floorObj = payload[0].payload;
    const totalCount = floorObj.total;

    // Gather all keys except "floor" and "total" (e.g. “employees”, “contractors”, etc.)
    const breakdownEntries = Object.entries(floorObj).filter(
      ([key]) => key !== 'floor' && key !== 'total'
    );

    return (
      <div
        style={{
          backgroundColor: 'var(--wu-gray-dark)',
          color: '#fff',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '0.75rem',
          minWidth: 180
        }}
      >
        <div style={{ marginBottom: 4 }}>
          <strong style={{ fontSize: 14 }}>Floor: {label}</strong>
        </div>
        <div style={{ marginBottom: 6, fontWeight: 'bold' }}>
          Total: {totalCount}
        </div>
        {breakdownEntries.map(([type, value]) => (
          <div
            key={type}
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              marginTop: 2,
              color: '#fff'
            }}
          >
            <span style={{ opacity: 0.8 }}>
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </span>
            <span style={{ fontWeight: 'bold' }}>{value}</span>
          </div>
        ))}
      </div>
    );
  };

  return (
    <Card
      className="mb-4 shadow-sm border"
      style={{ borderColor: 'var(--wu-yellow)' }}
    >
      <Card.Header className="bg-dark text-warning text-center">
        Floor-wise HeadCount
      </Card.Header>
      <Card.Body style={{ height: 600, padding: 0, backgroundColor: 'var(--wu-gray-dark)' }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={sortedData}
            margin={{ top: 20, right: 24, left: 0, bottom: 24 }}
            barCategoryGap="05.%"   /* fewer gaps, to let bars expand */
          >
            {/* 3) Define one linearGradient per floor (up to 12) */}
            <defs>
              {sortedData.map((_, idx) => {
                const [darkColor, lightColor] =
                  FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length];
                return (
                  <linearGradient
                    id={`floor-grad-${idx}`}
                    key={`floor-grad-${idx}`}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={darkColor} stopOpacity={1} />
                    <stop offset="100%" stopColor={lightColor} stopOpacity={1} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* 4) Grid + Axes styling */}
            <CartesianGrid stroke="#555" strokeDasharray="3 3" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#fff' }}
              angle={0}               /* horizontal labels */
              textAnchor="middle"
              interval={0}
              height={40}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#fff' }}
              allowDecimals={false}
            />

            {/* 5) Custom Tooltip */}
            <Tooltip content={renderTooltip} />

            {/* 6) No Legend (only one series => not needed) */}

            {/* 7) Single “total” bar per floor, with curved top and no fixed width */}
            <Bar
              dataKey="total"
              name="Total Occupancy"
              radius={[20, 20, 0, 0]}  /* more curvature on top corners */
            >
              {sortedData.map((_, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={`url(#floor-grad-${idx})`}
                  stroke={FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length][0]}
                  strokeWidth={1}
                />
              ))}
              {/* 7a) Show a label of “total” above each bar */}
              <LabelList
                dataKey="total"
                position="top"
                style={{
                  fill: '#fff',
                  fontSize: 14,
                  fontWeight: 'bold'
                }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}
