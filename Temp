// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell,
  LabelList,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';
import floorCapacities from '../constants/floorCapacities';

// A palette of gradients for “live headcount” bars
const FLOOR_COLOR_PALETTE = [
  ['#006400', '#CCFFCC']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // 1) Enrich each floor object with liveCount, capacity, usedPct, and breakdown
  const enriched = data.map((floorObj) => {
    const { floor, total: liveCount } = floorObj;
    const capacity = floorCapacities[floor] ?? 0;
    const usedPct = capacity > 0 ? ((liveCount / capacity) * 100).toFixed(1) : '0.0';
    return {
      ...floorObj, // includes breakdown fields: employees, contractors, etc.
      capacity,
      liveCount,
      usedPct: Number(usedPct),
      label: `${liveCount}/${capacity}`
    };
  });

  // 2) Compute “Pune Office Total” across all floors
  const totalLive = enriched.reduce((sum, f) => sum + f.liveCount, 0);
  const totalCap = enriched.reduce((sum, f) => sum + f.capacity, 0);
  const totalUsedPct = totalCap > 0 ? ((totalLive / totalCap) * 100).toFixed(1) : '0.0';

  const totalEntry = {
    floor: 'Pune Office Total',
    liveCount: totalLive,
    capacity: totalCap,
    usedPct: Number(totalUsedPct),
    label: `${totalLive}/${totalCap}`
  };

  // 3) Sort floors by liveCount descending, then prepend “Pune Office Total”
  const sortedFloors = [...enriched].sort((a, b) => b.liveCount - a.liveCount);
  const chartData = [totalEntry, ...sortedFloors];

  // 4) Determine the maximum capacity to set Y-axis domain
  const maxCapacity = Math.max(...chartData.map((f) => f.capacity)) || 0;

  // 5) Custom tooltip to show raw counts, percentages, and breakdown
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload?.length) return null;
    const floorObj = payload[0].payload;
    const { liveCount, capacity, usedPct } = floorObj;

    // Include breakdown entries (employees, contractors, etc.)
    const breakdownEntries = Object.entries(floorObj).filter(
      ([key]) => !['floor', 'liveCount', 'capacity', 'usedPct', 'label'].includes(key)
    );

    return (
      <div
        style={{
          backgroundColor: 'var(--wu-gray-dark)',
          color: '#fff',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '0.75rem',
          minWidth: 200
        }}
      >
        <div style={{ marginBottom: 4 }}>
          <strong style={{ fontSize: 16 }}>Floor: {floorObj.floor}</strong>
        </div>
        <div style={{ marginBottom: 6, fontWeight: 'bold' }}>
          Live: {liveCount} / {capacity} ({usedPct}%)
        </div>
        {breakdownEntries.map(([type, value]) => (
          <div
            key={type}
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              marginTop: 2,
              color: '#fff',
              fontSize: 14
            }}
          >
            <span style={{ opacity: 0.8 }}>
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </span>
            <span style={{ fontWeight: 'bold' }}>{value}</span>
          </div>
        ))}
      </div>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{ borderBottom: '1px solid var(--wu-yellow)', fontSize: '1.25rem' }}
      >
        Western Union-Pune Headcount against Occupancy
      </Card.Header>

      <Card.Body
        style={{
          height: '100%',
          minHeight: 500,
          padding: 0,
          backgroundColor: 'var(--wu-gray-dark)'
        }}
      >
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={chartData}
            margin={{ top: 20, right: 24, left: 0, bottom: 24 }}
            barCategoryGap="1%" // reduced gap between floor groups
          >
            {/* 6) Gradient for capacity bars (yellow gradient) */}
            <defs>
              <linearGradient id="capacity-gradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#FFD100" stopOpacity={1} />
                <stop offset="100%" stopColor="#FFB800" stopOpacity={1} />
              </linearGradient>
              {/* 7) One gradient per floor for “live” bars (green gradient) */}
              {chartData.map((_, idx) => {
                const [darkColor, lightColor] = FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length];
                return (
                  <linearGradient id={`live-grad-${idx}`} key={`live-grad-${idx}`} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={darkColor} stopOpacity={1} />
                    <stop offset="100%" stopColor={lightColor} stopOpacity={1} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* 8) Grid and Axes */}
            <CartesianGrid stroke="#555" strokeDasharray="3 3" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 14, fill: '#fff' }}
              angle={0}
              textAnchor="middle"
              interval={0}
              height={30}
            />
            <YAxis
              tick={{ fontSize: 14, fill: '#fff' }}
              domain={[0, Math.ceil(maxCapacity / 50) * 50]} // round up to nearest 50
            />

            {/* 9) Custom Tooltip */}
            <Tooltip content={renderTooltip} />

            {/* 10) Legend */}
            <Legend
              verticalAlign="top"
              align="center"
              wrapperStyle={{ color: '#fff', paddingBottom: 8, fontSize: '0.9rem' }}
              payload={[
                { value: 'Occupancy (Seats)', type: 'square', color: '#FFD100' },
                { value: 'Live HeadCount', type: 'square', color: '#006400' }
              ]}
            />

            {/* 11) Capacity bar – wider, yellow gradient */}
            <Bar
              dataKey="capacity"
              name="Occupancy (Seats)"
              radius={[4, 4, 0, 0]}
              barSize={50}
              fill="url(#capacity-gradient)"
              stroke="#fff"
              strokeWidth={1}
            >
              {chartData.map((_, idx) => (
                <Cell key={`cap-cell-${idx}`} fill="url(#capacity-gradient)" />
              ))}
              <LabelList
                dataKey="capacity"
                position="top"
                formatter={(val) => val}
                style={{
                  fill: '#fff',
                  fontSize: 14,
                  fontWeight: 'bold'
                }}
              />
            </Bar>

            {/* 12) Live bar – narrower, green gradient */}
            <Bar dataKey="liveCount" name="Live HeadCount" radius={[4, 4, 0, 0]} barSize={30} stroke="#fff" strokeWidth={1}>
              {chartData.map((_, idx) => (
                <Cell key={`live-cell-${idx}`} fill={`url(#live-grad-${idx})`} />
              ))}
              {/* Label on top: raw count */}
              <LabelList
                dataKey="liveCount"
                position="top"
                formatter={(val) => val}
                style={{
                  fill: '#fff',
                  fontSize: 14,
                  fontWeight: 'bold',
                  backgroundColor: 'rgba(0,0,0,0.7)',
                  borderRadius: 2,
                  padding: '2px 4px'
                }}
              />
              {/* Label inside bar: percentage */}
              <LabelList
                dataKey="usedPct"
                position="center"
                formatter={(val) => `${val}%`}
                style={{
                  fill: '#fff',
                  fontSize: 14,
                  fontWeight: 'bold'
                }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}






// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

// 7 attractive colors (Western Union + complementary accents)
const COLORS = [
  '#FFD100', // WU Yellow
  '#009E60', // WU Green
  '#88B04B', // Olive
  '#FF6F61', // Coral
  '#58595B', // WU Gray
  '#FFB800', // Accent Yellow
  '#6B5B95'  // Indigo
];

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value } = payload[0];
  return (
    <div
      style={{
        backgroundColor: '#1a1a1a',
        color: '#fff',
        border: '1px solid #444',
        padding: '0.5rem',
        borderRadius: 4,
        fontSize: '0.9rem'
      }}
    >
      <div><strong>{name}</strong></div>
      <div>Count: {value}</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white">No personnel data</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{ borderBottom: '1px solid var(--wu-yellow)', fontSize: '1.25rem' }}
      >
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body
        style={{
          height: '100%',
          minHeight: 500,
          padding: '1rem',
          backgroundColor: '#1a1a1a'
        }}
      >
        <ResponsiveContainer>
          <PieChart>
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={80}
              outerRadius={180}
              paddingAngle={2}
              labelLine={false}
              label={({ percent, name }) => (
                <tspan style={{ fill: '#fff', fontSize: 12, fontWeight: 'bold' }}>
                  {`${name}: ${(percent * 100).toFixed(0)}%`}
                </tspan>
              )}
              stroke="#fff"
              strokeWidth={2}
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.personnelType}
                  fill={COLORS[idx % COLORS.length]}
                />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fill: '#fff', fontSize: '1.8rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              iconType="circle"
              wrapperStyle={{ color: '#FFD100', fontSize: '0.8rem', paddingTop: 10 }}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}










// src/components/SummaryChart.jsx

import React, { useMemo } from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';

// Gradients/solid colors for known zones
const ZONE_GRADIENTS = {
  'Red Zone':               ['#FF0000', '#D22B2B'],
  'Red Zone - Outer Area':  ['#FF0000', '#D22B2B'],
  'Yellow Zone':            ['#FFDE21', '#FFBF00'],
  'Yellow Zone - Outer Area':['#FFDE21', '#FFBF00'],
  '2nd Floor, Pune':        ['#FF6F61', '#FFA28F'],
  'Orange Zone':            ['#E3963E', '#FFC966'],
  'Orange Zone - Outer Area':['#E3963E', '#FFC966'],
  'Green Zone':             ['#009E60', '#50C878'],
  'Reception Area':         ['#E0CCFF', '#F4E6FF'],
  'Assembly Area':          ['#FE6F5E', '#A366FF'],
  'Tower B':                ['#E68FAC', '#99BBFF']
};

const DEFAULT_GRADIENT = ['#3B4CCA', '#D0D8FF'];
const SOLID_COLORS = ['#FFD100', '#009E60', '#FF6F61', '#58595B', '#FFB800', '#C75D00'];

export default function SummaryChart({ summary = [] }) {
  // 1) Build pieData with equal slice widths but carry actual counts
  const pieData = useMemo(
    () =>
      summary.map((z) => ({
        name:  z.zone,
        value: 1,
        count: z.count
      })),
    [summary]
  );

  // 2) Build a zoneLegendItems array
  const zoneLegendItems = useMemo(() => {
    return pieData.map((entry, idx) => {
      const grad = ZONE_GRADIENTS[entry.name];
      const color = grad ? grad[0] : SOLID_COLORS[idx % SOLID_COLORS.length];
      return {
        value: entry.name,
        type: 'circle',
        color
      };
    });
  }, [pieData]);

  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  // 3) Custom tooltip to display the actual count
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload || !payload.length) return null;
    const { name, count } = payload[0].payload;
    return (
      <div
        style={{
          backgroundColor: '#000',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '8px',
          color: '#FFD100',
          fontSize: '0.9rem'
        }}
      >
        <div><strong>Zone:</strong> {name}</div>
        <div style={{ marginTop: 4 }}><strong>Count:</strong> {count}</div>
      </div>
    );
  };

  // 4) Helper: get fill & stroke for a given zone
  const getColorsForZone = (zoneName, idx) => {
    const grad = ZONE_GRADIENTS[zoneName];
    if (grad) {
      return {
        fill: `url(#grad-${zoneName.replace(/\s+/g, '-')})`,
        stroke: grad[0]
      };
    } else {
      const solid = SOLID_COLORS[idx % SOLID_COLORS.length];
      return { fill: solid, stroke: solid };
    }
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{ fontSize: '1.25rem' }}
      >
        Western Union-Pune Area-wise HeadCount
      </Card.Header>

      <Card.Body style={{ height: '100%', minHeight: 500, padding: 0 }}>
        <div
          style={{
            position: 'relative',
            height: '100%',
            backgroundColor: 'var(--wu-gray-dark)',
            border: '1px solid var(--wu-yellow)',
            borderRadius: 4,
            overflow: 'hidden'
          }}
        >
          {/* Pie Chart with legend below */}
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              {/* Gradient definitions for each slice */}
              <defs>
                {pieData.map((entry) => {
                  const key = entry.name.replace(/\s+/g, '-');
                  const grad = ZONE_GRADIENTS[entry.name] || DEFAULT_GRADIENT;
                  return (
                    <linearGradient
                      id={`grad-${key}`}
                      key={key}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={grad[0]} stopOpacity={1} />
                      <stop offset="100%" stopColor={grad[1]} stopOpacity={1} />
                    </linearGradient>
                  );
                })}
              </defs>

              <Pie
                data={pieData}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="45%"
                innerRadius={80}
                outerRadius={200}
                paddingAngle={3}
                labelLine={false}
                isAnimationActive={false}
                label={({ cx, cy, midAngle, innerRadius, outerRadius, index }) => {
                  const RADIAN = Math.PI / 180;
                  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
                  const x = cx + radius * Math.cos(-midAngle * RADIAN);
                  const y = cy + radius * Math.sin(-midAngle * RADIAN);
                  const value = pieData[index].count;

                  return (
                    <text
                      x={x}
                      y={y}
                      fill="#FFFFFF"
                      textAnchor="middle"
                      dominantBaseline="central"
                      fontSize="16"
                      fontWeight="bold"
                    >
                      {value}
                    </text>
                  );
                }}
              >
                {pieData.map((entry, idx) => {
                  const { fill, stroke } = getColorsForZone(entry.name, idx);
                  return (
                    <Cell
                      key={`slice-${idx}`}
                      fill={fill}
                      stroke={stroke}
                      strokeWidth={2}
                    />
                  );
                })}
              </Pie>

              <Tooltip content={renderTooltip} />

              {/* Legend positioned below */}
              <Legend
                layout="horizontal"
                verticalAlign="bottom"
                align="center"
                iconType="circle"
                wrapperStyle={{
                  marginTop: '-10px',
                  color: '#FFD100',
                  fontSize: '0.8rem'
                }}
                payload={zoneLegendItems}
              />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}












Now read below 3 compoments file carefully, dont make anoyher changes now file is look good,Western Union-Pune Headcount against Occupancy
as per this chart update remenaing all chart only for card border colour , Font size , when cursor move theb details display their bg colour and header section and yeloow line on three cards ,
make it similar those things Which is displyed in the each card ,
Dont make unneccessary changes strickly,

also there is single issue as per Desktop oue cards and charts display perfect but when i open this dashboard on laptop some components and charts are not display good so make a dynamic content for visibility 

and give me all updated components file carefully , 


C:\Users\W0024618\Desktop\swipeData\client\src\components\FloorOccupancyChart.jsx



// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell,
  LabelList,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';
import floorCapacities from '../constants/floorCapacities';
// floorCapacities should look like:
// {
//   "Podium Floor": 725,
//   "Tower B":      303,
//   "2nd Floor":    185,
//   // …any other floors
// }

// A palette of 12 gradients for “live headcount” bars
const FLOOR_COLOR_PALETTE = [
  //  ['#FFD100', '#FFF2CC'],
  //  ['#009E60', '#CFFAF3'],
  // ['#A80000', '#FFCCCC'],
  // ['#58595B', '#D6E3F0'],
  // ['#FF6F61', '#FFD1CD'],
    // ['#FFB800', '#FFF8CC'],
   ['#006400', '#CCFFCC'],
  // ['#4B0082', '#E0CCFF'],
  // ['#C75D00', '#FFE0B2'],
  // ['#264653', '#A0B5D8'],
  // ['#9B2226', '#FFB3B3'],
  // ['#005F73', '#CAEBF2']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // 1) Enrich each floor object with liveCount, capacity, usedPct, and breakdown
  const enriched = data.map((floorObj) => {
    const { floor, total: liveCount } = floorObj;
    const capacity = floorCapacities[floor] ?? 0;
    const usedPct = capacity > 0
      ? ((liveCount / capacity) * 100).toFixed(1)
      : '0.0';
    return {
      ...floorObj,           // includes breakdown fields: employees, contractors, etc.
      capacity,
      liveCount,
      usedPct: Number(usedPct),
      label: `${liveCount}/${capacity}`
    };
  });

  // 2) Compute “Pune Office” totals across all floors
  const totalLive = enriched.reduce((sum, f) => sum + f.liveCount, 0);
  const totalCap  = enriched.reduce((sum, f) => sum + f.capacity, 0);
  const totalUsedPct = totalCap > 0
    ? ((totalLive / totalCap) * 100).toFixed(1)
    : '0.0';

  const totalEntry = {
    floor: 'Pune Office Total',
    liveCount: totalLive,
    capacity: totalCap,
    usedPct: Number(totalUsedPct),
    label: `${totalLive}/${totalCap}`
  };

  // 3) Sort floors by liveCount descending, then prepend “Pune Office”
  const sortedFloors = [...enriched].sort((a, b) => b.liveCount - a.liveCount);
  const chartData = [totalEntry, ...sortedFloors];

  // 4) Determine the maximum capacity to set Y-axis domain
  const maxCapacity = Math.max(...chartData.map(f => f.capacity)) || 0;

  // 5) Custom tooltip to show raw counts, percentages, and breakdown
  const renderTooltip = ({ active, payload, label }) => {
    if (!active || !payload?.length) return null;
    // payload[0] corresponds to capacity; payload[1] to liveCount
    const floorObj = payload[0].payload;
    const { liveCount, capacity, usedPct } = floorObj;

    // Include breakdown entries (employees, contractors, etc.)
    const breakdownEntries = Object.entries(floorObj).filter(
      ([key]) =>
        !['floor', 'liveCount', 'capacity', 'usedPct', 'label'].includes(key)
    );

    return (
      <div
        style={{
          backgroundColor: 'var(--wu-gray-dark)',
          color: '#fff',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '0.75rem',
          minWidth: 200
        }}
      >
        <div style={{ marginBottom: 4 }}>
          <strong style={{ fontSize: 14 }}>Floor: {label}</strong>
        </div>
        <div style={{ marginBottom: 6, fontWeight: 'bold' }}>
          Live: {liveCount} / {capacity} ({usedPct}%)
        </div>
        {breakdownEntries.map(([type, value]) => (
          <div
            key={type}
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              marginTop: 2,
              color: '#fff'
            }}
          >
            <span style={{ opacity: 0.8 }}>
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </span>
            <span style={{ fontWeight: 'bold' }}>{value}</span>
          </div>
        ))}
      </div>
    );
  };

  return (
    <Card
      // className="mb-4 shadow-sm border"
      className="bg-dark text-warning text-center fw-bold"
       style={{
          borderBottom: '1px solid var(--wu-yellow)',  // <-- yellow underline
        }}
    >
      <Card.Header className="bg-dark text-warning text-center">
        Western Union-Pune Headcount against Occupancy
        
      </Card.Header>


      <Card.Body
        style={{
          height: 600,
          padding: 0,
          backgroundColor: 'var(--wu-gray-dark)'
          
        }}
      >
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={chartData}
            margin={{ top: 20, right: 24, left: 0, bottom: 24 }}
            barCategoryGap="1%"  // reduced gap between floor groups
          >
            {/* 6) Gradient for capacity bars (red dark → faintwu  ['#FFD100', '#FFF2CC'],['#A80000', '#FFCCCC'],  ['#006400', '#CCFFCC'], ['#FFB800', '#FFF8CC'],) */}
            
            <defs>
              <linearGradient id="capacity-gradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#FFD100"stopOpacity={1} />
                <stop offset="100%" stopColor="#FFB800"  stopOpacity={1} />
              </linearGradient>
              {/* 7) One gradient per floor for “live” bars (multi‐colour) */}
              {chartData.map((_, idx) => {
                const [darkColor, lightColor] =
                  FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length];
                return (
                  <linearGradient
                    id={`live-grad-${idx}`}
                    key={`live-grad-${idx}`}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={darkColor} stopOpacity={1} />
                    <stop offset="100%" stopColor={lightColor} stopOpacity={1} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* 8) Grid and Axes */}
            <CartesianGrid stroke="#555" strokeDasharray="3 3" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 15, fill: '#fff' }}
              angle={0}
              textAnchor="middle"
              interval={0}
              height={40}
            />
            <YAxis
              tick={{ fontSize: 15, fill: '#fff' }}
              domain={[0, Math.ceil(maxCapacity / 50) * 50]} // round up to nearest 50
            />

            {/* 9) Custom Tooltip */}
            <Tooltip content={renderTooltip} />

            {/* 10) Legend */}
            <Legend
              verticalAlign="top"
              align="center"
              wrapperStyle={{ color: '#fff', paddingBottom: 8 }}
              payload={[
                { value: 'Occupancy', type: 'square', color: '#FFD100' },
                { value: 'Live HeadCount', type: 'square', color: '#006400' }
              ]}
            />

            {/* 11) Capacity bar – wider, red gradient */}
            <Bar
              dataKey="capacity"
              name="Occupancy"
              radius={[4, 4, 0, 0]}
              barSize={70}
              fill="url(#capacity-gradient)"
              stroke="#fff"
              strokeWidth={1}
            >
              {chartData.map((_, idx) => (
                <Cell
                  key={`cap-cell-${idx}`}
                  fill="url(#capacity-gradient)"
                />
              ))}
              <LabelList
                dataKey="capacity"
                position="top"
                formatter={(val) => val}
                style={{
                  fill: '#fff',
                  fontSize: 15,
                  fontWeight: 'bold'
                }}
              />
            </Bar>

            {/* 12) Live bar – narrower, multi‐colour
            <Bar
              dataKey="liveCount"
              name="Live HeadCount"
              radius={[4, 4, 0, 0]}
              barSize={70}
            >
              {chartData.map((_, idx) => (
                <Cell
                  key={`live-cell-${idx}`}
                  fill={`url(#live-grad-${idx})`}
                />
              ))}
              <LabelList
                dataKey="liveCount"
                position="top"
                formatter={(val) => val}
                style={{
                  fill: '#fff',
                  fontSize: 15,
                  fontWeight: 'bold',
                  backgroundColor: 'rgba(255,255,255,0.7)',
                  borderRadius: 2,
                  padding: '2px 4px'
                }}
              />
            </Bar> */}

{/* Live HeadCount Bar */}
<Bar
  dataKey="liveCount"
  name="Live HeadCount"
  radius={[4, 4, 0, 0]}
  barSize={70}
  stroke="#fff"
  strokeWidth={1}
>
  {chartData.map((_, idx) => (
    <Cell
      key={`live-cell-${idx}`}
      fill={`url(#live-grad-${idx})`}
    />
  ))}

  {/* Label on top: raw count */}
  <LabelList
    dataKey="liveCount"
    position="top"
    formatter={(val) => val}
    style={{
      fill: '#fff',
      fontSize: 15,
      fontWeight: 'bold',
      backgroundColor: 'rgba(255,255,255,0.7)',
      borderRadius: 2,
      padding: '2px 4px'
    }}
  />

  {/* Label inside bar: percentage */}
  <LabelList
    dataKey="usedPct"
    position="center"
    formatter={(val) => `${val}%`}
    style={{
      fill: '#fff',
      fontSize: 15,
      fontWeight: 'bold'
    }}
  />
</Bar>

          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}






// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

// 7 attractive colors (Western Union + complementary accents)
const COLORS = [
  '#FFD100', // WU Yellow
  '#009E60', // WU Green
  '#88B04B', // Olive
  '#FF6F61', // Coral
  '#58595B', // WU Gray
  '#FFB800', // Accent Yellow
  '#6B5B95'  // Indigo
];

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value } = payload[0];
  return (
    <div style={{
      backgroundColor: '#1a1a1a',
      color: '#fff',
      border: '1px solid #444',
      padding: '0.5rem',
      borderRadius: 4
    }}>
      <div><strong>{name}</strong></div>
      <div>Count: {value}</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white">No personnel data</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#444' }}>
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{
          borderBottom: '1px solid var(--wu-yellow)',  // <-- yellow underline
        }}
      >
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body
        style={{
          height: 600,           // match other charts
          padding: '1rem',
          backgroundColor: '#1a1a1a'
        }}
      >
        <ResponsiveContainer>
          <PieChart>
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={80}
              outerRadius={220}
              paddingAngle={2}
              labelLine={false}
              label={({ percent, name }) => (
                <tspan style={{ fill: '#fff', fontSize: 12 }}>
                  {`${name}: ${(percent * 100).toFixed(0)}%`}
                </tspan>
              )}
              stroke="#fff"
              strokeWidth={2}
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.personnelType}
                  fill={COLORS[idx % COLORS.length]}
                />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fill: '#fff', fontSize: '1.8rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              wrapperStyle={{ paddingTop: 10 }}
              formatter={(value) => (
                <span style={{ color: '#FFD100', fontWeight: 'bold' }}>
                  {value}
                </span>
              )}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}









// src/components/SummaryChart.jsx

import React, { useMemo } from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';

// Gradients/solid colors for known zones
const ZONE_GRADIENTS = {
  'Red Zone':               ['#FF0000', '#D22B2B'],
  'Red Zone - Outer Area':  ['#FF0000', '#D22B2B'],
  'Yellow Zone':            ['#FFDE21', '#FFBF00	'],
  'Yellow Zone - Outer Area':['#FFDE21', '#FFBF00	'],
  '2nd Floor, Pune':        ['#FF6F61', '#FFA28F'],
  'Orange Zone':            ['#E3963E	', '#FFC966'],
  'Orange Zone - Outer Area':['#E3963E	', '#FFC966'],
  'Green Zone':             ['#009E60', '#50C878	'],
  'Reception Area':         ['#E0CCFF', '#F4E6FF'],
  'Assembly Area':          ['#FE6F5E', '#A366FF'],
  'Tower B':                ['#E68FAC	', '#99BBFF']
};

const DEFAULT_GRADIENT = ['#3B4CCA', '#D0D8FF'];
const SOLID_COLORS = ['#FFD100', '#009E60', '#FF6F61', '#58595B', '#FFB800', '#C75D00'];

export default function SummaryChart({ summary = [] }) {
  // 1) Build pieData with equal slice widths but carry actual counts
  const pieData = useMemo(
    () =>
      summary.map((z) => ({
        name:  z.zone,
        value: 1,
        count: z.count
      })),
    [summary]
  );

  // 2) Build a zoneLegendItems array
  const zoneLegendItems = useMemo(() => {
    return pieData.map((entry, idx) => {
      const grad = ZONE_GRADIENTS[entry.name];
      const color = grad ? grad[0] : SOLID_COLORS[idx % SOLID_COLORS.length];
      return {
        value: entry.name,
        type: 'circle',
        color
      };
    });
  }, [pieData]);

  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  // 3) Custom tooltip to display the actual count
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload || !payload.length) return null;
    const { name, count } = payload[0].payload;
    return (
      <div
        style={{
          backgroundColor: '#000',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '8px',
          color: '#FFD100'
        }}
      >
        <div><strong>Zone:</strong> {name}</div>
        <div style={{ marginTop: 4 }}><strong>Count:</strong> {count}</div>
      </div>
    );
  };

  // 4) Helper: get fill & stroke for a given zone
  const getColorsForZone = (zoneName, idx) => {
    const grad = ZONE_GRADIENTS[zoneName];
    if (grad) {
      return {
        fill: `url(#grad-${zoneName.replace(/\s+/g, '-')})`,
        stroke: grad[0]
      };
    } else {
      const solid = SOLID_COLORS[idx % SOLID_COLORS.length];
      return { fill: solid, stroke: solid };
    }
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Western Union-Pune Area-wise HeadCount
      </Card.Header>

      <Card.Body style={{ height: 600, padding: 0 }}>
        <div
          style={{
            position: 'relative',
            height: '100%',
            backgroundColor: 'var(--wu-gray-dark)',
            border: '1px solid var(--wu-yellow)',
            borderRadius: 4,
            overflow: 'hidden'
          }}
        >
          {/* Pie Chart with legend below */}
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              {/* Gradient definitions for each slice */}
              <defs>
                 {pieData.map((entry) => {
                  const key = entry.name.replace(/\s+/g, '-');
                  const grad = ZONE_GRADIENTS[entry.name] || DEFAULT_GRADIENT;
                  return (
                    <linearGradient
                      id={`grad-${key}`}
                      key={key}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={grad[0]} stopOpacity={1} />
                      <stop offset="100%" stopColor={grad[1]} stopOpacity={1} />
                    </linearGradient>
                  );
                })}
              </defs>

  <Pie
  data={pieData}
  dataKey="value"
  nameKey="name"
  paddingBottom={0}
  cx="50%"
  cy="45%"
  innerRadius={80}
  outerRadius={220}
  paddingAngle={2}
  labelLine={false}
  isAnimationActive={true}
  label={({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {
    const RADIAN = Math.PI / 180;
    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
    const x = cx + radius * Math.cos(-midAngle * RADIAN);
    const y = cy + radius * Math.sin(-midAngle * RADIAN);
    const value = pieData[index].count;

  return (
      <text
        x={x}
        y={y}
        fill="#FFFFFF"
        textAnchor="middle"
        dominantBaseline="central"
        fontSize="16"
        fontWeight="bold"
      >
        {value}
      </text>
    );
  }}
>
                {pieData.map((entry, idx) => {
                  const { fill, stroke } = getColorsForZone(entry.name, idx);
                  return (
                    <Cell
                      key={`slice-${idx}`}
                      fill={fill}
                      stroke={stroke}
                      strokeWidth={2}
                    />
                  );
                })}
              </Pie>

              <Tooltip content={renderTooltip} />

              {/* Legend positioned below */}
              <Legend
                layout="horizontal"
                verticalAlign="bottom"
                align="center"
                iconType="circle"
                wrapperStyle={{
                  marginBottom:'-20',
                  paddingBottom:' -10',
                  color: '#FFD100',
                  fontSize: '0.8rem'
                }}
                
                payload={zoneLegendItems}
              />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}




