// src/components/FloorOccupancyChart.jsx
import React from 'react';
import {
  BarChart, Bar, XAxis, YAxis, Tooltip,
  ResponsiveContainer, CartesianGrid, Legend,
  Cell, LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

const FLOOR_COLORS = [
  '#FFD100', '#000000', '#58595B', '#FFB800',
  '#C0C0C0', '#333333', '#F2C744', '#A6A6A6'
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) return <Card body>No floor data available</Card>;

  const sorted = [...data].sort((a, b) => b.total - a.total);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center fw-bold">
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer>
          <BarChart
            data={sorted}
            margin={{ top: 20, right: 20, left: 10, bottom: 40 }}
            barCategoryGap="15%"
          >
            <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#333' }}
              label={{ value: 'Floor', position: 'bottom', offset: 20 }}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#333' }}
              allowDecimals={false}
              label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 0 }}
            />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
            <Bar dataKey="total" name="Occupancy" radius={[6,6,0,0]} barSize={30}>
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.floor}
                  fill={FLOOR_COLORS[idx % FLOOR_COLORS.length]}
                  stroke="#fff"
                  strokeWidth={1}
                />
              ))}
              <LabelList dataKey="total" position="top" style={{ fill: '#000', fontSize: 12 }} />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}





// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart, Pie, Cell, Tooltip,
  ResponsiveContainer, Legend, Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#FFD100', '#000000', '#58595B', '#FFB800'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) return <Card body>No personnel data</Card>;

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center fw-bold">
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer>
          <PieChart>
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%" cy="50%"
              innerRadius={70} outerRadius={110}
              paddingAngle={4}
              labelLine={false}
              label={({ percent, name }) => `${name}: ${(percent*100).toFixed(0)}%`}
              stroke="#fff" strokeWidth={1}
            >
              {sorted.map((entry, idx) => (
                <Cell key={entry.personnelType} fill={COLORS[idx % COLORS.length]} />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={value => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}






// src/components/PersonnelTypeBreakdownTable.jsx
import React from 'react';
import { Table, Badge } from 'react-bootstrap';

export default function PersonnelTypeBreakdownTable({ data = [] }) {
  if (!data.length) return <p>No data available for personnel types.</p>;

  const colors = ['warning','dark','secondary','info'];

  return (
    <Table striped bordered hover responsive className="mb-4">
      <thead>
        <tr>
          <th>Personnel Type</th>
          <th>Count</th>
        </tr>
      </thead>
      <tbody>
        {data.map((entry,i) => (
          <tr key={entry.type}>
            <td>
              <Badge bg={colors[i%colors.length]}>{entry.type}</Badge>
            </td>
            <td>{entry.count}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}






// src/components/SummaryCards.jsx
import React from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { FaUsers, FaUserTie, FaHardHat } from 'react-icons/fa';

export default function SummaryCards({
  totalVisitedToday, employeesVisitedToday, contractorsVisitedToday,
  totalOccupancy, employeeCount, contractorCount
}) {
  const cards = [
    { title: 'Visited Today', value: totalVisitedToday, icon: <FaUsers />, color: 'warning' },
    { title: 'Employees Today', value: employeesVisitedToday, icon: <FaUserTie />, color: 'success' },
    { title: 'Contractors Today', value: contractorsVisitedToday, icon: <FaHardHat />, color: 'danger' },
    { title: 'Current Total', value: totalOccupancy, icon: <FaUsers />, color: 'primary' },
    { title: 'Employees Current', value: employeeCount, icon: <FaUserTie />, color: 'success' },
    { title: 'Contractors Current', value: contractorCount, icon: <FaHardHat />, color: 'danger' },
  ];

  return (
    <Row className="mb-4">
      {cards.map((c,i) => (
        <Col key={i} sm={6} md={4} lg={2} className="mb-3">
          <Card border={c.color} className="shadow-sm infographic-card">
            <Card.Body className="text-center">
              <div className={`text-${c.color} mb-2`} style={{ fontSize: '1.5rem' }}>
                {c.icon}
              </div>
              <Card.Title>{c.title}</Card.Title>
              <Card.Text style={{ fontSize: '1.6rem', fontWeight: 'bold' }}>
                {c.value}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      ))}
    </Row>
  );
}







// src/components/ZoneBreakdownTable.jsx
import React from 'react';
import { Table, Badge } from 'react-bootstrap';

export default function ZoneBreakdownTable({ data = [] }) {
  if (!data.length) return <p>No zone breakdown data available.</p>;

  const types = Array.from(new Set(data.flatMap(z => Object.keys(z).filter(k => k!=='zone'&&k!=='total'))));
  const colors = ['primary','success','warning','info'];

  return (
    <Table striped bordered hover responsive className="mb-4">
      <thead>
        <tr>
          <th>Zone</th>
          {types.map((t,i) => <th key={t}><Badge bg={colors[i%colors.length]}>{t}</Badge></th>)}
          <th>Total</th>
        </tr>
      </thead>
      <tbody>
        {data.map((z,i) => (
          <tr key={i}>
            <td>{z.zone}</td>
            {types.map(t => <td key={t}>{z[t]||0}</td>)}
            <td>{z.total}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}







// src/components/ZoneDetailsTable.js
import React from 'react';

export default function ZoneDetailsTable({ data = {} }) {
  const entries = Object.entries(data);
  if (!entries.length) return <p>No zone detail data available.</p>;

  return (
    <div className="zone-details-table mb-4">
      {entries.map(([zone, emps]) => (
        <div key={zone} className="mb-3 p-3 border rounded shadow-sm">
          <h3 className="mb-2">{zone} ({emps.length})</h3>
          <table className="table table-sm">
            <thead>
              <tr>
                <th>ID</th><th>Name</th><th>Door</th><th>Time</th><th>Type</th>
              </tr>
            </thead>
            <tbody>
              {emps.map((e,i) => (
                <tr key={`${e.EmployeeID}-${i}`}>
                  <td>{e.EmployeeID}</td>
                  <td>{e.ObjectName1}</td>
                  <td>{e.Door}</td>
                  <td>{e.Swipe_Time}</td>
                  <td>{e.PersonnelType}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))}
    </div>
  );
}














Use infographic theme and Western union colours make heights of charts same and give me updated js file carefully
C:\Users\W0024618\Desktop\swipeData\client\src\components


// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  Legend,
  CartesianGrid
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = {
  Contractor: '#fd7e14',
  'Property Management': '#28a745',
  // add more personnel types here...
};

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor data available</Card>;
  }

  // determine all personnel types present
  const types = Array.from(
    new Set(data.flatMap(d => Object.keys(d).filter(k => k !== 'floor' && k !== 'total')))
  );

  return (
    <Card className="mb-4">
      <Card.Header>Floor-wise Occupancy</Card.Header>
      <Card.Body style={{ height: 350 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="floor" tick={{ fontSize: 12 }} />
            <YAxis tick={{ fontSize: 12 }} />
            <Tooltip />
            <Legend wrapperStyle={{ bottom: -10 }} />
            {types.map((type, idx) => (
              <Bar
                key={type}
                dataKey={type}
                stackId="a"
                name={type}
                fill={COLORS[type] || '#cccccc'}
                radius={[8, 8, 0, 0]}
              />
            ))}
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}







// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#007bff', '#28a745', '#fd7e14', '#6f42c1'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, entry) => sum + entry.count, 0);

  if (!data.length || total === 0) {
    return <Card body>No personnel data available</Card>;
  }

  return (
    <Card className="mb-4">
      <Card.Header>Personnel Type Occupancy</Card.Header>
      <Card.Body style={{ height: 350 }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={data}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={100}
              paddingAngle={4}
              labelLine={false}
              label={({ name, percent }) =>
                `${name}: ${(percent * 100).toFixed(0)}%`
              }
            >
              {data.map((entry, idx) => (
                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={(value) => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}






// src/components/PersonnelTypeBreakdownTable.jsx

import React from 'react';
import { Table } from 'react-bootstrap';

export default function PersonnelTypeBreakdownTable({ data }) {
  if (!data || data.length === 0) {
    return <p>No data available for personnel types.</p>;
  }

  return (
    <Table striped bordered hover responsive>
      <thead>
        <tr>
          <th>Personnel Type</th>
          <th>Count</th>
        </tr>
      </thead>
      <tbody>
        {data.map((entry, idx) => (
          <tr key={idx}>
            <td>{entry.type}</td>
            <td>{entry.count}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}


C:\Users\W0024618\Desktop\swipeData\client\src\components\SummaryCards.jsx



import React from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { FaUsers, FaUserTie, FaHardHat } from 'react-icons/fa';

const SummaryCards = ({
  totalOccupancy,
  employeeCount,
  contractorCount,
  totalVisitedToday,
  employeesVisitedToday,
  contractorsVisitedToday
}) => {
 const cards = [

  {
    title: 'Total Visited Today',
    value: totalVisitedToday,
    icon: <FaUsers size={24} />,
    color: '#6f42c1'
  },
  {
    title: 'Employees Visited Today',
    value: employeesVisitedToday,
    icon: <FaUserTie size={24} />,
    color: '#20c997'
  },
  {
    title: 'Contractors Visited Today',
    value: contractorsVisitedToday,
    icon: <FaHardHat size={24} />,
    color: '#ffc107'
  
  },


  {
    title: 'Total Occupancy (Current)',
    value: totalOccupancy,
    icon: <FaUsers size={24} />,
    color: '#007bff'
  },

  {
    title: 'Employees Occupancy (Current)',
    value: employeeCount,
    icon: <FaUserTie size={24} />,
    color: '#28a745'
  },


  {
    title: 'Contractors Occupancy (Current)',
    value: contractorCount,
    icon: <FaHardHat size={24} />,
    color: '#fd7e14'
  },

];

  return (
    <Row className="mb-4">
      {cards.map((card, idx) => (
        <Col key={idx} sm={6} md={3} className="mb-3">
          <Card
            className="text-center shadow-sm"
            style={{ borderLeft: `5px solid ${card.color}` }}
          >
            <Card.Body>
              <div className="mb-2" style={{ color: card.color }}>
                {card.icon}
              </div>
              <Card.Title>{card.title}</Card.Title>
              <Card.Text style={{ fontSize: '1.6rem', fontWeight: 'bold' }}>
                {card.value}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      ))}
    </Row>
  );
};

export default SummaryCards;




// src/components/ZoneBreakdownTable.jsx


import React from 'react';
import { Table } from 'react-bootstrap';

function ZoneBreakdownTable({ data }) {
  if (!data || !data.length) return <p>No zone breakdown data available.</p>;

  // Get all unique personnel types across all zones
  const personnelTypes = Array.from(
    new Set(
      data.flatMap(zone => Object.keys(zone).filter(k => k !== 'zone' && k !== 'total'))
    )
  );

  return (
    <Table striped bordered hover responsive>
      <thead>
        <tr>
          <th>Zone</th>
          {personnelTypes.map((ptype) => (
            <th key={ptype}>{ptype}</th>
          ))}
          <th>Total</th>
        </tr>
      </thead>
      <tbody>
        {data.map((zoneRow, idx) => (
          <tr key={idx}>
            <td>{zoneRow.zone}</td>
            {personnelTypes.map((ptype) => (
              <td key={ptype}>{zoneRow[ptype] || 0}</td>
            ))}
            <td>{zoneRow.total}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}

export default ZoneBreakdownTable;


// src/components/ZoneDetailsTable.js

import React, { useEffect } from 'react';

function ZoneDetailsTable({ data = {} }) {
  const entries = Object.entries(data);

  useEffect(() => {
    console.log('Zone Details Table Data:', data);
  }, [data]);

  if (entries.length === 0) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-details-table">
      {entries.map(([zone, employees]) => (
        <section key={zone} className="zone-section">
          <h3 className="zone-title">{zone}</h3>
          <table className="zone-table">
            <thead>
              <tr>
                <th>Employee ID</th>
                <th>Name</th>
                <th>Door</th>
                <th>Swipe Time</th>
                <th>Personnel Type</th>
              </tr>
            </thead>
            <tbody>
              {employees.map(emp => (
                <tr key={`${emp.EmployeeID}-${emp.Swipe_Time}`}>
                  <td>{emp.EmployeeID}</td>
                  <td>{emp.ObjectName1}</td>
                  <td>{emp.Door}</td>
                  <td>{emp.Swipe_Time}</td>
                  <td>{emp.PersonnelType}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>
      ))}
    </div>
  );
}

export default ZoneDetailsTable;


