const { denver } = require('../config/siteConfig');
const sql         = require('mssql');

// helper: normalize direction & map door â†’ floor, fallback to 'Unknown Floor'
function mapDoorToFloor(doorName, direction) {
  // normalize the SQL direction to your map suffix
  let suffix;
  if (direction === 'InDirection')   suffix = 'IN';
  else if (direction === 'OutDirection') suffix = 'OUT';
  else suffix = direction.trim();

  const key = `${doorName.trim()}___${suffix}`;
  return denver.zoneFloorMap[key] || 'Unknown Floor';
}

// 1) fetch all new swipe events since `since`
async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
             THEN t2.Text12
             ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// ... fetchTotalVisitedToday() and fetchVisitedTodayBreakdown() unchanged ...

// 4) build the live-occupancy snapshot
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID, ObjectName1, CardNumber,
      PersonnelType, Direction, Door, Dateonly, Swipe_Time
    } = evt;

    const dedupKey = PersonGUID || EmployeeID;
    const floor    = mapDoorToFloor(Door, Direction);

    // remove on out at unmapped door
    if (Direction === 'OutDirection' && floor === 'Unknown Floor') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time, EmployeeID,
        ObjectName1, CardNumber, PersonnelType, floor
      };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }

  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (pt === 'Employee' || pt === 'Terminated Personnel') employeeCount++;
    else contractorCount++;
  }

  const floorMap = {};
  Object.values(current).forEach(rec => {
    floorMap[rec.floor] = floorMap[rec.floor] || [];
    floorMap[rec.floor].push(rec);
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));

  return {
    asOf:               new Date().toISOString(),
    currentCount:       employeeCount + contractorCount,
    floorBreakdown,
    personnelSummary:   { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employeeCount },
      { personnelType: 'Contractor', count: contractorCount }
    ]
  };
}

// 5) SSE endpoint
exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = await buildOccupancy(events);
    payload.totalVisitedToday = await fetchTotalVisitedToday();
    payload.visitedToday      = await fetchVisitedTodayBreakdown();
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};











Now let fix We still get Unkoown Floor in API Responce

// Auto-generated from data/doorDenver.xlsx
module.exports = {
  "US.CO.HQ. 12. SOUTH LOBBY DOORS-IN___IN": "Floor 12",
  "US.CO.HQ. 12. SOUTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 12. IDF RESTRICTED DOOR___IN": "Floor 12",
  "US.CO.HQ. 12. IDF RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 12. STORAGE ROOM_11:01:0A___IN": "Floor 12",
  "US.CO.HQ. 12. STORAGE ROOM_11:01:0A___OUT": "Out of office",
  "US.CO.HQ. 12. NORTH STAIRWELL-IN___IN": "Floor 12",
  "US.CO.HQ. 12. NORTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 12. FREIGHT ELEVATOR LOBBY-IN___IN": "Floor 12",
  "US.CO.HQ. 12. FREIGHT ELEVATOR LOBBY-IN___OUT": "Out of office",
  "US.CO.HQ. 12. MOTHERS ROOM_11:01:CC___IN": "Floor 12",
  "US.CO.HQ. 12. MOTHERS ROOM_11:01:CC___OUT": "Out of office",
  "US.CO.HQ. 12. SOUTH STAIRWELL-IN___IN": "Floor 12",
  "US.CO.HQ. 12. SOUTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 11. IDF ROOM_11:01:42 RESTRICTED DOOR___IN": "Floor 11",
  "US.CO.HQ. 11. IDF ROOM_11:01:42 RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 11. STORAGE ROOM_11:01:DD___IN": "Floor 11",
  "US.CO.HQ. 11. STORAGE ROOM_11:01:DD___OUT": "Out of office",
  "US.CO.HQ. 11. NORTH STAIRWELL-IN___IN": "Floor 11",
  "US.CO.HQ. 11. NORTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 11. FREIGHT ELEVATOR LOBBY-IN___IN": "Floor 11",
  "US.CO.HQ. 11. FREIGHT ELEVATOR LOBBY-IN___OUT": "Out of office",
  "US.CO.HQ. 11. QUIET ROOM_11:01:0E___IN": "Floor 11",
  "US.CO.HQ. 11. QUIET ROOM_11:01:0E___OUT": "Out of office",
  "US.CO.HQ. 11. SOUTH STAIRWELL-IN___IN": "Floor 11",
  "US.CO.HQ. 11. SOUTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 09. IDF ROOM_11:00:98 RESTRICTED DOOR___IN": "Floor 09",
  "US.CO.HQ. 09. IDF ROOM_11:00:98 RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 09. STORAGE ROOM_11:01:05___IN": "Floor 09",
  "US.CO.HQ. 09. STORAGE ROOM_11:01:05___OUT": "Out of office",
  "US.CO.HQ. 09. SOUTH STAIRWELL-IN___IN": "Floor 09",
  "US.CO.HQ. 09. SOUTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 09. FREIGHT ELEVATOR LOBBY-IN___IN": "Floor 09",
  "US.CO.HQ. 09. FREIGHT ELEVATOR LOBBY-IN___OUT": "Out of office",
  "US.CO.HQ. 09. WELLNESS ROOM_11:01:E1___IN": "Floor 09",
  "US.CO.HQ. 09. WELLNESS ROOM_11:01:E1___OUT": "Out of office",
  "US.CO.HQ. 09. NORTH STAIRWELL-IN___IN": "Floor 09",
  "US.CO.HQ. 09. NORTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 12. NORTH LOBBY DOORS-IN___IN": "Floor 12",
  "US.CO.HQ. 12. NORTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 11. NORTH LOBBY DOORS-IN___IN": "Floor 11",
  "US.CO.HQ. 11. NORTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 11. SOUTH LOBBY DOORS-IN___IN": "Floor 11",
  "US.CO.HQ. 11. SOUTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 09. NORTH LOBBY DOORS-IN___IN": "Floor 09",
  "US.CO.HQ. 09. NORTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 09. SOUTH LOBBY DOORS-IN___IN": "Floor 09",
  "US.CO.HQ. 09. SOUTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 13. FREIGHT ELEVATOR LOBBY-IN___IN": "Floor 13",
  "US.CO.HQ. 13. FREIGHT ELEVATOR LOBBY-IN___OUT": "Out of office",
  "US.CO.HQ. 13. SOUTH LOBBY DOORS-IN___IN": "Floor 13",
  "US.CO.HQ. 13. SOUTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 13. NORTH STAIRWELL-IN___IN": "Floor 13",
  "US.CO.HQ. 13. NORTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 13. IDF ROOM_11:01:8C RESTRICTED DOOR___IN": "Floor 13",
  "US.CO.HQ. 13. IDF ROOM_11:01:8C RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 13. NORTH LOBBY DOORS-IN___IN": "Floor 13",
  "US.CO.HQ. 13. NORTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 13. STORAGE ROOM_11:01:75___IN": "Floor 13",
  "US.CO.HQ. 13. STORAGE ROOM_11:01:75___OUT": "Out of office",
  "US.CO.HQ. 13. MOTHERS ROOM_11:01:A3___IN": "Floor 13",
  "US.CO.HQ. 13. MOTHERS ROOM_11:01:A3___OUT": "Out of office",
  "US.CO.HQ. 13. SOUTH STAIRWELL-IN___IN": "Floor 13",
  "US.CO.HQ. 13. SOUTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ.06. MAIL ROOM_11:00:17___IN": "Floor 06",
  "US.CO.HQ.06. MAIL ROOM_11:00:17___OUT": "Out of office",
  "US.CO.HQ. 06. NORTH ENTRY-IN___IN": "Floor 06",
  "US.CO.HQ. 06. NORTH ENTRY-IN___OUT": "Out of office",
  "US.CO.HQ. 06. SECURITY CONTROL ROOM_11:01:22 RESTRICTED DOOR___IN": "Floor 06",
  "US.CO.HQ. 06. SECURITY CONTROL ROOM_11:01:22 RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 06. EUC LAB STORAGE_11:01:CA___IN": "Floor 06",
  "US.CO.HQ. 06. EUC LAB STORAGE_11:01:CA___OUT": "Out of office",
  "US.CO.HQ. 06. IT WORK LAB_11:01:99___IN": "Floor 06",
  "US.CO.HQ. 06. IT WORK LAB_11:01:99___OUT": "Out of office",
  "US.CO.HQ. 06. E-WASTE STORAGE_11:01:96___IN": "Floor 06",
  "US.CO.HQ. 06. E-WASTE STORAGE_11:01:96___OUT": "Out of office",
  "US.CO.HQ. 06. EUC LAB DOOR_11:01:D4___IN": "Floor 06",
  "US.CO.HQ. 06. EUC LAB DOOR_11:01:D4___OUT": "Out of office",
  "US.CO.HQ. 06. EAST STAIRWELL-IN___IN": "Floor 06",
  "US.CO.HQ. 06. EAST STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 06. MDF ROOM_11:00:D5 RESTRICTED DOOR___IN": "Floor 06",
  "US.CO.HQ. 06. MDF ROOM_11:00:D5 RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 06. FITNESS CENTER EAST_11:01:02___IN": "Floor 06",
  "US.CO.HQ. 06. FITNESS CENTER EAST_11:01:02___OUT": "Out of office",
  "US.CO.HQ. 06. SOUTH CENTER HALL ENTRY-IN___IN": "Floor 06",
  "US.CO.HQ. 06. SOUTH CENTER HALL ENTRY-IN___OUT": "Out of office",
  "US.CO.HQ. 06. FITNESS CENTER WEST_11:01:B9___IN": "Floor 06",
  "US.CO.HQ. 06. FITNESS CENTER WEST_11:01:B9___OUT": "Out of office",
  "US.CO.HQ. 06. SOUTH ENTRANCE-IN___IN": "Floor 06",
  "US.CO.HQ. 06. SOUTH ENTRANCE-IN___OUT": "Out of office",
  "US.CO.HQ. 15. NORTH LOBBY DOORS-IN___IN": "Floor 15",
  "US.CO.HQ. 15. NORTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 15. EXECUTIVE ENTRANCE_10:03:9F___IN": "Floor 15",
  "US.CO.HQ. 15. EXECUTIVE ENTRANCE_10:03:9F___OUT": "Out of office",
  "US.CO.HQ. 15. EXEC ADMINS ENTRANCE_10:04:4F___IN": "Floor 15",
  "US.CO.HQ. 15. EXEC ADMINS ENTRANCE_10:04:4F___OUT": "Out of office",
  "US.CO.HQ. 15. WEST STORAGE_10:06:6F___IN": "Floor 15",
  "US.CO.HQ. 15. WEST STORAGE_10:06:6F___OUT": "Out of office",
  "US.CO.HQ. 14. NORTH LOBBY DOORS-IN___IN": "Floor 14",
  "US.CO.HQ. 14. NORTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 14. SOUTH LOBBY DOORS-IN___IN": "Floor 14",
  "US.CO.HQ. 14. SOUTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 14. NORTH STAIRWELL-IN___IN": "Floor 14",
  "US.CO.HQ. 14. NORTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 14. STORAGE ROOM___IN": "Floor 14",
  "US.CO.HQ. 14. STORAGE ROOM___OUT": "Out of office",
  "US.CO.HQ. 14. IDF ROOM_11:01:0F RESTRICTED DOOR___IN": "Floor 14",
  "US.CO.HQ. 14. IDF ROOM_11:01:0F RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 14. FREIGHT ELEVATOR LOBBY-IN___IN": "Floor 14",
  "US.CO.HQ. 14. FREIGHT ELEVATOR LOBBY-IN___OUT": "Out of office",
  "US.CO.HQ. 14 AV SUPPORT_11:01:6E___IN": "Floor 14",
  "US.CO.HQ. 14 AV SUPPORT_11:01:6E___OUT": "Out of office",
  "US.CO.HQ. 14. WELLNESS ROOM_11:01:B0___IN": "Floor 14",
  "US.CO.HQ. 14. WELLNESS ROOM_11:01:B0___OUT": "Out of office",
  "US.CO.HQ. 14. SOUTH STAIRWELL-IN___IN": "Floor 14",
  "US.CO.HQ. 14. SOUTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 14. CATERING PANTRY NORTH DOOR_11:01:00___IN": "Floor 14",
  "US.CO.HQ. 14. CATERING PANTRY NORTH DOOR_11:01:00___OUT": "Out of office",
  "US.CO.HQ. 14. CATERING PANTRY SOUTH DOOR_11:01:19___IN": "Floor 14",
  "US.CO.HQ. 14. CATERING PANTRY SOUTH DOOR_11:01:19___OUT": "Out of office",
  "US.CO.HQ. 15. SOUTH STAIRWELL-IN___IN": "Floor 15",
  "US.CO.HQ. 15. SOUTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-IN___IN": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-IN___OUT": "Out of office",
  "US.CO.HQ. 15. IDF ROOM_11:01:97 RESTRICTED DOOR___IN": "Floor 15",
  "US.CO.HQ. 15. IDF ROOM_11:01:97 RESTRICTED DOOR___OUT": "Out of office",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-IN___IN": "Floor 15",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-IN___OUT": "Out of office",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-IN___IN": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-IN___OUT": "Out of office",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-IN___IN": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-IN___OUT": "Out of office",
  "US.CO.HQ. 15. NORTH STAIRWELL-IN___IN": "Floor 15",
  "US.CO.HQ. 15. NORTH STAIRWELL-IN___OUT": "Out of office",
  "US.CO.HQ. 15. WELLNESS ROOM_11:00:24___IN": "Floor 15",
  "US.CO.HQ. 15. WELLNESS ROOM_11:00:24___OUT": "Out of office",
  "US.CO.HQ. 15. AV SUPPORT ROOM_11:01:56___IN": "Floor 15",
  "US.CO.HQ. 15. AV SUPPORT ROOM_11:01:56___OUT": "Out of office",
  "US.CO.HQ. 15. CATERING KITCHEN_11:01:AE___IN": "Floor 15",
  "US.CO.HQ. 15. CATERING KITCHEN_11:01:AE___OUT": "Out of office",
  "US.CO.HQ. 15.TRAINING STORAGE ROOM_11:01:90___IN": "Floor 15",
  "US.CO.HQ. 15.TRAINING STORAGE ROOM_11:01:90___OUT": "Out of office",
  "US.CO.HQ. 01. FOCUS AREA NORTH-IN___IN": "Floor 01",
  "US.CO.HQ. 01. FOCUS AREA NORTH-IN___OUT": "Out of office",
  "US.CO.HQ. 01. FOCUS AREA WEST-IN___IN": "Floor 01",
  "US.CO.HQ. 01. FOCUS AREA WEST-IN___OUT": "Out of office",
  "US.CO.HQ. 01. RETAIL NORTH_10:03:1A___IN": "Floor 01",
  "US.CO.HQ. 01. RETAIL NORTH_10:03:1A___OUT": "Out of office",
  "US.CO.HQ. 06. MORSE STUDIO___IN": "Floor 06",
  "US.CO.HQ. 06. MORSE STUDIO___OUT": "Out of office",
  "US.CO.HQ. 15. 15TH FLOOR NORTH STORAGE 15.430___IN": "Floor 15",
  "US.CO.HQ. 15. 15TH FLOOR NORTH STORAGE 15.430___OUT": "Out of office",
  "US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTHWEST ENTRANCE 15.312A___IN": "Floor 15",
  "US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTHWEST ENTRANCE 15.312A___OUT": "Out of office",
  "US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTH ENTRANCE 15.312B___IN": "Floor 15",
  "US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTH ENTRANCE 15.312B___OUT": "Out of office",
  "US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTHEAST ENTRANCE 15.313___IN": "Floor 15",
  "US.CO.HQ. 15. 15TH FLOOR EXECUTIVE SOUTHEAST ENTRANCE 15.313___OUT": "Out of office",
  "US.CO.HQ. 15. 15TH FLOOR SIBLEY CONFERENCE ROOM SOUTHWEST ENTRANCE 15.201A___IN": "Floor 15",
  "US.CO.HQ. 15. 15TH FLOOR SIBLEY CONFERENCE ROOM SOUTHWEST ENTRANCE 15.201A___OUT": "Out of office",
  "US.CO.HQ. 15. 15TH FLOOR SIBLEY CONFERENCE ROOM SOUTHEAST ENTRANCE 15.201B___IN": "Floor 15",
  "US.CO.HQ. 15. 15TH FLOOR SIBLEY CONFERENCE ROOM SOUTHEAST ENTRANCE 15.201B___OUT": "Out of office",
  "US.CO.HQ. 06. NORTH ENTRY-OUT___IN": "Floor 06",
  "US.CO.HQ. 06. NORTH ENTRY-OUT___OUT": "Out of office",
  "US.CO.HQ. 06. EAST STAIRWELL-OUT___IN": "Floor 06",
  "US.CO.HQ. 06. EAST STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 06. SOUTH CENTER HALL ENTRY-OUT___IN": "Floor 06",
  "US.CO.HQ. 06. SOUTH CENTER HALL ENTRY-OUT___OUT": "Out of office",
  "US.CO.HQ. 06. SOUTH ENTRANCE-OUT___IN": "Floor 06",
  "US.CO.HQ. 06. SOUTH ENTRANCE-OUT___OUT": "Out of office",
  "US.CO.HQ. 01. FOCUS AREA NORTH-OUT___IN": "Floor 01",
  "US.CO.HQ. 01. FOCUS AREA NORTH-OUT___OUT": "Floor 01",
  "US.CO.HQ. 01. FOCUS AREA WEST-OUT___IN": "Floor 01",
  "US.CO.HQ. 01. FOCUS AREA WEST-OUT___OUT": "Floor 01",
  "US.CO.HQ. 09. FREIGHT ELEVATOR LOBBY-OUT___IN": "Floor 09",
  "US.CO.HQ. 09. FREIGHT ELEVATOR LOBBY-OUT___OUT": "Out of office",
  "US.CO.HQ. 09. NORTH LOBBY DOORS-OUT___IN": "Floor 09",
  "US.CO.HQ. 09. NORTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 09. NORTH STAIRWELL-OUT___IN": "Floor 09",
  "US.CO.HQ. 09. NORTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 09. SOUTH LOBBY DOORS-OUT___IN": "Floor 09",
  "US.CO.HQ. 09. SOUTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 09. SOUTH STAIRWELL-OUT___IN": "Floor 09",
  "US.CO.HQ. 09. SOUTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 11. FREIGHT ELEVATOR LOBBY-OUT___IN": "Floor 11",
  "US.CO.HQ. 11. FREIGHT ELEVATOR LOBBY-OUT___OUT": "Out of office",
  "US.CO.HQ. 11. NORTH LOBBY DOORS-OUT___IN": "Floor 11",
  "US.CO.HQ. 11. NORTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 11. NORTH STAIRWELL-OUT___IN": "Floor 11",
  "US.CO.HQ. 11. NORTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 11. SOUTH LOBBY DOORS-OUT___IN": "Floor 11",
  "US.CO.HQ. 11. SOUTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 11. SOUTH STAIRWELL-OUT___IN": "Floor 11",
  "US.CO.HQ. 11. SOUTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 12. FREIGHT ELEVATOR LOBBY-OUT___IN": "Floor 12",
  "US.CO.HQ. 12. FREIGHT ELEVATOR LOBBY-OUT___OUT": "Out of office",
  "US.CO.HQ. 12. NORTH LOBBY DOORS-OUT___IN": "Floor 12",
  "US.CO.HQ. 12. NORTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 12. NORTH STAIRWELL-OUT___IN": "Floor 12",
  "US.CO.HQ. 12. NORTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 12. SOUTH LOBBY DOORS-OUT___IN": "Floor 12",
  "US.CO.HQ. 12. SOUTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 12. SOUTH STAIRWELL-OUT___IN": "Floor 12",
  "US.CO.HQ. 12. SOUTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 13. FREIGHT ELEVATOR LOBBY-OUT___IN": "Floor 13",
  "US.CO.HQ. 13. FREIGHT ELEVATOR LOBBY-OUT___OUT": "Out of office",
  "US.CO.HQ. 13. NORTH LOBBY DOORS-OUT___IN": "Floor 13",
  "US.CO.HQ. 13. NORTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 13. NORTH STAIRWELL-OUT___IN": "Floor 13",
  "US.CO.HQ. 13. NORTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 13. SOUTH LOBBY DOORS-OUT___IN": "Floor 13",
  "US.CO.HQ. 13. SOUTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 13. SOUTH STAIRWELL-OUT___IN": "Floor 13",
  "US.CO.HQ. 13. SOUTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 14. FREIGHT ELEVATOR LOBBY-OUT___IN": "Floor 14",
  "US.CO.HQ. 14. FREIGHT ELEVATOR LOBBY-OUT___OUT": "Out of office",
  "US.CO.HQ. 14. NORTH LOBBY DOORS-OUT___IN": "Floor 14",
  "US.CO.HQ. 14. NORTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 14. NORTH STAIRWELL-OUT___IN": "Floor 14",
  "US.CO.HQ. 14. NORTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 14. SOUTH LOBBY DOORS-OUT___IN": "Floor 14",
  "US.CO.HQ. 14. SOUTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 14. SOUTH STAIRWELL-OUT___IN": "Floor 14",
  "US.CO.HQ. 14. SOUTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-OUT___IN": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-OUT___OUT": "Out of office",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-OUT___IN": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-OUT___OUT": "Out of office",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-OUT___IN": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-OUT___OUT": "Out of office",
  "US.CO.HQ. 15. NORTH LOBBY DOORS-OUT___IN": "Floor 15",
  "US.CO.HQ. 15. NORTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 15. NORTH STAIRWELL-OUT___IN": "Floor 15",
  "US.CO.HQ. 15. NORTH STAIRWELL-OUT___OUT": "Out of office",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-OUT___IN": "Floor 15",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-OUT___OUT": "Out of office",
  "US.CO.HQ. 15. SOUTH STAIRWELL-OUT___IN": "Floor 15",
  "US.CO.HQ. 15. SOUTH STAIRWELL-OUT___OUT": "Out of office"
};





// controllers/denverLiveOccupancyController.js

const { denver } = require('../config/siteConfig');
const sql         = require('mssql');

// helper: map door + direction to floor, fallback to 'Unknown Floor'
function mapDoorToFloor(doorName, direction) {
  const key = `${doorName}___${direction}`;
  return denver.zoneFloorMap[key] || 'Unknown Floor';
}

// 1) fetch all new swipe events since `since`
async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    
WITH CombinedQuery AS (
  SELECT 
    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t1.ObjectName1,
    CASE 
      WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
      ELSE CAST(t2.Int1 AS NVARCHAR)
    END AS EmployeeID,
    t1.ObjectIdentity1,
    t3.Name AS PersonnelType,
    COALESCE(
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
      TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
      SCard.[value]
    ) AS CardNumber,
    t5_admit.value AS AdmitCode,
    t5_dir.value   AS Direction,
    CASE
      WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
      ELSE 'Other'
    END AS LogicalLocation,
    t1.ObjectName2 AS Door
  FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
  LEFT JOIN [ACVSCore].[Access].[Personnel]      t2 ON t1.ObjectIdentity1 = t2.GUID
  LEFT JOIN [ACVSCore].[Access].[PersonnelType]  t3 ON t2.PersonnelTypeId = t3.ObjectID
  LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
    ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
  LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
    ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
  LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
    ON t1.XmlGUID = t_xml.GUID
  LEFT JOIN (
    SELECT GUID, [value]
    FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
    WHERE [Name] IN ('Card','CHUID')
  ) AS SCard
    ON t1.XmlGUID = SCard.GUID
  WHERE
    t1.MessageType = 'CardAdmitted'
    AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
)
SELECT
  LocaleMessageTime,
  CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
  CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
  EmployeeID,
  ObjectIdentity1,
  ObjectName1,
  PersonnelType,
  CardNumber,
  AdmitCode,
  Direction,
  Door
FROM CombinedQuery
WHERE LogicalLocation = 'Denver'
ORDER BY LocaleMessageTime ASC;
`);


  return recordset;
}

// 2) total distinct visited today
async function fetchTotalVisitedToday() {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  const todayStart = new Date();
  todayStart.setHours(0,0,0,0);
  req.input('start', sql.DateTime2, todayStart);

  const { recordset } = await req.query(`
    WITH DailyVisits AS (
      SELECT DISTINCT t1.ObjectIdentity1
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
    )
    SELECT COUNT(*) AS totalVisitedToday FROM DailyVisits;
  `);

  return recordset[0]?.totalVisitedToday || 0;
}

// 3) visited-today breakdown (Employee vs Contractor)
async function fetchVisitedTodayBreakdown() {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  const todayStart = new Date();
  todayStart.setHours(0,0,0,0);
  req.input('start', sql.DateTime2, todayStart);

  const { recordset } = await req.query(`
    WITH Combined AS (
      SELECT
        t1.ObjectIdentity1,
        CASE WHEN pt.Name IN ('Contractor','Terminated Contractor') THEN 'Contractor'
             ELSE 'Employee' END AS bucket,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS dt
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     p  ON t1.ObjectIdentity1 = p.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType pt ON p.PersonnelTypeId = pt.ObjectID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
    ),
    Ranked AS (
      SELECT *, ROW_NUMBER() OVER (PARTITION BY ObjectIdentity1 ORDER BY dt DESC) AS rn
      FROM Combined
    )
    SELECT bucket, COUNT(*) AS cnt
    FROM Ranked
    WHERE rn = 1
    GROUP BY bucket;
  `);

  const breakdown = { employees: 0, contractors: 0 };
  for (const { bucket, cnt } of recordset) {
    if (bucket === 'Employee')   breakdown.employees   = cnt;
    if (bucket === 'Contractor') breakdown.contractors = cnt;
  }
  breakdown.total = breakdown.employees + breakdown.contractors;
  return breakdown;
}

// 4) build the live-occupancy snapshot
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, ObjectName1, CardNumber,
      PersonnelType, Direction, Door,
      Dateonly, Swipe_Time
    } = evt;

    // dedupe key
    const dedupKey = `${evt.PersonGUID || EmployeeID}`; 
    // map to floor
    const floor    = mapDoorToFloor(Door, Direction);

    // handle outs at unmapped doors
    if (Direction === 'OutDirection' && floor === 'Unknown Floor') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly,
        Swipe_Time,
        EmployeeID,
        ObjectName1,
        CardNumber,
        PersonnelType,
        floor
      };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }

  // count employees vs contractors
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (pt === 'Employee' || pt === 'Terminated Personnel') employeeCount++;
    else contractorCount++;
  }

  // floor breakdown with occupant details
  const floorMap = {};
  for (const [key, rec] of Object.entries(current)) {
    const f = rec.floor;
    floorMap[f] = floorMap[f] || [];
    floorMap[f].push(rec);
  }
  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total: occupants.length,
    occupants
  }));

  return {
    asOf:               new Date().toISOString(),
    currentCount:       employeeCount + contractorCount,
    floorBreakdown,
    personnelSummary:   { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employeeCount },
      { personnelType: 'Contractor', count: contractorCount }
    ]
  };
}

// 5) SSE endpoint
exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  async function push() {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = await buildOccupancy(events);
    payload.totalVisitedToday = await fetchTotalVisitedToday();
    payload.visitedToday      = await fetchVisitedTodayBreakdown();
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  }

  // initial send + repeat every second
  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};



