// controllers/liveOccupancyController.js
const { DateTime }   = require('luxon');
const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

let _loggedUnknownDoor = new Set();

function mapDoorToZone(doorName, direction) {
  const key = `${doorName}___${direction}`;
  if (doorZoneMap[key]) return doorZoneMap[key];
  if (doorName.startsWith('APAC_IN_PUN')) {
    if (!_loggedUnknownDoor.has(doorName)) {
      console.warn(`Unmapped door encountered: "${doorName}"`);
      _loggedUnknownDoor.add(doorName);
    }
    return 'Unknown Zone';
  }
  return 'Unknown Zone';
}

async function fetchNewEvents(since) {
  await poolConnect;
  const req = pool.request();
  req.input('since', sql.DateTime2, since);
  const result = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1*t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
          THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          SCard.value
        ) AS CardNumber,
        t5_admit.value AS AdmitCode,
        t5_dir.value   AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) AS SCard ON t1.XmlGUID = SCard.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1*t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType, CardNumber,
      AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);
  return result.recordset;
}

function buildVisitedToday(allEvents) {
  // local “today” in Kolkata
  const todayStr = DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
  const latestByPerson = new Map();

  allEvents.forEach(evt => {
    if (evt.Direction !== 'InDirection' || !evt.LocaleMessageTime) return;
    const evtDate = DateTime.fromJSDate(evt.LocaleMessageTime, { zone:'Asia/Kolkata' })
                      .toFormat('yyyy-LL-dd');
    if (evtDate !== todayStr) return;

    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber || evt.ObjectName1;
    const prev = latestByPerson.get(key);
    if (!prev || evt.LocaleMessageTime > prev.LocaleMessageTime) {
      latestByPerson.set(key, evt);
    }
  });

  const arr = Array.from(latestByPerson.values());
  const employees   = arr.filter(e => ![
    'Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management'
  ].includes(e.PersonnelType)).length;
  const contractors = arr.length - employees;
  return { employees, contractors, total: arr.length };
}

async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  allEvents.forEach(evt => {
    const key  = evt.PersonGUID || evt.EmployeeID || evt.CardNumber || evt.ObjectName1;
    const zone = mapDoorToZone(evt.Door, evt.Direction);

    if (evt.Direction === 'InDirection') {
      uniquePeople.set(key, evt.PersonnelType);
      current[key] = { ...evt, zone };
    } else {
      uniquePeople.delete(key);
      delete current[key];
    }
  });

  let employeeCount = 0, contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  const zoneMap = {};
  Object.values(current).forEach(e => {
    zoneMap[e.zone] = zoneMap[e.zone] || [];
    zoneMap[e.zone].push(e);
  });

  const summary       = [];
  const zoneBreakdown = [];
  const floorAgg      = {};

  Object.entries(zoneMap).forEach(([z, emps]) => {
    summary.push({ zone: z, count: emps.length });
    const byType = emps.reduce((acc,e)=> {
      acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
      return acc;
    }, {});
    zoneBreakdown.push({ zone: z, ...byType, total: emps.length });

    const floor = zoneFloorMap[z] || 'Unknown Floor';
    floorAgg[floor] = floorAgg[floor] || { total:0, byPersonnelType:{} };
    floorAgg[floor].total += emps.length;
    Object.entries(byType).forEach(([pt,c]) => {
      floorAgg[floor].byPersonnelType[pt] = (floorAgg[floor].byPersonnelType[pt]||0) + c;
    });
  });

  const floorBreakdown = Object.entries(floorAgg)
    .map(([floor, d]) => ({ floor, ...d.byPersonnelType, total: d.total }));

  const personnelBreakdown = [];
  if (employeeCount)   personnelBreakdown.push({ personnelType:'Employee',   count:employeeCount });
  if (contractorCount) personnelBreakdown.push({ personnelType:'Contractor', count:contractorCount });

  return {
    asOf:             DateTime.now().toISO(),
    summary,
    zoneBreakdown,
    floorBreakdown,
    details:          zoneMap,
    personnelSummary: { employees:employeeCount, contractors:contractorCount },
    personnelBreakdown
  };
}

exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;
    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');

    let lastSeen = new Date(Date.now() - 24*3600*1000);
    const events = [];

    const push = async () => {
      const fresh = await fetchNewEvents(lastSeen);
      if (fresh.length) {
        lastSeen = fresh[fresh.length-1].LocaleMessageTime;
        events.push(...fresh);
      }

      const payload    = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      // override with accurate "today" counts
      payload.totalVisitedToday = todayStats.total;
      payload.visitedToday      = todayStats;

      res.write(`data: ${JSON.stringify(payload)}\n\n`);
    };

    await push();
    const timer = setInterval(push, 1000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) res.status(500).json({ error: 'Internal Server Error' });
  }
};

















this is query for   fetchVisitedTodayBreakdown When i run this query in mssql We 36 Contractor and 2 Employee.But Ui not Display this count UI Display 
138 count Wich is not acceptable .
Kindly make changes use specific timeZone and give me Updated js filr carefully

WITH CombinedEmployeeData AS (
      SELECT
        CASE
          WHEN pt.Name IN ('Contractor','Terminated Contractor') THEN p.Text12
          WHEN pt.Name IN ('Temp Badge','Visitor','Property Management') THEN p.Text9
          ELSE CAST(p.Int1 AS NVARCHAR)
        END AS EmployeeID,
        pt.Name AS PersonnelType,
        log.ObjectIdentity1 AS PersonGUID,
        DATEADD(MINUTE, -1 * log.MessageLocaleOffset, log.MessageUTC) AS LocaleMessageTime
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] log
      INNER JOIN [ACVSCore].[Access].[Personnel]     p  ON log.ObjectIdentity1 = p.GUID
      INNER JOIN [ACVSCore].[Access].[PersonnelType] pt ON p.PersonnelTypeID = pt.ObjectID
      WHERE
        log.MessageType = 'CardAdmitted'
        AND log.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * log.MessageLocaleOffset, log.MessageUTC) >= '2025-05-24'
    ),
    Ranked AS (
      SELECT *,
        ROW_NUMBER() OVER (
          PARTITION BY PersonGUID
          ORDER BY LocaleMessageTime DESC
        ) AS rn
      FROM CombinedEmployeeData
      WHERE PersonGUID IS NOT NULL
    )
    SELECT
      CASE
        WHEN PersonnelType IN (
          'Contractor','Terminated Contractor',
          'None','Property Management',
          'Temp Badge','Visitor'
        ) THEN 'Contractor'
        ELSE 'Employee'
      END AS bucket,
      COUNT(*) AS cnt
    FROM Ranked
    WHERE rn = 1
    GROUP BY
      CASE
        WHEN PersonnelType IN (
          'Contractor','Terminated Contractor',
          'None','Property Management',
          'Temp Badge','Visitor'
        ) THEN 'Contractor'
        ELSE 'Employee'
      END;
  
