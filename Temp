Read Each file carefully and find the root cause and solve the issue carefully , and give me updated file carefully ,dont make unneccessary changes

// src/components/ERTOverview.jsx
import React from 'react';
import {
  Card,
  Row,
  Col,
  ListGroup,
  Badge
} from 'react-bootstrap';
import {
  FaEnvelopeOpenText,
  FaMobileAlt,
  FaMapMarkerAlt,
  FaHome
} from 'react-icons/fa';

/** Base location per role **/
const baseLocationByRole = {
  "Site Head":                  "Podium Floor – Red Zone",
  "HR":                          "Podium Floor – Red Zone",
  "Incident Controller":        "Podium Floor – Green Zone",
  "First Aid Team":             "Podium Floor – Green Zone",
  "ERT Team Leader":            "Podium Floor – Green Zone",
  "BCM Team / Site Operations": "Podium Floor – Red Zone"
};

/** Header border color per role **/
const headerColorByRole = {
  "Incident Controller":        "#009E60",
  "First Aid Team":             "#FFD100",
  "ERT Team Leader":            "#FFB800",
  "BCM Team / Site Operations": "#A80000",
  "Site Head":                  "#58595B",
  "HR":                          "#FF6F61"
};

// rotating name colors (expandable)
const NAME_COLORS = ['#FFD100'];

export default function ERTOverview({ ertStatus }) {
  return (
    <div className="mt-0">
      <Row className="g-2 mt-1">
        {Object.entries(ertStatus).map(([role, members]) => {
          const accent = headerColorByRole[role] || '#FFD100';
          const baseLoc = baseLocationByRole[role] || 'N/A';

          // present members first
          const sorted = [...members].sort((a, b) =>
            (a.present === b.present) ? 0 : a.present ? -1 : 1
          );

          return (
            <Col key={role} md={6} lg={4}>
              <Card className="h-100 shadow-sm">
                <Card.Header
                  className="bg-dark text-white"
                  style={{
                    borderTop:    `4px solid ${accent}`,
                    borderLeft:   `6px solid ${accent}`,
                    borderRadius: '0 0.25rem 0 0'
                  }}
                >
                  {role}
                </Card.Header>
                <ListGroup variant="flush">
                  {sorted.map((m, idx) => {
                    const nameColor = NAME_COLORS[idx % NAME_COLORS.length];
                    return (
                      <ListGroup.Item key={m.name} className="py-2 bg-dark text-white">
                        {/* Name + Availability */}
                        <div className="d-flex justify-content-between align-items-start">
                          <div>
                            <strong style={{ color: nameColor }}>{m.name}</strong>
                            <Badge
                              bg={m.present ? 'success' : 'danger'}
                              className="ms-2"
                              pill
                            >
                              {m.present ? 'Available' : 'Away'}
                            </Badge>
                          </div>
                        </div>

                        {/* Contact row */}
                        <div className="mt-2">
                          <div className="small d-flex align-items-center mb-1">
                            <FaEnvelopeOpenText className="me-2" style={{ color: '#FFD100' }} />
                            <a
                              href={`mailto:${m.email}`}
                              style={{ color: '#fff', textDecoration: 'underline' }}
                            >
                              {m.email}
                            </a>
                          </div>
                          <div className="small d-flex align-items-center">
                            <FaMobileAlt className="me-2" style={{ color: '#FF6F61' }} />
                            <a
                              href={`tel:${m.phone}`}
                              style={{ color: '#fff', textDecoration: 'underline' }}
                            >
                              {m.phone}
                            </a>
                          </div>
                        </div>

                        {/* Locations */}
                        <div className="mt-3 d-flex flex-wrap gap-3 small">
                          <div className="d-flex align-items-center">
                            <FaHome className="me-2" style={{ color: '#A80000' }} />
                            <span style={{ color: '#A80000' }}>
                              Base: {baseLoc}
                            </span>
                          </div>
                          {m.present && (
                            <div className="d-flex align-items-center">
                              <FaMapMarkerAlt className="me-2" style={{ color: '#009E60' }} />
                              <span style={{ color: '#009E60' }}>
                                Live: {m.zone || 'N/A'}
                              </span>
                            </div>
                          )}
                        </div>
                      </ListGroup.Item>
                    );
                  })}
                </ListGroup>
              </Card>
            </Col>
          );
        })}
      </Row>
    </div>
  );
}






// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// A palette of 12 “WU-friendly” gradient pairs (dark → light)
const FLOOR_COLOR_PALETTE = [
  ['#FFD100', '#FFF2CC'],  // Yellow → Pale Yellow
  ['#009E60', '#CFFAF3'],  // Green → Mint
  ['#A80000', '#FFCCCC'],  // Red → Pale Red
  ['#58595B', '#D6E3F0'],  // Dark Gray → Lavender Gray
  ['#FF6F61', '#FFD1CD'],  // Coral → Blush
  ['#FFB800', '#FFF8CC'],  // Accent Yellow → Pale Accent
  ['#006400', '#CCFFCC'],  // Dark Green → Pale Green
  ['#4B0082', '#E0CCFF'],  // Indigo → Lavender
  ['#C75D00', '#FFE0B2'],  // Orange → Peach
  ['#264653', '#A0B5D8'],  // Deep Teal → Light Blue
  ['#9B2226', '#FFB3B3'],  // Burgundy → Pale Pink
  ['#005F73', '#CAEBF2']   // Deep Cyan → Pale Cyan
];

export default function FloorOccupancyChart({ data = [] }) {
  // If there’s no data, show a fallback card
  if (!data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // 1) Sort floors by “total” descending
  const sortedData = [...data].sort((a, b) => b.total - a.total);

  // 2) Custom tooltip: shows floor name + total + breakdown by type
  const renderTooltip = ({ active, payload, label }) => {
    if (!active || !payload?.length) return null;
    const floorObj = payload[0].payload;
    const totalCount = floorObj.total;

    // Gather all keys except "floor" and "total" (e.g. “employees”, “contractors”, etc.)
    const breakdownEntries = Object.entries(floorObj).filter(
      ([key]) => key !== 'floor' && key !== 'total'
    );

    return (
      <div
        style={{
          backgroundColor: 'var(--wu-gray-dark)',
          color: '#fff',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '0.75rem',
          minWidth: 180
        }}
      >
        <div style={{ marginBottom: 4 }}>
          <strong style={{ fontSize: 14 }}>Floor: {label}</strong>
        </div>
        <div style={{ marginBottom: 6, fontWeight: 'bold' }}>
          Total: {totalCount}
        </div>
        {breakdownEntries.map(([type, value]) => (
          <div
            key={type}
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              marginTop: 2,
              color: '#fff'
            }}
          >
            <span style={{ opacity: 0.8 }}>
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </span>
            <span style={{ fontWeight: 'bold' }}>{value}</span>
          </div>
        ))}
      </div>
    );
  };

  return (
    <Card
      className="mb-4 shadow-sm border"
      style={{ borderColor: 'var(--wu-yellow)' }}
    >
      <Card.Header className="bg-dark text-warning text-center">
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 600, padding: 0, backgroundColor: 'var(--wu-gray-dark)' }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={sortedData}
            margin={{ top: 20, right: 24, left: 0, bottom: 24 }}
            barCategoryGap="05.%"   /* fewer gaps, to let bars expand */
          >
            {/* 3) Define one linearGradient per floor (up to 12) */}
            <defs>
              {sortedData.map((_, idx) => {
                const [darkColor, lightColor] =
                  FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length];
                return (
                  <linearGradient
                    id={`floor-grad-${idx}`}
                    key={`floor-grad-${idx}`}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={darkColor} stopOpacity={1} />
                    <stop offset="100%" stopColor={lightColor} stopOpacity={1} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* 4) Grid + Axes styling */}
            <CartesianGrid stroke="#555" strokeDasharray="3 3" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#fff' }}
              angle={0}               /* horizontal labels */
              textAnchor="middle"
              interval={0}
              height={40}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#fff' }}
              allowDecimals={false}
            />

            {/* 5) Custom Tooltip */}
            <Tooltip content={renderTooltip} />

            {/* 6) No Legend (only one series => not needed) */}

            {/* 7) Single “total” bar per floor, with curved top and no fixed width */}
            <Bar
              dataKey="total"
              name="Total Occupancy"
              radius={[20, 20, 0, 0]}  /* more curvature on top corners */
            >
              {sortedData.map((_, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={`url(#floor-grad-${idx})`}
                  stroke={FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length][0]}
                  strokeWidth={1}
                />
              ))}
              {/* 7a) Show a label of “total” above each bar */}
              <LabelList
                dataKey="total"
                position="top"
                style={{
                  fill: '#fff',
                  fontSize: 14,
                  fontWeight: 'bold'
                }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}






// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

// 7 attractive colors (Western Union + complementary accents)
const COLORS = [
  '#FFD100', // WU Yellow
  '#009E60', // WU Green
  '#88B04B', // Olive
  '#FF6F61', // Coral
  '#58595B', // WU Gray
  '#FFB800', // Accent Yellow
  '#6B5B95'  // Indigo
];

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value } = payload[0];
  return (
    <div style={{
      backgroundColor: '#1a1a1a',
      color: '#fff',
      border: '1px solid #444',
      padding: '0.5rem',
      borderRadius: 4
    }}>
      <div><strong>{name}</strong></div>
      <div>Count: {value}</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white">No personnel data</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#444' }}>
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{
          borderBottom: '1px solid var(--wu-yellow)',  // <-- yellow underline
        }}
      >
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body
        style={{
          height: 600,           // match other charts
          padding: '1rem',
          backgroundColor: '#1a1a1a'
        }}
      >
        <ResponsiveContainer>
          <PieChart>
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={70}
              outerRadius={240}
              paddingAngle={2}
              labelLine={false}
              label={({ percent, name }) => (
                <tspan style={{ fill: '#fff', fontSize: 12 }}>
                  {`${name}: ${(percent * 100).toFixed(0)}%`}
                </tspan>
              )}
              stroke="#fff"
              strokeWidth={2}
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.personnelType}
                  fill={COLORS[idx % COLORS.length]}
                />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fill: '#fff', fontSize: '1.8rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              wrapperStyle={{ paddingTop: 10 }}
              formatter={(value) => (
                <span style={{ color: '#FFD100', fontWeight: 'bold' }}>
                  {value}
                </span>
              )}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}



// src/components/PersonnelTypeBreakdownTable.jsx
import React from 'react';
import { Table, Badge } from 'react-bootstrap';

export default function PersonnelTypeBreakdownTable({ data = [] }) {
  if (!data.length) return <p>No data available for personnel types.</p>;

  const colors = ['warning','dark','secondary','info'];

  return (
    <Table striped bordered hover responsive className="mb-4">
      <thead>
        <tr>
          <th>Personnel Type</th>
          <th>Count</th>
        </tr>
      </thead>
      <tbody>
        {data.map((entry,i) => (
          <tr key={entry.type}>
            <td>
              <Badge bg={colors[i%colors.length]}>{entry.type}</Badge>
            </td>
            <td>{entry.count}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}







// src/components/SummaryCards.jsx

import React from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { FaUsers, FaUserTie, FaHardHat } from 'react-icons/fa';

export default function SummaryCards({
  totalVisitedToday,
  employeesVisitedToday,
  contractorsVisitedToday,
  totalOccupancy,
  employeeCount,
  contractorCount
}) {
  // keep your existing border/accent colors here:
  const BORDER_COLORS = [
    '#FFC72C',
    '#FFD666',
    '#FFE599',
    '#FFF2CC',
    '#FFD666',
    '#FFE599'
  ];

  // a richer palette for the icons
  const ICON_COLORS = [
    '#E57373', // soft red
    '#81C784', // mint green
    '#64B5F6', // sky blue
    '#BA68C8', // orchid purple
    '#FFB74D', // amber
    '#4DB6AC'  // teal
  ];

  const cards = [
    { title: 'Todays Total Headcount',     value: totalVisitedToday,    icon: <FaUsers /> },
    { title: 'Todays Employees Count',      value: employeesVisitedToday,icon: <FaUserTie /> },
    { title: 'Todays Contractors Count',    value: contractorsVisitedToday, icon: <FaHardHat /> },
    { title: 'Realtime Headcount',     value: totalOccupancy,       icon: <FaUsers /> },
    { title: 'Realtime Employees Count',     value: employeeCount,        icon: <FaUserTie /> },
    { title: 'Realtime Contractors Count',   value: contractorCount,      icon: <FaHardHat /> },
  ];

  return (
    <Row className="mb-1">
      {cards.map((c, i) => (
        <Col key={i} sm={2} md={2} lg={2} className="mb-4">
          <Card
            className="shadow-sm"
            style={{
              background: '#2f2f2f',
              border: `2px solid ${BORDER_COLORS[i % BORDER_COLORS.length]}`,
              borderRadius: '8px'
            }}
          >
            <Card.Body className="text-center">
              <div
                style={{
                  color: ICON_COLORS[i % ICON_COLORS.length],
                  fontSize: '1.5rem'
                }}
                className="mb-2"
              >
                {c.icon}
              </div>
              <Card.Title style={{ color: '#fff' }}>{c.title}</Card.Title>
              <Card.Text
                style={{
                  fontSize: '1.6rem',
                  fontWeight: 'bold',
                  color: '#fff'
                }}
              >
                {c.value}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      ))}
    </Row>
  );
}






// src/components/SummaryChart.jsx

import React, { useMemo } from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';
import { FaLightbulb } from 'react-icons/fa'; // bulb icon

// Gradients for known zones (fallback to DEFAULT_GRADIENT if missing)
const ZONE_GRADIENTS = {
  'Red Zone':       ['#FF0000'],
  'Yellow Zone':    [' #FFDE21'],

  'Orange Zone':    ['#ffa500'],
  'Green Zone':     ['#006400'],
  'Reception Area': ['#4B0082', '#E0CCFF'],
  'Tower B':        ['#bfd6ff', '#002f6c']
};

// Solid‐color fallbacks (if a zone isn’t in ZONE_GRADIENTS)
const SOLID_COLORS = [
  '#FFD100', '#009E60', '#FF6F61',
  '#58595B', '#FFB800', '#C75D00'
];

const DEFAULT_GRADIENT = ['#3B4CCA', '#D0D8FF'];

// Keyframes for bulb blinking
const bulbBlinkStyle = `
@keyframes bulbBlink {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.3; }
}
`;

export default function SummaryChart({ summary = [] }) {
  // 1) Build pieData where each slice has value=1 (equal width), but carry actual count.
  const pieData = useMemo(
    () =>
      summary.map((z) => ({
        name:  z.zone,
        value: 1,       // equal slice widths
        count: z.count  // actual numeric count
      })),
    [summary]
  );

  // 2) Build a zoneLegendItems array BEFORE any early return
  const zoneLegendItems = useMemo(() => {
    return pieData.map((entry, idx) => {
      const colors = ZONE_GRADIENTS[entry.name] || [SOLID_COLORS[idx % SOLID_COLORS.length], null];
      // Use the darker/second color for the dot if gradient exists, else the solid
      const dotColor = colors[1] || colors[0];
      return {
        name: entry.name,
        color: dotColor
      };
    });
  }, [pieData]);

  // 3) Early return if there is no data
  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  // 4) Custom tooltip to display the actual count on hover
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload || !payload.length) return null;
    const { name, count } = payload[0].payload;
    return (
      <div
        style={{
          backgroundColor: '#fff',
          border: '1px solid #ccc',
          borderRadius: 4,
          padding: '8px',
          color: '#000'
        }}
      >
        <div><strong>Zone:</strong> {name}</div>
        <div style={{ marginTop: 4 }}><strong>Count:</strong> {count}</div>
      </div>
    );
  };

  // 5) Helper: get fill & stroke for a given zone
  const getColorsForZone = (zoneName, idx) => {
    const grad = ZONE_GRADIENTS[zoneName];
    if (grad) {
      return {
        fill: `url(#grad-${zoneName.replace(/\s+/g, '-')})`,
        stroke: grad[1]
      };
    } else {
      const solid = SOLID_COLORS[idx % SOLID_COLORS.length];
      return { fill: solid, stroke: solid };
    }
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Western Union-Pune Zone Occupancy
      </Card.Header>

      <Card.Body style={{ height: 600, padding: 0 }}>
        {/* Inject keyframes for bulb blink */}
        <style>{bulbBlinkStyle}</style>

        <div
          style={{
            position: 'relative',
            height: '100%',
            backgroundColor: 'var(--wu-gray-dark)',
            border: '1px solid var(--wu-yellow)',
            borderRadius: 4,
            display: 'flex',
            overflow: 'hidden'
          }}
        >
          {/* —— Left: Vertical Legend of Zones —— */}
          <div
            style={{
              width: 140,
              padding: '1rem 0.5rem',
              display: 'flex',
              flexDirection: 'column',
              gap: 10
            }}
          >
            {zoneLegendItems.map((item) => (
              <div key={item.name} style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                <span
                  style={{
                    display: 'inline-block',
                    width: 12,
                    height: 12,
                    borderRadius: '50%',
                    backgroundColor: item.color
                  }}
                />
                <span style={{ color: '#fff', fontSize: '0.9rem' }}>{item.name}</span>
              </div>
            ))}
          </div>

          {/* —— Right: Semi‐donut Chart —— */}
          <div style={{ flex: 1, position: 'relative' }}>
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                {/* Gradient definitions for each slice */}
                <defs>
                  {pieData.map((entry) => {
                    const key = entry.name.replace(/\s+/g, '-');
                    const gradientColors = ZONE_GRADIENTS[entry.name] || DEFAULT_GRADIENT;
                    return (
                      <linearGradient
                        id={`grad-${key}`}
                        key={key}
                        x1="0"
                        y1="0"
                        x2="0"
                        y2="1"
                      >
                        <stop offset="0%" stopColor={gradientColors[0]} stopOpacity={1} />
                        <stop offset="100%" stopColor={gradientColors[1]} stopOpacity={1} />
                      </linearGradient>
                    );
                  })}
                </defs>

                {/* Semi‐donut spanning 360°→0° (bottom half only) */}
                <Pie
                  data={pieData}
                  dataKey="value"
                  nameKey="name"
                  startAngle={360}
                  endAngle={0}
                  innerRadius={80}
                  outerRadius={240}
                  paddingAngle={3}
                  labelLine={false}
                  isAnimationActive={false}
                >
                  <LabelList
                    dataKey="count"
                    position="inside"
                    fill="#fff"
                    style={{ fontSize: '1rem', fontWeight: 'bold' }}
                  />
                  {pieData.map((entry, idx) => {
                    const { fill, stroke } = getColorsForZone(entry.name, idx);
                    return (
                      <Cell
                        key={`slice-${idx}`}
                        fill={fill}
                        stroke={stroke}
                        strokeWidth={1}
                      />
                    );
                  })}
                </Pie>

                <Tooltip content={renderTooltip} />
              </PieChart>
            </ResponsiveContainer>

            {/* Blinking bulb, shifted slightly upward */}
            <FaLightbulb
              style={{
                position: 'absolute',
                top: '50%',   // shifted up from 50%
                left: '50%',
                transform: 'translate(-50%, -50%)',
                fontSize: '3rem',
                color: '#FFD100',
                animation: 'bulbBlink 5.5s infinite'
              }}
            />

            {/* “Western Union Pune” text below the bulb */}
            {/* <div
              style={{
                position: 'absolute',
                top: 'calc(45% + 50px)',
                left: '50%',
                transform: 'translateX(-50%)',
                color: '#FFD100',
                fontSize: '1rem',
                fontWeight: 'bold'
              }}
            >
              Western Union Pune
            </div> */}
          </div>
        </div>
      </Card.Body>
    </Card>
  );
}





// src/components/ZoneBreakdownTable.jsx
import React from 'react';
import { Table, Badge } from 'react-bootstrap';

export default function ZoneBreakdownTable({ data = [] }) {
  if (!data.length) return <p>No zone breakdown data available.</p>;

  const types = Array.from(new Set(data.flatMap(z => Object.keys(z).filter(k => k!=='zone'&&k!=='total'))));
  const colors = ['primary','success','warning','info'];

  return (
    <Table striped bordered hover responsive className="mb-4">
      <thead>
        <tr>
          <th>Zone</th>
          {types.map((t,i) => <th key={t}><Badge bg={colors[i%colors.length]}>{t}</Badge></th>)}
          <th>Total</th>
        </tr>
      </thead>
      <tbody>
        {data.map((z,i) => (
          <tr key={i}>
            <td>{z.zone}</td>
            {types.map(t => <td key={t}>{z[t]||0}</td>)}
            <td>{z.total}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}





import React from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {} }) {
  const entries = Object.entries(data);
  if (!entries.length) return <p>No zone detail data available.</p>;

  return (
    <div className="zone-cards">
      {entries.map(([zone, emps]) => (
        <div key={zone} className="zone-card">
          <div className="zone-header">
            <h3>{zone}</h3>
            <span className="zone-badge">Total: {emps.length}</span>
          </div>

          <table className="zone-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Swipe Time</th>
                <th>Type</th>
                <th>Door Name</th>
              </tr>
            </thead>
            <tbody>
              {emps.map((emp, i) => (
                <tr key={`${emp.EmployeeID}-${i}`}>
                  <td>{emp.ObjectName1}</td>
                  <td>{emp.Swipe_Time}</td> 
                  <td>{emp.PersonnelType}</td>
                  <td>{emp.door}</td>
                </tr>
              ))}
            </tbody>
          </table>
    
        </div>
      ))}
    </div>
  );
}
