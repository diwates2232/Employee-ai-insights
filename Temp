import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

// 15 dark→light gradient pairs
const FLOOR_GRADIENTS = [
  ['#002f6c', '#bfd6ff'],
  ['#3b4cca', '#d0d8ff'],
  ['#006d5b', '#cffaf3'],
  ['#4e5d6c', '#d6e3f0'],
  ['#4b0082', '#e0ccff'],
  ['#264653', '#a0b5d8'],
  ['#9b2226', '#ffb3b3'],
  ['#005f73', '#caebf2'],
  ['#7f6000', '#fff2cc'],
  ['#6a1b9a', '#e5ccf2'],
  ['#8b0000', '#ffcccc'],
  ['#006400', '#ccffcc'],
  ['#8b4513', '#ffe5cc'],
  ['#2f4f4f', '#d9d9d9'],
  ['#483d8b', '#e6e6fa']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor detail data available.</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.total - a.total);

  // Custom label renderer: same color as bar's dark shade
  const renderLabel = ({ x, y, width, value, index }) => {
    const [dark] = FLOOR_GRADIENTS[index % FLOOR_GRADIENTS.length];
    return (
      <text
        x={x + width / 2}
        y={y - 6}
        fill={dark}
        textAnchor="middle"
        fontSize={12}
        fontWeight="bold"
      >
        {value}
      </text>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#fff'
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={sortedData}
              margin={{ top: 30, right: 30, left: 10, bottom: 40 }}
              barCategoryGap="10%"
            >
              {/* Gradient definitions */}
              <defs>
                {sortedData.map((_, idx) => {
                  const [dark, light] = FLOOR_GRADIENTS[idx % FLOOR_GRADIENTS.length];
                  return (
                    <linearGradient
                      id={`floorGrad-${idx}`}
                      key={idx}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={dark} stopOpacity={1}/>
                      <stop offset="100%" stopColor={light} stopOpacity={1}/>
                    </linearGradient>
                  );
                })}
              </defs>

              <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis
                dataKey="floor"
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Floor', position: 'bottom', offset: 20 }}
              />
              <YAxis
                allowDecimals={false}
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 10 }}
              />

              <Tooltip
                wrapperStyle={{
                  backgroundColor: '#fff',
                  border: '1px solid #ccc',
                  borderRadius: '4px'
                }}
              />

              <Bar
                dataKey="total"
                name="Occupancy"
                radius={[6, 6, 0, 0]}
                label={renderLabel}
              >
                {sortedData.map((_, idx) => (
                  <Cell
                    key={idx}
                    fill={`url(#floorGrad-${idx})`}
                    stroke="#fff"
                    strokeWidth={1}
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}








import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#FFD100', '#000000', '#58595B', '#FFB800'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, entry) => sum + entry.count, 0);
  if (!data.length || total === 0) {
    return <Card body>No personnel data available</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border rounded" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header
        className="fw-bold text-center"
        style={{ background: '#000', color: '#FFD100' }}
      >
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#fff'
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={sortedData}
                dataKey="count"
                nameKey="personnelType"
                cx="50%"
                cy="50%"
                innerRadius={70}
                outerRadius={110}
                paddingAngle={4}
                labelLine={false}
                label={({ name, percent }) =>
                  `${name}: ${(percent * 100).toFixed(0)}%`
                }
                stroke="#fff"
                strokeWidth={1}
              >
                {sortedData.map((entry, idx) => (
                  <Cell key={entry.personnelType} fill={COLORS[idx % COLORS.length]} />
                ))}
                <Label
                  value={total}
                  position="center"
                  style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
                />
              </Pie>
              <Tooltip
                wrapperStyle={{
                  backgroundColor: '#fff',
                  border: '1px solid #ccc',
                  borderRadius: '4px'
                }}
              />
              <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}


















Read both chart carefully and add bordered for both chart carefullly and give me updared js file carefully

// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

// 15 dark→light gradient pairs
const FLOOR_GRADIENTS = [
  ['#002f6c', '#bfd6ff'],
  ['#3b4cca', '#d0d8ff'],
  ['#006d5b', '#cffaf3'],
  ['#4e5d6c', '#d6e3f0'],
  ['#4b0082', '#e0ccff'],
  ['#264653', '#a0b5d8'],
  ['#9b2226', '#ffb3b3'],
  ['#005f73', '#caebf2'],
  ['#7f6000', '#fff2cc'],
  ['#6a1b9a', '#e5ccf2'],
  ['#8b0000', '#ffcccc'],
  ['#006400', '#ccffcc'],
  ['#8b4513', '#ffe5cc'],
  ['#2f4f4f', '#d9d9d9'],
  ['#483d8b', '#e6e6fa']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor detail data available.</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.total - a.total);

  // Custom label renderer: same color as bar's dark shade
  const renderLabel = ({ x, y, width, value, index }) => {
    const [dark] = FLOOR_GRADIENTS[index % FLOOR_GRADIENTS.length];
    return (
      <text
        x={x + width / 2}
        y={y - 6}
        fill={dark}
        textAnchor="middle"
        fontSize={12}
        fontWeight="bold"
      >
        {value}
      </text>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#fff'
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={sortedData}
              margin={{ top: 30, right: 30, left: 10, bottom: 40 }}
              barCategoryGap="10%"   
            >
              {/* Gradient definitions */}
              <defs>
                {sortedData.map((_, idx) => {
                  const [dark, light] = FLOOR_GRADIENTS[idx % FLOOR_GRADIENTS.length];
                  return (
                    <linearGradient
                      id={`floorGrad-${idx}`}
                      key={idx}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={dark} stopOpacity={1}/>
                      <stop offset="100%" stopColor={light} stopOpacity={1}/>
                    </linearGradient>
                  );
                })}
              </defs>

              <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis
                dataKey="floor"
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Floor', position: 'bottom', offset: 20 }}
              />
              <YAxis
                allowDecimals={false}
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 10 }}
              />

              <Tooltip
                wrapperStyle={{ backgroundColor: '#fff', border: '1px solid #ccc', borderRadius: '4px' }}
              />

{/* 
              <Legend
                verticalAlign="bottom"
                wrapperStyle={{ paddingTop: 1 }}
                formatter={(value) => (
                  <span style={{ color: '#FFD100', fontWeight: 'bold' }}>
                    {value}
                  </span>
                )}
              />
 */}
              <Bar
                dataKey="total"
                name="Occupancy"
                radius={[6, 6, 0, 0]}
                label={renderLabel}  // custom labels
              >
                {sortedData.map((_, idx) => (
                  <Cell
                    key={idx}
                    fill={`url(#floorGrad-${idx})`}
                    stroke="#fff"
                    strokeWidth={1}
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}





C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#FFD100', '#000000', '#58595B', '#FFB800'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, entry) => sum + entry.count, 0);
  if (!data.length || total === 0) {
    return <Card body>No personnel data available</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border rounded" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="fw-bold text-center" style={{ background: '#000', color: '#FFD100' }}>
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={sortedData}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={70}
              outerRadius={110}
              paddingAngle={4}
              labelLine={false}
              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
              stroke="#fff"
              strokeWidth={1}
            >
              {sortedData.map((entry, idx) => (
                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={(value) => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}
