import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// Western Unionâ€“inspired floor colors
const FLOOR_COLORS = [
  '#FFD100', '#000000', '#58595B', '#FFB800',
  '#C0C0C0', '#333333', '#F2C744', '#A6A6A6'
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor data available</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.total - a.total);

  return (
    <Card className="mb-4 shadow-sm border rounded" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="fw-bold text-center" style={{ background: '#000', color: '#FFD100' }}>
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={sortedData}
            margin={{ top: 20, right: 20, left: 10, bottom: 40 }}
            barCategoryGap="5%"   // tighten gap
          >
            <CartesianGrid strokeDasharray="4 4" stroke="#d0d0d0" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#333' }}
              label={{ value: 'Floor', position: 'bottom', offset: 20 }}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#333' }}
              allowDecimals={false}
              label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 0 }}
            />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
            <Bar dataKey="total" name="Occupancy" radius={[6, 6, 0, 0]} barSize={50}>
              {sortedData.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={FLOOR_COLORS[idx % FLOOR_COLORS.length]}
                  stroke="#fff"
                  strokeWidth={1}
                />
              ))}
              <LabelList
                dataKey="total"
                position="top"
                style={{ fill: '#000', fontSize: 12, fontWeight: 'bold' }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}












import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// Western Union-inspired floor colors
const FLOOR_COLORS = [
  '#FFD100', '#000000', '#58595B', '#FFB800',
  '#C0C0C0', '#333333', '#F2C744', '#A6A6A6'
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor data available</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.total - a.total);

  return (
    <Card className="mb-4 shadow-sm border rounded" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="fw-bold text-center" style={{ background: '#000', color: '#FFD100' }}>
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={sortedData}
            margin={{ top: 20, right: 20, left: 10, bottom: 40 }}
            barCategoryGap="15%"
          >
            <CartesianGrid strokeDasharray="4 4" stroke="#d0d0d0" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#333' }}
              label={{ value: 'Floor', position: 'bottom', offset: 20 }}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#333' }}
              allowDecimals={false}
              label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 0 }}
            />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
            <Bar dataKey="total" name="Occupancy" radius={[6, 6, 0, 0]} barSize={30}>
              {sortedData.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={FLOOR_COLORS[idx % FLOOR_COLORS.length]}
                  stroke="#fff"
                  strokeWidth={1}
                />
              ))}
              <LabelList
                dataKey="total"
                position="top"
                style={{ fill: '#000', fontSize: 12, fontWeight: 'bold' }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}









import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#FFD100', '#000000', '#58595B', '#FFB800'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, entry) => sum + entry.count, 0);
  if (!data.length || total === 0) {
    return <Card body>No personnel data available</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border rounded" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="fw-bold text-center" style={{ background: '#000', color: '#FFD100' }}>
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={sortedData}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={70}
              outerRadius={110}
              paddingAngle={4}
              labelLine={false}
              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
              stroke="#fff"
              strokeWidth={1}
            >
              {sortedData.map((entry, idx) => (
                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={(value) => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}














read both file carefully and make same heights abd width of both charts .match height and width as per 
Floor-wise Occupancy chart and just make same Highlights Charts name in both make this changes and give me updated js file carefully

C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\FloorOccupancyChart.jsx


import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// Western Union-inspired floor colors
const FLOOR_COLORS = [
  '#FFD100', // WU Yellow
  '#000000', // Black
  '#58595B', // Gray
  '#FFB800', // Accent Yellow
  '#C0C0C0', // Light Gray
  '#333333', // Dark Gray
  '#F2C744', // WU warm highlight
  '#A6A6A6', // neutral
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor data available</Card>;
  }

  // Sort by count descending
  const sortedData = [...data].sort((a, b) => b.total - a.total);

  return (
    <Card className="mb-4">
      <Card.Header>Floor-wise Occupancy</Card.Header>
      <Card.Body style={{ height: 400 }}>
        
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={sortedData}
            margin={{ top: 30, right: 30, left: 10, bottom: 40 }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#333' }}
              label={{ value: 'Floor', position: 'bottom', offset: 20 }}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#333' }}
              allowDecimals={false}
              label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 10 }}
            />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
            <Bar dataKey="total" name="Occupancy" radius={[6, 6, 0, 0]}>
              {
                sortedData.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={FLOOR_COLORS[idx % FLOOR_COLORS.length]} />
                ))
              }
              <LabelList dataKey="total" position="top" style={{ fill: '#000', fontSize: 12 }} />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}




C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\PersonnelDonutChart.jsx




import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#FFD100', '#000000', '#58595B', '#FFB800'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, entry) => sum + entry.count, 0);
  if (!data.length || total === 0) return <Card body>No personnel data available</Card>;

  const sortedData = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border rounded" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="fw-bold">Personnel Type Occupancy</Card.Header>
      <Card.Body style={{ height: 360 }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={sortedData}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={100}
              paddingAngle={4}
              labelLine={false}
              label={({ name, percent }) =>
                `${name}: ${(percent * 100).toFixed(0)}%`
              }
              stroke="#fff"
              strokeWidth={1}
            >
              {sortedData.map((entry, idx) => (
                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={(value) => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}
