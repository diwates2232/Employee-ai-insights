// controllers/liveOccupancyController.js

const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap = require('../data/doorZoneMap');

/**
 * Map a raw Door string to its Zone via your lookup table,
 * falling back to substring match or “Unknown Zone.”
 */
function mapDoorToZone(door) {
  if (doorZoneMap[door]) {
    return doorZoneMap[door];
  }
  // fallback: find a key contained in the door string
  for (const key of Object.keys(doorZoneMap)) {
    if (door.includes(key)) {
      return doorZoneMap[key];
    }
  }
  return 'Unknown Zone';
}

exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;
    const request = pool.request();

    // 1) Fetch Admit events with In/Out directions in the last 24h
    const result = await request.query(`
      WITH CombinedQuery AS(
        SELECT 
          DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
          t1.ObjectName1,
          t1.PartitionName2 As location,
          t5_card.CardNumber,
          t5_admit.value AS AdmitCode,
          t5_dir.value AS Direction,
          t1.ObjectName2,
          t5_rej.value AS Rejection_Type,
          CASE 
            WHEN t3.Name IN ('Contractor', 'Terminated Contractor') THEN t2.Text12
            ELSE CAST(t2.Int1 AS NVARCHAR)
          END AS "EmployeeID",
          t3.Name AS PersonnelType,
          t1.MessageType,
          t1.XmlGUID
        FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLog] AS t1
        LEFT JOIN [ACVSCore].[Access].[Personnel]    AS t2 ON t1.ObjectIdentity1 = t2.GUID
        LEFT JOIN [ACVSCore].[Access].[PersonnelType]AS t3 ON t2.[PersonnelTypeId]  = t3.[ObjectID]
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
          ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
          ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxml] AS t_xml
          ON t1.XmlGUID = t_xml.GUID
        LEFT JOIN (
          SELECT GUID, [value]
          FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred]
          WHERE [Name] IN ('Card','CHUID')
        ) AS SCard ON t1.XmlGUID = SCard.GUID
        OUTER APPLY (
          SELECT COALESCE(
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
            SCard.[value]
          ) AS CardNumber
        ) AS t5_card
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_Rej
          ON t1.XmlGUID = t5_Rej.GUID AND t5_Rej.Name = 'RejectCode'
        WHERE 
          t1.MessageType IN ('CardAdmitted','CardRejected') AND
          t1.PartitionName2 = 'APAC.Default' AND
          CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) >= '2025-01-01'
      )
      SELECT
        CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
        CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door
      FROM CombinedQuery
      WHERE 
        LocaleMessageTime >= DATEADD(HOUR, -24, GETDATE()) AND
        AdmitCode = 'Admit' AND
        Direction IN ('InDirection','OutDirection')
      ORDER BY LocaleMessageTime ASC;
    `);

    const events = result.recordset;

    // 2) Track current in‐zone employees
    const current = {};
    for (const evt of events) {
      const {
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        Dateonly,
        Swipe_Time,
        Direction,
        Door
      } = evt;

      const zone = mapDoorToZone(Door);

      if (Direction === 'InDirection') {
        current[EmployeeID] = {
          Dateonly,
          Swipe_Time,
          EmployeeID,
          ObjectName1,
          CardNumber,
          PersonnelType,
          zone
        };
      } else {
        delete current[EmployeeID];
      }
    }

    // 3) Group by zone
    const zoneMap = {};
    Object.values(current).forEach(emp => {
      zoneMap[emp.zone] = zoneMap[emp.zone] || [];
      zoneMap[emp.zone].push(emp);
    });

    // 4) Summary counts
    const summary = Object.entries(zoneMap).map(([zone, emps]) => ({
      zone,
      count: emps.length
    }));

    res.json({
      asOf: new Date().toISOString(),
      summary,
      details: zoneMap
    });
  } catch (err) {
    console.error('Live occupancy error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};





// routes/liveOccupancyRoutes.js

const express = require('express');
const router  = express.Router();
const { getLiveOccupancy } = require('../controllers/liveOccupancyController');

router.get('/live-occupancy', getLiveOccupancy);

module.exports = router;









This is my Current file then Give me Updated .js file carefully dont make another changes


// controllers/liveOccupancyController.js

const { poolConnect, pool, sql } = require('../config/db');

/**
 * TODO: replace this stub with your actual door→zone mapping.
 * For now it just splits the door string and picks the 4th segment.
 */

function mapDoorToZone(door) {
  const parts = door.split('_');
  return parts[3] || 'Unknown';
}

exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;
    const request = pool.request();

    // 1) Fetch Admit events with In/Out directions in the last 24h
    const result = await request.query(`
        WITH CombinedQuery AS(
		SELECT 
	    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t1.ObjectName1,
	t1.PartitionName2 As location,
	t5_card.CardNumber,
t5_admit.value AS AdmitCode,
t5_dir.value AS Direction,
    t1.ObjectName2,
	t5_rej.value AS Rejection_Type,
	CASE 
        WHEN t3.Name IN ('Contractor', 'Terminated Contractor') THEN t2.Text12
        ELSE CAST(t2.Int1 AS NVARCHAR)
    END AS "EmployeeID",
    t3.Name AS PersonnelType,
    t1.MessageType,t1.XmlGUID
	FROM
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLog] AS t1
LEFT JOIN
    [ACVSCore].[Access].[Personnel] AS t2
    ON t1.ObjectIdentity1 = t2.GUID
LEFT JOIN
    [ACVSCore].[Access].[PersonnelType] AS t3
    ON t2.[PersonnelTypeId] = t3.[ObjectID]
LEFT JOIN
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
    ON t1.XmlGUID = t5_admit.GUID
    AND t5_admit.Name = 'AdmitCode'
LEFT JOIN
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
    ON t1.XmlGUID = t5_dir.GUID
    AND t5_dir.Value IN ('InDirection', 'OutDirection')
    LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
    -- Pre-pull shredded “Card” row
    LEFT JOIN (
    SELECT GUID, [value]
    FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred]
    WHERE [Name] IN ('Card', 'CHUID')
    ) AS SCard
    ON t1.XmlGUID = SCard.GUID
    /* NEW: three-stage CardNumber resolution */
    OUTER APPLY (
    SELECT COALESCE(
        -- 1) <LogMessage><CHUID><Card>…</Card></CHUID>
        TRY_CAST(t_xml.XmlMessage AS XML)
        .value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
        -- 2) <LogMessage><CHUID>…</CHUID> (no nested <Card>)
        TRY_CAST(t_xml.XmlMessage AS XML)
        .value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
        -- 3) shredded fallback
        SCard.[value]
    ) AS CardNumber
    ) AS t5_card
 
LEFT JOIN
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_Rej
    ON t1.XmlGUID = t5_Rej.GUID
    AND t5_Rej.Name = 'RejectCode'
 
   
   --include both admits and rejects
   WHERE t1.MessageType IN ('CardAdmitted', 'CardRejected')
   AND t1.PartitionName2 = 'APAC.Default'
   AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) >= '2025-01-01')
    SELECT
        CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
        CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
        EmployeeID,
        ObjectName1,       -- employee name
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door
      FROM CombinedQuery
      WHERE 
        LocaleMessageTime >= DATEADD(HOUR, -24, GETDATE())
        AND AdmitCode = 'Admit'
        AND Direction IN ('InDirection','OutDirection')
      ORDER BY LocaleMessageTime ASC;
    `);

    const events = result.recordset;

    // 2) Track current in‐zone employees
    //    employeeID → { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, zone }
    const current = {};

    for (const evt of events) {
      const {
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        Dateonly,
        Swipe_Time,
        Direction,
        Door
      } = evt;

      const zone = mapDoorToZone(Door);

      if (Direction === 'InDirection') {
        // enter or move zone
        current[EmployeeID] = {
          Dateonly,
          Swipe_Time,
          EmployeeID,
          ObjectName1,
          CardNumber,
          PersonnelType,
          zone
        };
      } else {
        // OutDirection: remove from zone if present
        delete current[EmployeeID];
      }
    }

    // 3) Group by zone for summary & details
    const zoneMap = {};
    Object.values(current).forEach(emp => {
      const z = emp.zone;
      zoneMap[z] = zoneMap[z] || [];
      zoneMap[z].push(emp);
    });

    const summary = Object.entries(zoneMap).map(([zone, emps]) => ({
      zone,
      count: emps.length
    }));

    res.json({
      asOf: new Date().toISOString(),
      summary,
      details: zoneMap
    });
  } catch (err) {
    console.error('Live occupancy error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};







// routes/liveOccupancyRoutes.js
const express = require('express');
const router  = express.Router();
const { getLiveOccupancy } = require('../controllers/liveOccupancyController');
router.get('/live-occupancy', getLiveOccupancy);
module.exports = router;
