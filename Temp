lets read both file carefully and give me updated js file carefully

// Auto-generated from data/doorDenver.xlsx

module.exports = {
  "US.CO.HQ. 12. SOUTH LOBBY DOORS-IN___Floor 12": "Floor 12",


  "US.CO.HQ. 15. SOUTH STAIRWELL-IN___None": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-IN___Floor 15": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-IN___None": "Floor 15",
  "US.CO.HQ. 15. IDF ROOM_11:01:97 RESTRICTED DOOR___Floor 15": "Floor 15",
  "US.CO.HQ. 15. IDF ROOM_11:01:97 RESTRICTED DOOR___None": "Floor 15",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-IN___Floor 15": "Floor 15",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-IN___None": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-IN___Floor 15": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-IN___None": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-IN___Floor 15": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-IN___None": "Floor 15",
  "US.CO.HQ. 15. NORTH STAIRWELL-IN___Floor 15": "Floor 15",
  "US.CO.HQ. 15. NORTH STAIRWELL-IN___None": "Floor 15",
  "US.CO.HQ. 15. WELLNESS ROOM_11:00:24___Floor 15": "Floor 15",
  "US.CO.HQ. 15. WELLNESS ROOM_11:00:24___None": "Floor 15",
  "US.CO.HQ. 15. AV SUPPORT ROOM_11:01:56___Floor 15": "Floor 15",
  "US.CO.HQ. 15. AV SUPPORT ROOM_11:01:56___None": "Floor 15",
  "US.CO.HQ. 15. CATERING KITCHEN_11:01:AE___Floor 15": "Floor 15",
  "US.CO.HQ. 15. CATERING KITCHEN_11:01:AE___None": "Floor 15",
  "US.CO.HQ. 15.TRAINING STORAGE ROOM_11:01:90___Floor 15": "Floor 15",
  "US.CO.HQ. 15.TRAINING STORAGE ROOM_11:01:90___None": "Floor 15",
  "US.CO.HQ. 01. FOCUS AREA NORTH-IN___Floor 01": "Floor 01",
  "US.CO.HQ. 14. SOUTH STAIRWELL-OUT___Out of office": "Floor 14",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-OUT___None": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY EAST DOOR-OUT___Out of office": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-OUT___None": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY LEFT-OUT___Out of office": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-OUT___None": "Floor 15",
  "US.CO.HQ. 15. FREIGHT ELEVATOR LOBBY RIGHT DOOR-OUT___Out of office": "Floor 15",
  "US.CO.HQ. 15. NORTH LOBBY DOORS-OUT___None": "Floor 15",
  "US.CO.HQ. 15. NORTH LOBBY DOORS-OUT___Out of office": "Floor 15",
  "US.CO.HQ. 15. NORTH STAIRWELL-OUT___None": "Floor 15",
  "US.CO.HQ. 15. NORTH STAIRWELL-OUT___Out of office": "Floor 15",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-OUT___None": "Floor 15",
  "US.CO.HQ. 15. SOUTH LOBBY DOORS-OUT___Out of office": "Floor 15",
  "US.CO.HQ. 15. SOUTH STAIRWELL-OUT___None": "Floor 15",
  "US.CO.HQ. 15. SOUTH STAIRWELL-OUT___Out of office": "Floor 15"
};





file 2


// controllers/denverLiveOccupancyController.js

const { denver } = require('../config/siteConfig');
const sql         = require('mssql');

// helper: map door + direction to floor, fallback to 'Unknown Floor'
function mapDoorToFloor(doorName, direction) {
  const key = `${doorName}___${direction}`;
  return denver.zoneFloorMap[key] || 'Unknown Floor';
}

// 1) fetch all new swipe events since `since`
async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        CASE 
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, [value] FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE [Name] IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'        -- Denver HQ doors
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// 2) total distinct visited today
async function fetchTotalVisitedToday() {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  const todayStart = new Date();
  todayStart.setHours(0,0,0,0);
  req.input('start', sql.DateTime2, todayStart);

  const { recordset } = await req.query(`
    WITH DailyVisits AS (
      SELECT DISTINCT t1.ObjectIdentity1
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
    )
    SELECT COUNT(*) AS totalVisitedToday FROM DailyVisits;
  `);

  return recordset[0]?.totalVisitedToday || 0;
}

// 3) visited-today breakdown
async function fetchVisitedTodayBreakdown() {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  const todayStart = new Date();
  todayStart.setHours(0,0,0,0);
  req.input('start', sql.DateTime2, todayStart);

  const { recordset } = await req.query(`
    WITH Combined AS (
      SELECT
        t1.ObjectIdentity1,
        CASE WHEN pt.Name IN ('Contractor','Terminated Contractor') THEN 'Contractor'
             ELSE 'Employee' END AS bucket,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS dt
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     p  ON t1.ObjectIdentity1 = p.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType pt ON p.PersonnelTypeId = pt.ObjectID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
    ),
    Ranked AS (
      SELECT *, ROW_NUMBER() OVER(PARTITION BY ObjectIdentity1 ORDER BY dt DESC) AS rn
      FROM Combined
    )
    SELECT bucket, COUNT(*) AS cnt
    FROM Ranked
    WHERE rn = 1
    GROUP BY bucket;
  `);

  const breakdown = { employees: 0, contractors: 0 };
  for (const { bucket, cnt } of recordset) {
    if (bucket === 'Employee')   breakdown.employees   = cnt;
    if (bucket === 'Contractor') breakdown.contractors = cnt;
  }
  breakdown.total = breakdown.employees + breakdown.contractors;
  return breakdown;
}

// 4) build the live-occupancy snapshot
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      PersonnelType, Direction, Door,
      Dateonly, Swipe_Time
    } = evt;

    const dedupKey = PersonGUID || EmployeeID;
    const floor    = mapDoorToFloor(Door, Direction);

    // explicit “OutDirection” at unmapped door removes them
    if (Direction === 'OutDirection' && floor === 'Unknown Floor') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, PersonnelType, floor };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }

  // live headcounts
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (pt === 'Employee' || pt === 'Terminated Personnel') employeeCount++;
    else contractorCount++;
  }

  // floor breakdown & details
  const floorMap = {};
  for (const [key, rec] of Object.entries(current)) {
    const f = rec.floor;
    floorMap[f] = floorMap[f] || [];
    floorMap[f].push({ ...rec, PersonGUID: key });
  }
  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total: occupants.length,
    occupants
  }));

  return {
    asOf:               new Date().toISOString(),
    currentCount:       employeeCount + contractorCount,
    floorBreakdown,
    personnelSummary:   { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employeeCount },
      { personnelType: 'Contractor', count: contractorCount }
    ]
  };
}

// 5) SSE endpoint
exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  async function push() {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = await buildOccupancy(events);
    payload.totalVisitedToday = await fetchTotalVisitedToday();
    payload.visitedToday      = await fetchVisitedTodayBreakdown();
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  }

  // initial send + repeat
  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};




