const { denver } = require('../config/siteConfig');
const sql = require('mssql');

async function getDenverLiveOccupancy(req, res) {
  try {
    const pool = await denver.pool.connect();

    const result = await pool.request().query(`
      WITH CombinedQuery AS (
        SELECT 
          DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
          t1.ObjectName1,
          -- permanent employees by Int1; contractors by Text12
          CASE 
            WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
            ELSE CAST(t2.Int1 AS NVARCHAR)
          END AS EmployeeID,
          t1.ObjectIdentity1,
          t3.Name AS PersonnelType,
          COALESCE(
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
            SCard.[value]
          ) AS CardNumber,
          t5_admit.value AS AdmitCode,
          t5_dir.value   AS Direction,
          CASE
            WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
            ELSE 'Other'
          END AS LogicalLocation,
          t1.ObjectName2 AS Door
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
        LEFT JOIN [ACVSCore].[Access].[Personnel] t2 ON t1.ObjectIdentity1 = t2.GUID
        LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
        LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
          ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
        LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
          ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
        LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
          ON t1.XmlGUID = t_xml.GUID
        LEFT JOIN (
          SELECT GUID, [value]
          FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
          WHERE [Name] IN ('Card','CHUID')
        ) AS SCard ON t1.XmlGUID = SCard.GUID
        WHERE
          t1.MessageType = 'CardAdmitted'
          AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= CAST(GETDATE() AS DATE)
      )
      SELECT
        LocaleMessageTime,
        CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
        CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS SwipeTime,
        EmployeeID,
        ObjectIdentity1,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        Door
      FROM CombinedQuery
      WHERE LogicalLocation = 'Denver'
      ORDER BY LocaleMessageTime ASC;
    `);

    const records = result.recordset;

    // Deduplicate by ObjectIdentity1 to find latest swipe per person
    const latestSwipePerPerson = new Map();
    for (const record of records) {
      const key = record.ObjectIdentity1;
      if (
        !latestSwipePerPerson.has(key) ||
        new Date(record.LocaleMessageTime) > new Date(latestSwipePerPerson.get(key).LocaleMessageTime)
      ) {
        latestSwipePerPerson.set(key, record);
      }
    }

    const livePeople = Array.from(latestSwipePerPerson.values())
      .filter((rec) => rec.Direction === 'InDirection');

    const currentOccupancy = livePeople.length;
    const totalVisitedToday = new Set(records.map((r) => r.ObjectIdentity1)).size;

    // Personnel type breakdown
    const personnelBreakdown = {
      Employee: livePeople.filter(p => p.PersonnelType === 'Employee').length,
      Contractor: livePeople.filter(p => p.PersonnelType === 'Contractor').length,
    };

    res.json({
      site: 'Denver',
      lastUpdated: new Date(),
      currentOccupancy,
      totalVisitedToday,
      personnelBreakdown,
    });

  } catch (error) {
    console.error('Error fetching Denver live occupancy:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

module.exports = {
  getDenverLiveOccupancy
};












let read all file carefully and give me updated controller for denver current Occupancy & Denvertotal visited toady 


const { denver } = require('../config/siteConfig');
const sql = require('mssql');

async function getDenverLiveOccupancy(req, res) {
  try {
    const pool = await denver.pool.connect();
    const result = await pool.request().query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.ObjectName1,
        -- permanent employees by Int1; contractors by Text12
        CASE 
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
  t1.ObjectIdentity1,
        t3.Name AS PersonnelType,
        -- fallback: Card or CHUID element
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          SCard.[value]
        ) AS CardNumber,
        t5_admit.value AS AdmitCode,
        t5_dir.value   AS Direction,
  CASE
        WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
        ELSE 'Other'
    END AS LogicalLocation,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]      t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType]  t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
      ) AS SCard
        ON t1.XmlGUID = SCard.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > '5-20-2025' 
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
   ObjectIdentity1,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
 WHERE LogicalLocation = 'Denver'
    ORDER BY LocaleMessageTime ASC;
 
    `);

    const records = result.recordset;

    // TODO: Process records to compute live occupancy summary

    res.json({
      site: 'Denver',
      lastUpdated: new Date(),
      data: records // temporary response
    });

  } catch (error) {
    console.error('Error fetching Denver live occupancy:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

module.exports = {
  getDenverLiveOccupancy
};
