// controllers/denverLiveOccupancyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql                = require('mssql');

const warnedKeys = new Set();

/** 1) Normalize door+direction into exact map keys **/
function normalizeKey(rawDoor, rawDir) {
  let d = String(rawDoor || '')
    .trim()
    // collapse any weird whitespace
    .replace(/\s+/g, ' ')
    .toUpperCase()
    // strip any trailing “_HH:MM:SS”
    .replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '');
  const dir = rawDir.trim() === 'InDirection' ? 'IN' : 'OUT';
  return `${d}___${dir}`;
}

/** 2) Map a normalized key to a floor (or “Out of office”) **/
function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
    .toFormat('yyyy-LL-dd');
  const today = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

/**
 * Build live occupancy + swipe summaries.
 * @param {Array} allEvents   – cumulative events
 * @param {Array} freshEvents – just‐fetched events
 */
function buildOccupancyForToday(allEvents, freshEvents) {
  // ─── A) Evict any person whose latest event was true “Out of office” ─────
  const lastByPerson = new Map();
  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    const prev = lastByPerson.get(key);
    if (!prev || evt.LocaleMessageTime > prev.LocaleMessageTime) {
      lastByPerson.set(key, evt);
    }
  });
  const evicted = new Set();
  lastByPerson.forEach(evt => {
    const zone = mapDoorToFloor(evt.Door, evt.Direction);
    if (evt.Direction === 'OutDirection' && zone === 'Out of office') {
      evicted.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });

  // ─── B) Filter out evicted from allEvents ─────────────────────────────────
  const activeEvents = allEvents.filter(evt => {
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    return !evicted.has(key);
  });

  // ─── 1) Occupancy: dedupe by latest InDirection per active person ───────
  const todayIn = activeEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );
  const latestByPerson2 = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson2.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time,'HH:mm:ss')) {
      latestByPerson2.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson2.values());

  // ─── 2) Floor breakdown + personnel counts ──────────────────────────────
  let employees = 0, contractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (['Employee','Terminated Personnel'].includes(e.PersonnelType)) employees++;
    else contractors++;
  });
  const floorBreakdown = Object.entries(floorMap).map(([floor, occ]) => ({
    floor, total: occ.length, occupants: occ
  }));

  // ─── 3) Personnel breakdown ─────────────────────────────────────────────
  const personnelBreakdown = Array.from(
    finalList.reduce((m,e)=> {
      m.set(e.PersonnelType,(m.get(e.PersonnelType)||0)+1);
      return m;
    }, new Map()),
    ([personnelType,count])=>({personnelType,count})
  );

  // ─── 4) Swipe‐stats (freshEvents only) ─────────────────────────────────
  const totalInSwipes  = freshEvents.filter(e =>
    e.Direction==='InDirection' && isTodayInDenver(e.Dateonly)
  ).length;
  const totalOutSwipes = freshEvents.filter(e =>
    e.Direction==='OutDirection' && isTodayInDenver(e.Dateonly)
  ).length;

  // ─── 5) Floor In/Out summary (dedupe one swipe per person+floor+dir) ──
  const validEvents = allEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      const dir   = evt.Direction.trim();
      const door  = normalizeKey(evt.Door, evt.Direction).split('___')[0];
      const isStrict = monitoredDoors[door] === dir;
      const isSuffix = dir==='IN'  ? door.endsWith('-IN')
                      : dir==='OUT'? door.endsWith('-OUT')
                                   : false;
      return isStrict || isSuffix;
    });
  const deduped = new Map();
  validEvents.forEach(evt => {
    const fl = mapDoorToFloor(evt.Door,evt.Direction);
    const key = `${evt.EmployeeID}___${fl}___${evt.Direction}`;
    const prev = deduped.get(key);
    const now  = DateTime.fromFormat(evt.Swipe_Time,'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time,'HH:mm:ss')) {
      deduped.set(key, evt);
    }
  });
  const floorMapIO = {};
  for (const evt of deduped.values()) {
    const fl = mapDoorToFloor(evt.Door,evt.Direction);
    floorMapIO[fl] = floorMapIO[fl]||{inSwipes:0,outSwipes:0,inSet:new Set(),outSet:new Set()};
    const id = evt.PersonGUID||evt.EmployeeID||evt.CardNumber;
    if (evt.Direction==='InDirection') {
      floorMapIO[fl].inSwipes++;
      floorMapIO[fl].inSet.add(id);
    } else {
      floorMapIO[fl].outSwipes++;
      floorMapIO[fl].outSet.add(id);
    }
  }
  const floorInOutSummary = Object.entries(floorMapIO).map(([floor,stats])=>{
    const inOnly =[...stats.inSet].filter(id=>!stats.outSet.has(id));
    return { floor, inSwipes:stats.inSwipes, outSwipes:stats.outSwipes,
             inOnlyCount:inOnly.length, inOnlyPersons:inOnly };
  });

  // ─── 6) Aggregate and return ─────────────────────────────────────────
  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown,
    totalVisitedToday:  finalList.length,
    visitedToday:       { employees, contractors, total: finalList.length },
    swipeStats:         { totalInSwipes, totalOutSwipes },
    floorInOutSummary
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':'text/event-stream',
    'Cache-Control':'no-cache',
    'Connection':'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length-1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close',()=>clearInterval(timer));
};














async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zoneRaw  = mapDoorToZone(Door, Direction);
    const zone     = zoneRaw && zoneRaw.toLowerCase();

    // 1) True "Out of office" → full eviction
    if (Direction === 'OutDirection' && zone === 'out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    // 2) Any other OutDirection → keep them (outer areas, reception exits, etc.)
    if (Direction === 'OutDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        // re-use the exact-cased string so your details match zoneFloorMap keys:
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 3) InDirection → normal check-in
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 4) Catch-all eviction
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

///////



i think above part is missing thats Why We got same realtime count and total headcount please check and test all data 




// controllers/denverLiveOccupancyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql                = require('mssql');

const warnedKeys = new Set();



function normalizeKey(rawDoor, rawDir) {
  // strip any trailing “_HH:MM:SS” from door
  // let d = String(rawDoor || '').trim().toUpperCase();
  let d = String(rawDoor || '')
    .trim()
    // collapse any run of whitespace to a single space
    .replace(/\s+/g, ' ')
    .toUpperCase();

  d = d.replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '');
  // classify direction exactly
  const dir = rawDir.trim() === 'InDirection' ? 'IN' : 'OUT';
  return `${d}___${dir}`;
}






/** Determine floor label, fallback to “HQ. N.” parsing **/
function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

/** Strip any trailing “_HH:MM:SS” from a door name **/
function stripTimeSuffix(doorRaw) {
  return doorRaw.replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '');
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType   = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
    .toFormat('yyyy-LL-dd');
  const today = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

/**
 * Build live occupancy + swipe summaries.
 * @param {Array} allEvents   – cumulative events (for occupancy)
 * @param {Array} freshEvents – just-fetched events (for swipeStats & floorInOut)
 */
function buildOccupancyForToday(allEvents, freshEvents) {
  // ─── A) Evict anyone who swiped truly “out of office” ───────────
  const evicted = new Set();
  // scan most recent event per person
  const lastByPerson = new Map();
  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    const prev = lastByPerson.get(key);
    if (!prev || evt.LocaleMessageTime > prev.LocaleMessageTime) {
      lastByPerson.set(key, evt);
    }
  });
  // any latest event that maps to Out of office evicts
  lastByPerson.forEach(evt => {
    if (evt.Direction === 'OutDirection' && mapDoorToFloor(evt.Door, evt.Direction) === 'Out of office') {
      evicted.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });
  // filter them out
  const activeEvents = allEvents.filter(evt => {
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    return !evicted.has(key);
  });

  // ─── 1) Occupancy: dedupe by latest InDirection per person ───────
  const todayIn = activeEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // ─── 2) Floor breakdown & personnel counts ────────────────────────
  let employees = 0, contractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });
  const floorBreakdown = Object.entries(floorMap).map(([floor, occ]) => ({
    floor, total: occ.length, occupants: occ
  }));

  // ─── 3) Personnel breakdown ───────────────────────────────────────
  const personnelBreakdown = Array.from(
    finalList.reduce((m, e) => {
      m.set(e.PersonnelType, (m.get(e.PersonnelType) || 0) + 1);
      return m;
    }, new Map()),
    ([personnelType, count]) => ({ personnelType, count })
  );

  // ─── 4) Swipe stats from freshEvents only ─────────────────────────
  const totalInSwipes  = freshEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  ).length;
  const totalOutSwipes = freshEvents.filter(e =>
    e.Direction === 'OutDirection' && isTodayInDenver(e.Dateonly)
  ).length;

  // ─── 5) Floor In/Out summary (deduped per person+floor+dir) ───────
  const validEvents = allEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      const dir     = evt.Direction.trim();
      let doorRaw   = stripTimeSuffix(evt.Door.trim().toUpperCase());
      const isStrict = Object.entries(monitoredDoors).some(
        ([key, reqDir]) => doorRaw === key.toUpperCase() && reqDir === dir
      );
      const isSuffix = (
        (dir === 'InDirection'  && doorRaw.endsWith('-IN'))  ||
        (dir === 'OutDirection' && doorRaw.endsWith('-OUT'))
      );
      return isStrict || isSuffix;
    });

  const dedupedMap = new Map();
  validEvents.forEach(evt => {
    const fl  = mapDoorToFloor(evt.Door, evt.Direction);
    const key = `${evt.EmployeeID}___${fl}___${evt.Direction}`;
    const prev = dedupedMap.get(key);
    const now  = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      dedupedMap.set(key, evt);
    }
  });

  const floorMapIO = {};
  Array.from(dedupedMap.values()).forEach(evt => {
    const fl = mapDoorToFloor(evt.Door, evt.Direction);
    floorMapIO[fl] = floorMapIO[fl] || { inSwipes: 0, outSwipes: 0, inSet: new Set(), outSet: new Set() };
    if (evt.Direction === 'InDirection') {
      floorMapIO[fl].inSwipes++;
      floorMapIO[fl].inSet.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    } else {
      floorMapIO[fl].outSwipes++;
      floorMapIO[fl].outSet.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });

  const floorInOutSummary = Object.entries(floorMapIO).map(([floor, stats]) => {
    const inOnly = [...stats.inSet].filter(id => !stats.outSet.has(id));
    return {
      floor,
      inSwipes:      stats.inSwipes,
      outSwipes:     stats.outSwipes,
      inOnlyCount:   inOnly.length,
      inOnlyPersons: inOnly
    };
  });

  // ─── 6) Today visited ─────────────────────────────────────────────
  const visitedToday = { employees, contractors, total: finalList.length };

  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown,
    totalVisitedToday:  finalList.length,
    visitedToday,
    swipeStats:         { totalInSwipes, totalOutSwipes },
    floorInOutSummary
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};
