// src/pages/DashboardHome.jsx
import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

import SummaryCards from '../components/SummaryCards';
import FloorOccupancyChart from '../components/FloorOccupancyChart';
import SummaryChart from '../components/SummaryChart';
import PersonnelDonutChart from '../components/PersonnelDonutChart';

export default function DashboardHome({
  personnelSummary,
  totalVisitedToday,
  floorData,
  zoneSummaryData,
  personnelBreakdown
}) {
  const employees = personnelSummary?.employees ?? 0;
  const contractors = personnelSummary?.contractors ?? 0;
  const totalOccupancy = employees + contractors;

  // Aggregate all personnel types
  const personnelTypeCounts = {
    Employee: employees,
    Contractor: contractors
  };

  personnelBreakdown.forEach(({ zone, ...types }) => {
    for (const [type, count] of Object.entries(types)) {
      personnelTypeCounts[type] = (personnelTypeCounts[type] || 0) + count;
    }
  });

  const chartData = Object.entries(personnelTypeCounts)
    .filter(([, count]) => count > 0)
    .map(([personnelType, count]) => ({ personnelType, count }));

  return (
    <Container fluid className="py-4">
      <SummaryCards
        totalOccupancy={totalOccupancy}
        employeeCount={employees}
        contractorCount={contractors}
        totalVisitedToday={totalVisitedToday}
      />

      <Row className="g-4">
        <Col md={4}>
          <FloorOccupancyChart data={floorData} />
        </Col>
        <Col md={4}>
          <SummaryChart summary={zoneSummaryData} />
        </Col>
        <Col md={4}>
          <PersonnelDonutChart data={chartData} />
        </Col>
      </Row>
    </Container>
  );
}





// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#007bff', '#28a745', '#fd7e14', '#6f42c1'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, entry) => sum + entry.count, 0);

  if (!data.length || total === 0) {
    return <Card body>No personnel data available</Card>;
  }

  return (
    <Card className="mb-4">
      <Card.Header>Personnel Type Occupancy</Card.Header>
      <Card.Body style={{ height: 350 }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={data}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={100}
              paddingAngle={4}
              labelLine={false}
              label={({ name, percent }) =>
                `${name}: ${(percent * 100).toFixed(0)}%`
              }
            >
              {data.map((entry, idx) => (
                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={(value) => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}









Now read both file carefully and give me updated js file carefully

// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

const COLORS = ['#007bff', '#28a745', '#fd7e14', '#6f42c1'];

export default function PersonnelDonutChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No personnel data</Card>;
  }

  const total = data.reduce((sum, entry) => sum + entry.count, 0);

  return (
    <Card className="mb-4">
      <Card.Header>Personnel Type Occupancy</Card.Header>
      <Card.Body style={{ height: 350 }}>
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={data}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={100}
              paddingAngle={4}
              labelLine={false}
            >
              {data.map((entry, idx) => (
                <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
              ))}
              {/* Center total label */}
              <Label
                value={total}
                position="center"
                className="recharts-text recharts-label"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={(value) => [`${value}`, 'Count']} />
            <Legend
              verticalAlign="bottom"
              wrapperStyle={{ paddingTop: 10 }}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}







// src/pages/DashboardHome.jsx

import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

import SummaryCards from '../components/SummaryCards';
import FloorOccupancyChart from '../components/FloorOccupancyChart';
import SummaryChart from '../components/SummaryChart';
import PersonnelDonutChart from '../components/PersonnelDonutChart';

export default function DashboardHome({
  personnelSummary,
  totalVisitedToday,
  floorData,
  zoneSummaryData,
  personnelBreakdown
}) {
  const employees = personnelSummary?.employees ?? 0;
  const contractors = personnelSummary?.contractors ?? 0;
  const totalOccupancy = employees + contractors;

  // Aggregate personnel counts
  const personnelTypeCounts = {};
  personnelBreakdown.forEach(({ zone, ...types }) => {
    for (const [type, count] of Object.entries(types)) {
      personnelTypeCounts[type] = (personnelTypeCounts[type] || 0) + count;
    }
  });

  // Create chart data only for types with > 0 count
  const chartData = Object.entries(personnelTypeCounts)
    .filter(([, count]) => count > 0)
    .map(([personnelType, count]) => ({ personnelType, count }));

  return (
    <Container fluid className="py-4">
      <SummaryCards
        totalOccupancy={totalOccupancy}
        employeeCount={employees}
        contractorCount={contractors}
        totalVisitedToday={totalVisitedToday}
      />

      <Row className="g-4">
        <Col md={4}>
          <FloorOccupancyChart data={floorData} />
        </Col>
        <Col md={4}>
          <SummaryChart summary={zoneSummaryData} />
        </Col>
        <Col md={4}>
          <PersonnelDonutChart data={chartData} />
        </Col>
      </Row>
    </Container>
  );
}


