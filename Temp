uvicorn main:app --reload



# myapp/data_controller.py

from fastapi import APIRouter, HTTPException
from sqlalchemy import text
from sqlalchemy.engine import Result
from typing import List, Dict
from .db import get_engine

router = APIRouter()


@router.get("/raw-data", response_model=List[Dict])
async def fetch_raw_access_logs():
    """
    Execute the SQL query against ACVSUJournal_00010020 as described,
    returning all rows needed for model training.
    """
    engine = get_engine()

    # This is the exact query you provided (comments removed).
    sql_query = """
    WITH CombinedQuery AS(
        SELECT 
            DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
            t1.ObjectName1,
            t1.PartitionName2 AS location,
            t5_card.CardNumber,
            t5_admit.value    AS AdmitCode,
            t5_dir.value      AS Direction,
            t1.ObjectName2,
            t5_rej.value      AS Rejection_Type,
            CASE 
                WHEN t3.Name IN ('Contractor', 'Terminated Contractor') THEN t2.Text12
                ELSE CAST(t2.Int1 AS NVARCHAR)
            END AS EmployeeID,
            t3.Name AS PersonnelType,
            t1.MessageType,
            t1.XmlGUID
        FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLog] AS t1
        LEFT JOIN [ACVSCore].[Access].[Personnel]     AS t2
            ON t1.ObjectIdentity1 = t2.GUID
        LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3
            ON t2.[PersonnelTypeId] = t3.[ObjectID]
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
            ON t1.XmlGUID = t5_admit.GUID 
            AND t5_admit.Name = 'AdmitCode'
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
            ON t1.XmlGUID = t5_dir.GUID 
            AND t5_dir.Value IN ('InDirection', 'OutDirection')
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxml] AS t_xml
            ON t1.XmlGUID = t_xml.GUID
        LEFT JOIN (
            SELECT GUID, [value]
            FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred]
            WHERE [Name] IN ('Card', 'CHUID')
        ) AS SCard 
            ON t1.XmlGUID = SCard.GUID
        OUTER APPLY (
            SELECT COALESCE(
                TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
                TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
                SCard.[value]
            ) AS CardNumber
        ) AS t5_card
        LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_Rej
            ON t1.XmlGUID = t5_Rej.GUID 
            AND t5_Rej.Name = 'RejectCode'
        WHERE 
            t1.MessageType IN ('CardAdmitted', 'CardRejected')
            AND t1.PartitionName2 = 'APAC.Default'
            AND CONVERT(
                date, 
                DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)
            ) >= '2025-01-01'
    )
    SELECT
        LocaleMessageTime,
        CONVERT(date, LocaleMessageTime)     AS Dateonly,
        CONVERT(time(0), LocaleMessageTime)  AS Swipe_Time,
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door,
        Rejection_Type
    FROM CombinedQuery
    ORDER BY LocaleMessageTime DESC;
    """

    try:
        with engine.connect() as conn:
            result: Result = conn.execute(text(sql_query))
            rows = [dict(row) for row in result.fetchall()]
        return rows

    except Exception as exc:
        # If anything goes wrong (credentials, network, etc.), return a 500
        raise HTTPException(status_code=500, detail=str(exc))











# myapp/data_controller.py

from fastapi import APIRouter, HTTPException
from sqlalchemy import text
from sqlalchemy.engine import Result
from typing import List, Dict
from .db import get_engine   # ✅ Correct relative import

router = APIRouter()


@router.get("/raw-data", response_model=List[Dict])
async def fetch_raw_access_logs():
    """
    Execute the SQL query against ACVSUJournal_00010020 as described,
    returning all rows needed for model training.
    """
    engine = get_engine()

    # This is the exact query you provided (comments removed).
    sql_query = """
   WITH CombinedQuery AS(
		SELECT 
	    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.ObjectName1,
	    t1.PartitionName2 As location,
	    t5_card.CardNumber,
        t5_admit.value AS AdmitCode,
	    t5_dir.value AS Direction,
        t1.ObjectName2,
	    t5_rej.value AS Rejection_Type,
	    CASE 
            WHEN t3.Name IN ('Contractor', 'Terminated Contractor') THEN t2.Text12
            ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS "EmployeeID",
        t3.Name AS PersonnelType,
        t1.MessageType,
        t1.XmlGUID
	    FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLog] AS t1
    LEFT JOIN [ACVSCore].[Access].[Personnel] AS t2
      ON t1.ObjectIdentity1 = t2.GUID
    LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3
      ON t2.[PersonnelTypeId] = t3.[ObjectID]
    LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
      ON t1.XmlGUID = t5_admit.GUID
      AND t5_admit.Name = 'AdmitCode'
    LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
      ON t1.XmlGUID = t5_dir.GUID
      AND t5_dir.Value IN ('InDirection', 'OutDirection')
    LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxml] AS t_xml
      ON t1.XmlGUID = t_xml.GUID
    -- Pre‐pull shredded “Card” row
    LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card', 'CHUID')
    ) AS SCard
      ON t1.XmlGUID = SCard.GUID
    /* NEW: three‐stage CardNumber resolution */
    OUTER APPLY (
        SELECT COALESCE(
            -- 1) <LogMessage><CHUID><Card>…</Card></CHUID>
            TRY_CAST(t_xml.XmlMessage AS XML)
                .value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
            -- 2) <LogMessage><CHUID>…</CHUID> (no nested <Card>)
            TRY_CAST(t_xml.XmlMessage AS XML)
                .value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
            -- 3) shredded fallback
            SCard.[value]
        ) AS CardNumber
    ) AS t5_card
    LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_Rej
      ON t1.XmlGUID = t5_Rej.GUID
      AND t5_Rej.Name = 'RejectCode'
   
   -- include both admits and rejects
   WHERE t1.MessageType IN ('CardAdmitted', 'CardRejected')
     AND t1.PartitionName2 = 'APAC.Default'
     AND CONVERT(
           date, 
           DATEADD(
             MINUTE, 
             -1 * t1.MessageLocaleOffset, 
             t1.MessageUTC
           )
         ) >= '2025-01-01'
   )
SELECT 
    LocaleMessageTime,
    Dateonly       = CONVERT(date, LocaleMessageTime), 
    Swipe_Time     = CONVERT(time(0), LocaleMessageTime),
    EmployeeID,
    ObjectName1,
    PersonnelType,
    CardNumber,
    AdmitCode,
    Direction,
    ObjectName2 AS Door,
    Rejection_Type
FROM CombinedQuery
ORDER BY LocaleMessageTime DESC;
    """

    try:
        with engine.connect() as conn:
            result: Result = conn.execute(text(sql_query))
            # Use row._mapping to convert each row into a proper dict
            rows = [dict(row._mapping) for row in result.fetchall()]
        return rows

    except Exception as exc:
        # If anything goes wrong (credentials, network, etc.), return a 500
        raise HTTPException(status_code=500, detail=str(exc))








Fix the issue and give me updated file

# myapp/data_controller.py

from fastapi import APIRouter, HTTPException
from sqlalchemy import text
from sqlalchemy.engine import Result
from typing import List, Dict
from .db import get_engine   # ✅ Correct relative import

router = APIRouter()


@router.get("/raw-data", response_model=List[Dict])
async def fetch_raw_access_logs():
    """
    Execute the SQL query against ACVSUJournal_00010020 as described,
    returning all rows needed for model training.
    """
    engine = get_engine()

    # This is the exact query you provided (comments removed).
    sql_query = """
   WITH CombinedQuery AS(
		SELECT 
	    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t1.ObjectName1,
	t1.PartitionName2 As location,
	t5_card.CardNumber,
t5_admit.value AS AdmitCode,
t5_dir.value AS Direction,
    t1.ObjectName2,
	t5_rej.value AS Rejection_Type,
	CASE 
        WHEN t3.Name IN ('Contractor', 'Terminated Contractor') THEN t2.Text12
        ELSE CAST(t2.Int1 AS NVARCHAR)
    END AS "EmployeeID",
    t3.Name AS PersonnelType,
    t1.MessageType,t1.XmlGUID
	FROM
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLog] AS t1
LEFT JOIN
    [ACVSCore].[Access].[Personnel] AS t2
    ON t1.ObjectIdentity1 = t2.GUID
LEFT JOIN
    [ACVSCore].[Access].[PersonnelType] AS t3
    ON t2.[PersonnelTypeId] = t3.[ObjectID]
LEFT JOIN
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
    ON t1.XmlGUID = t5_admit.GUID
    AND t5_admit.Name = 'AdmitCode'
LEFT JOIN
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
    ON t1.XmlGUID = t5_dir.GUID
    AND t5_dir.Value IN ('InDirection', 'OutDirection')
    LEFT JOIN [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
    -- Pre-pull shredded “Card” row
    LEFT JOIN (
    SELECT GUID, [value]
    FROM [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred]
    WHERE [Name] IN ('Card', 'CHUID')
    ) AS SCard
    ON t1.XmlGUID = SCard.GUID
    /* NEW: three-stage CardNumber resolution */
    OUTER APPLY (
    SELECT COALESCE(
        -- 1) <LogMessage><CHUID><Card>…</Card></CHUID>
        TRY_CAST(t_xml.XmlMessage AS XML)
        .value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
        -- 2) <LogMessage><CHUID>…</CHUID> (no nested <Card>)
        TRY_CAST(t_xml.XmlMessage AS XML)
        .value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
        -- 3) shredded fallback
        SCard.[value]
    ) AS CardNumber
    ) AS t5_card
 
LEFT JOIN
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_Rej
    ON t1.XmlGUID = t5_Rej.GUID
    AND t5_Rej.Name = 'RejectCode'
 
   
   --include both admits and rejects
   WHERE t1.MessageType IN ('CardAdmitted', 'CardRejected')
   AND t1.PartitionName2 = 'APAC.Default'
   AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) >= '2025-01-01')
 
SELECT 
	LocaleMessageTime,
	Dateonly = Convert(date, LocaleMessageTime), 
	Swipe_Time = CONVERT(time(0), LocaleMessageTime),
	EmployeeID,
	ObjectName1,
	PersonnelType,
	CardNumber,
	AdmitCode,
	Direction,
	ObjectName2 As Door,
	Rejection_Type
	FROM CombinedQuery
	Order BY LocaleMessageTime DESC;
    """

    try:
        with engine.connect() as conn:
            result: Result = conn.execute(text(sql_query))
            rows = [dict(row) for row in result.fetchall()]
        return rows

    except Exception as exc:
        # If anything goes wrong (credentials, network, etc.), return a 500
        raise HTTPException(status_code=500, detail=str(exc))

