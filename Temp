As per requirnment adjust colours and give me Updated js files carefully.Dont make unneccessary changes in this file so make cghanges smothly

C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\FloorDetailsTable.css

.floor-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}
.floor-card {
  flex: 1 1 300px;
  background: #ffffff;
  border-radius: 8px;
  box-shadow: 0 3px 6px rgba(0,0,0,0.1);
  overflow: hidden;
}
.floor-header {
  background: #4a90e2;
  color: #fff;
  padding: 0.5rem 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.floor-badge {
  background: rgba(255,255,255,0.3);
  border-radius: 12px;
  padding: 0.2rem 0.6rem;
  font-weight: bold;
}
.floor-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.85rem;
}
.floor-table th,
.floor-table td {
  padding: 0.4rem 0.8rem;
  border-bottom: 1px solid #eee;
}


C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\FloorDetailsTable.jsx

// src/components/FloorDetailsTable.jsx
import React from 'react';
import './FloorDetailsTable.css';

export default function FloorDetailsTable({ data = [] }) {
  if (!Array.isArray(data) || data.length === 0 || !data[0].floor) {
    return <p>No floor detail data available.</p>;
  }

  return (
    <div className="floor-cards">
      {data.map(({ floor, total, occupants }) => (
        <div key={floor} className="floor-card">
          <div className="floor-header">
            <h3>{floor}</h3>
            <span className="floor-badge">{total}</span>
          </div>

          <table className="floor-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>ID</th>
                <th>Swipe Time</th>
                <th>Type</th>
                <th>Door Name</th>
              </tr>
            </thead>
            <tbody>
              {occupants.map((emp, i) => (
                <tr key={`${emp.EmployeeID}-${i}`}>
                  <td>{emp.ObjectName1}</td>
                  <td>{emp.EmployeeID}</td>                 
                  <td>{emp.Swipe_Time}</td>
                  <td>{emp.PersonnelType}</td>
                  <td>{emp.Door}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))}
    </div>
  );
}



C:\Users\W0024618\Desktop\swipeData\client-denver\src\components\FloorOccupancyChart.jsx

// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

const FLOOR_GRADIENTS = [
  ['#002f6c', '#bfd6ff'],
  ['#3b4cca', '#d0d8ff'],
  ['#006d5b', '#cffaf3'],
  ['#4e5d6c', '#d6e3f0'],
  ['#4b0082', '#e0ccff'],
  ['#264653', '#a0b5d8'],
  ['#9b2226', '#ffb3b3'],
  ['#005f73', '#caebf2'],
  ['#7f6000', '#fff2cc'],
  ['#6a1b9a', '#e5ccf2'],
  ['#8b0000', '#ffcccc'],
  ['#006400', '#ccffcc'],
  ['#8b4513', '#ffe5cc'],
  ['#2f4f4f', '#d9d9d9'],
  ['#483d8b', '#e6e6fa']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor detail data available.</Card>;
  }

  const sortedData = [...data].sort((a, b) => b.total - a.total);

  const renderLabel = ({ x, y, width, value, index }) => {
    const [dark] = FLOOR_GRADIENTS[index % FLOOR_GRADIENTS.length];
    return (
      <text
        x={x + width / 2}
        y={y - 6}
        fill={dark}
        textAnchor="middle"
        fontSize={12}
        fontWeight="bold"
      >
        {value}
      </text>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#ccc' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#fff'
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={sortedData}
              margin={{ top: 30, right: 30, left: 10, bottom: 40 }}
              barCategoryGap="10%"
            >
              <defs>
                {sortedData.map((_, idx) => {
                  const [dark, light] = FLOOR_GRADIENTS[idx % FLOOR_GRADIENTS.length];
                  return (
                    <linearGradient
                      id={`floorGrad-${idx}`}
                      key={idx}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={dark} stopOpacity={1} />
                      <stop offset="100%" stopColor={light} stopOpacity={1} />
                    </linearGradient>
                  );
                })}
              </defs>

              <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis
                dataKey="floor"
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Floor', position: 'bottom', offset: 20 }}
              />
              <YAxis
                allowDecimals={false}
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 10 }}
              />
              <Tooltip
                wrapperStyle={{
                  backgroundColor: '#fff',
                  border: '1px solid #ccc',
                  borderRadius: '4px'
                }}
              />
              <Bar
                dataKey="total"
                name="Occupancy"
                radius={[6, 6, 0, 0]}
                label={renderLabel}
              >
                {sortedData.map((_, idx) => (
                  <Cell
                    key={idx}
                    fill={`url(#floorGrad-${idx})`}
                    stroke="#333"         // Add border to each bar
                    strokeWidth={0.8}     // Thin border
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}



// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart, Pie, Cell, Tooltip,
  ResponsiveContainer, Legend, Label
} from 'recharts';
import { Card } from 'react-bootstrap';

// Western Unionâ€“style colors
const COLORS = ['#FFD100', '#009E60', '#58595B', '#FFB800'];

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) return <Card body>No personnel data</Card>;

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center fw-bold">
        Personnel Type Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: '1rem' }}>
        <ResponsiveContainer>
          <PieChart>
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%" cy="50%"
              innerRadius={70} outerRadius={110}
              paddingAngle={4}
              labelLine={false}
              label={({ percent, name }) => `${name}: ${(percent * 100).toFixed(0)}%`}
              stroke="#333" // Added dark border
              strokeWidth={1.5} // Slightly thicker for clarity
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.personnelType}
                  fill={COLORS[idx % COLORS.length]}
                />
              ))}
              <Label
                value={total}
                position="center"
                style={{ fontSize: '1.5rem', fontWeight: 'bold' }}
              />
            </Pie>
            <Tooltip formatter={value => [`${value}`, 'Count']} />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}




// src/components/PersonnelTypeBreakdownTable.jsx
import React from 'react';
import { Table, Badge } from 'react-bootstrap';

export default function PersonnelTypeBreakdownTable({ data = [] }) {
  if (!data.length) {
    return <p>No data available for personnel types.</p>;
  }

  const colors = ['primary','success','warning','info'];
  return (
    <Table striped bordered hover responsive className="mb-4">
      <thead>
        <tr>
          <th>Personnel Type</th>
          <th>Count</th>
        </tr>
      </thead>
      <tbody>
        {data.map((entry, idx) => (
          <tr key={idx}>
            <td>
              <Badge bg={colors[idx % colors.length]}>
                {entry.type}
              </Badge>
            </td>
            <td>{entry.count}</td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
}





// src/components/SummaryCards.jsx

import React from 'react';
import { Card, Row, Col } from 'react-bootstrap';
import { FaUsers, FaUserTie, FaHardHat } from 'react-icons/fa';

export default function SummaryCards({
  totalVisitedToday, employeesVisitedToday, contractorsVisitedToday,
  totalOccupancy, employeeCount, contractorCount
}) {
  const cards = [
    { title: 'Total Headcount', value: totalVisitedToday, icon: <FaUsers />, color: 'info' },
    { title: 'Employee', value: employeesVisitedToday, icon: <FaUserTie />, color: 'success' },
    { title: 'Contractors', value: contractorsVisitedToday, icon: <FaHardHat />, color: 'warning' },
    { title: 'Active Headcount', value: totalOccupancy, icon: <FaUsers />, color: 'primary' },
    { title: 'Active Employee ', value: employeeCount, icon: <FaUserTie />, color: 'success' },
    { title: 'Active Contractor', value: contractorCount, icon: <FaHardHat />, color: 'warning' },
  ];

  return (
    <Row className="mb-4">
      {cards.map((c, i) => (
        <Col key={i} sm={6} md={4} lg={2} className="mb-3">
          <Card border={c.color} className="shadow-sm infographic-card">
            <Card.Body className="text-center">
              <div className={`text-${c.color} mb-2`} style={{ fontSize: '1.5rem' }}>
                {c.icon}
              </div>
              <Card.Title>{c.title}</Card.Title>
              <Card.Text style={{ fontSize: '1.6rem', fontWeight: 'bold' }}>
                {c.value}
              </Card.Text>
            </Card.Body>
          </Card>
        </Col>
      ))}
    </Row>
  );
}









import React from 'react';
import {
  BarChart, Bar, XAxis, YAxis,
  Tooltip, CartesianGrid, ResponsiveContainer,
  Legend, defs, linearGradient, stop
} from 'recharts';
import { Card } from 'react-bootstrap';

export default function SummaryChart({ summary = [], theme }) {
  return (
    <Card
      className="mb-4 infographic-card"
      style={{ background: theme === 'dark' ? '#2b2b2b' : '#fff' }}
    >
      <Card.Header
        style={{ background: '#FFD100', fontWeight: 'bold' }}
      >
        Zone Occupancy Overview
      </Card.Header>
      <Card.Body style={{ height: 300 }}>
        <ResponsiveContainer>
          <BarChart data={summary} margin={{ left: 0, right: 20, top: 20, bottom: 5 }}>
            <defs>
              <linearGradient id="zoneGrad" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%"  stopColor="#009E60" stopOpacity={0.8}/>
                <stop offset="95%" stopColor="#009E60" stopOpacity={0.2}/>
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="4 4" stroke={ theme==='dark'? '#444' : '#ccc' }/>
            <XAxis dataKey="zone" tick={{ fontSize: 12, fill: theme==='dark'? '#fff':'#333' }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: theme==='dark'? '#fff':'#333' }} />
            <Tooltip
              wrapperStyle={{
                backgroundColor: theme==='dark'? '#333':'#fff',
                border: `1px solid ${theme==='dark'? '#555':'#ccc'}`,
                borderRadius: '4px'
              }}
            />
            <Legend verticalAlign="bottom" style={{ color: theme==='dark'? '#fff':'#333' }}/>
            <Bar
              dataKey="count"
              name="Occupancy"
              fill="url(#zoneGrad)"
              radius={[6,6,0,0]}
            />
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}



