// controllers/denverLiveOccupancyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql                = require('mssql');
const normalizeKey = require('../data/normalizeKey');


/** Determine floor label, fallback to “HQ. N.” parsing **/
function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

/** Strip any trailing “_HH:MM:SS” from a door name **/
function stripTimeSuffix(doorRaw) {
  return doorRaw.replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '');
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType   = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
    .toFormat('yyyy-LL-dd');
  const today = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}



/**
 * Build live occupancy + swipe summaries.
 * @param {Array} allEvents   – cumulative events (for occupancy)
 * @param {Array} freshEvents – just-fetched events (for swipeStats & floorInOut)
 */



function computeVisitedToday(allEvents) {
  const seen = new Set();
  allEvents.forEach(evt => {
    if (evt.Direction === 'InDirection' && isTodayInDenver(evt.Dateonly)) {
      const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
      seen.add(key);
    }
  });
  return seen.size;
}






function buildOccupancyForToday(allEvents, freshEvents) {
  // ─── A) Evict anyone who swiped truly “out of office” ───────────
  const evicted = new Set();
  // scan most recent event per person
  const lastByPerson = new Map();
  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    const prev = lastByPerson.get(key);
    if (!prev || evt.LocaleMessageTime > prev.LocaleMessageTime) {
      lastByPerson.set(key, evt);
    }
  });
  // any latest event that maps to Out of office evicts
  lastByPerson.forEach(evt => {
    if (evt.Direction === 'OutDirection' && mapDoorToFloor(evt.Door, evt.Direction) === 'Out of office') {
      evicted.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });
  // filter them out
  const activeEvents = allEvents.filter(evt => {
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    return !evicted.has(key);
  });

  // ─── 1) Occupancy: dedupe by latest InDirection per person ───────
  const todayIn = activeEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // ─── 2) Floor breakdown & personnel counts ────────────────────────
  let employees = 0, contractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });
  const floorBreakdown = Object.entries(floorMap).map(([floor, occ]) => ({
    floor, total: occ.length, occupants: occ
  }));

  // ─── 3) Personnel breakdown ───────────────────────────────────────
  const personnelBreakdown = Array.from(
    finalList.reduce((m, e) => {
      m.set(e.PersonnelType, (m.get(e.PersonnelType) || 0) + 1);
      return m;
    }, new Map()),
    ([personnelType, count]) => ({ personnelType, count })
  );

  // ─── 4) Swipe stats from freshEvents only ─────────────────────────
  const totalInSwipes  = freshEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  ).length;
  const totalOutSwipes = freshEvents.filter(e =>
    e.Direction === 'OutDirection' && isTodayInDenver(e.Dateonly)
  ).length;

  // ─── 5) Floor In/Out summary (deduped per person+floor+dir) ───────
  const validEvents = allEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      const dir     = evt.Direction.trim();
      let doorRaw   = stripTimeSuffix(evt.Door.trim().toUpperCase());
      const isStrict = Object.entries(monitoredDoors).some(
        ([key, reqDir]) => doorRaw === key.toUpperCase() && reqDir === dir
      );
      const isSuffix = (
        (dir === 'InDirection'  && doorRaw.endsWith('-IN'))  ||
        (dir === 'OutDirection' && doorRaw.endsWith('-OUT'))
      );
      return isStrict || isSuffix;
    });

  const dedupedMap = new Map();
  validEvents.forEach(evt => {
    const fl  = mapDoorToFloor(evt.Door, evt.Direction);
    const key = `${evt.EmployeeID}___${fl}___${evt.Direction}`;
    const prev = dedupedMap.get(key);
    const now  = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      dedupedMap.set(key, evt);
    }
  });

  const floorMapIO = {};
  Array.from(dedupedMap.values()).forEach(evt => {
    const fl = mapDoorToFloor(evt.Door, evt.Direction);
    floorMapIO[fl] = floorMapIO[fl] || { inSwipes: 0, outSwipes: 0, inSet: new Set(), outSet: new Set() };
    if (evt.Direction === 'InDirection') {
      floorMapIO[fl].inSwipes++;
      floorMapIO[fl].inSet.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    } else {
      floorMapIO[fl].outSwipes++;
      floorMapIO[fl].outSet.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });

  const floorInOutSummary = Object.entries(floorMapIO).map(([floor, stats]) => {
    const inOnly = [...stats.inSet].filter(id => !stats.outSet.has(id));
    return {
      floor,
      inSwipes:      stats.inSwipes,
      outSwipes:     stats.outSwipes,
      inOnlyCount:   inOnly.length,
      inOnlyPersons: inOnly
    };
  });

  // ─── 6) Today visited ─────────────────────────────────────────────
  const visitedToday = { employees, contractors, total: finalList.length };

  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown,
    //totalVisitedToday,                           // NEW cumulative count
      visitedToday,
    totalVisitedToday:  finalList.length,
    visitedToday,
    swipeStats:         { totalInSwipes, totalOutSwipes },
    floorInOutSummary
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};

Each code line by line i need Total Visited today means totll unique people Who visited today offce 
and realtime means Employee Who present in office Currently

Read 



data: {"asOf":"2025-05-29T05:44:52.165Z","currentCount":27,"floorBreakdown":[{"floor":"Floor 11","total":2,"occupants":[{"LocaleMessageTime":"2025-05-28T14:07:25.000Z","Dateonly":"2025-05-28","Swipe_Time":"14:07:25","EmployeeID":"326514","PersonGUID":"21816A0E-ACFE-4F92-8C32-FAF56FB3AEAC","ObjectName1":"Boshears, Rhen James","PersonnelType":"Employee","CardNumber":"614273","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 11. South Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T11:53:51.000Z","Dateonly":"2025-05-28","Swipe_Time":"11:53:51","EmployeeID":"301804","PersonGUID":"E224334F-BF39-4245-B90C-95B27F33F4D3","ObjectName1":"Romo, Abraham","PersonnelType":"Employee","CardNumber":"232430","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 11. North Lobby Doors-IN"}]},{"floor":"Floor 01","total":5,"occupants":[{"LocaleMessageTime":"2025-05-28T08:04:51.000Z","Dateonly":"2025-05-28","Swipe_Time":"08:04:51","EmployeeID":"W0026151","PersonGUID":"5EC24130-835B-4D6F-8CFC-E9C2B1993F4B","ObjectName1":"Dean, Taje","PersonnelType":"Contractor","CardNumber":"617976","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 01. Focus Area West-IN"},{"LocaleMessageTime":"2025-05-28T14:43:47.000Z","Dateonly":"2025-05-28","Swipe_Time":"14:43:47","EmployeeID":"325565","PersonGUID":"F550D4F1-23BE-4DAD-81A1-DDEEC87D628A","ObjectName1":"Vogels, Nathan","PersonnelType":"Employee","CardNumber":"612336","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 01. Retail North_10:03:1A"},{"LocaleMessageTime":"2025-05-28T13:32:38.000Z","Dateonly":"2025-05-28","Swipe_Time":"13:32:38","EmployeeID":"62082475","PersonGUID":"DA57B6B7-EC5B-46E9-AFE7-1D9E424DF94F","ObjectName1":"Briscoe, Cynthia","PersonnelType":"Contractor","CardNumber":"613792","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 01. Focus Area North-IN"},{"LocaleMessageTime":"2025-05-28T15:59:07.000Z","Dateonly":"2025-05-28","Swipe_Time":"15:59:07","EmployeeID":"303374","PersonGUID":"EE786463-0500-4B29-9C9C-1FCEACEA1E4A","ObjectName1":"Hill, Tori","PersonnelType":"Employee","CardNumber":"233356","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 01. Retail North_10:03:1A"},{"LocaleMessageTime":"2025-05-28T14:04:46.000Z","Dateonly":"2025-05-28","Swipe_Time":"14:04:46","EmployeeID":"327370","PersonGUID":"69D02F39-8377-4C7E-A7CE-E4B2332326EA","ObjectName1":"Garcia Carrillo, Melany","PersonnelType":"Employee","CardNumber":"613404","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 01. Retail North_10:03:1A"}]},{"floor":"Floor 15","total":3,"occupants":[{"LocaleMessageTime":"2025-05-28T10:28:15.000Z","Dateonly":"2025-05-28","Swipe_Time":"10:28:15","EmployeeID":"328913","PersonGUID":"5175E394-4240-49AB-80D4-D21D73AF14A4","ObjectName1":"Oberoi, Aditya","PersonnelType":"Employee","CardNumber":"618211","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 15. Executive Entrance_10:03:9F"},{"LocaleMessageTime":"2025-05-28T07:53:39.000Z","Dateonly":"2025-05-28","Swipe_Time":"07:53:39","EmployeeID":"322311","PersonGUID":"0B3F42D4-4B35-4C0A-989B-AAEFDD580C19","ObjectName1":"Rupczynski, Bob","PersonnelType":"Employee","CardNumber":"602789","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 15. Executive Entrance_10:03:9F"},{"LocaleMessageTime":"2025-05-28T14:56:59.000Z","Dateonly":"2025-05-28","Swipe_Time":"14:56:59","EmployeeID":"C676439","PersonGUID":"BEE068E5-3ECC-4486-B7E7-85604CCF10B7","ObjectName1":"Akpai, Fred","PersonnelType":"Contractor","CardNumber":"613769","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 15. South Lobby Doors-IN"}]},{"floor":"Floor 09","total":1,"occupants":[{"LocaleMessageTime":"2025-05-28T15:01:35.000Z","Dateonly":"2025-05-28","Swipe_Time":"15:01:35","EmployeeID":"154912","PersonGUID":"AA069403-81D1-42B3-AF3C-AF9EC9171864","ObjectName1":"De Vries, J.P.","PersonnelType":"Employee","CardNumber":"230302","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 09. North Stairwell-IN"}]},{"floor":"Floor 13","total":7,"occupants":[{"LocaleMessageTime":"2025-05-28T11:16:37.000Z","Dateonly":"2025-05-28","Swipe_Time":"11:16:37","EmployeeID":"328915","PersonGUID":"93CD411E-828A-4AC8-8AAC-6BF0BD008F92","ObjectName1":"West, Megan","PersonnelType":"Employee","CardNumber":"618208","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. North Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T08:04:00.000Z","Dateonly":"2025-05-28","Swipe_Time":"08:04:00","EmployeeID":"320604","PersonGUID":"7BA6A729-15AD-49AA-A1C0-7968361F21A2","ObjectName1":"Garces, Kerri","PersonnelType":"Employee","CardNumber":"604032","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. North Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T16:19:05.000Z","Dateonly":"2025-05-28","Swipe_Time":"16:19:05","EmployeeID":"325493","PersonGUID":"66D33E1A-93B3-46C6-A1E0-53F9FE105391","ObjectName1":"Kay, Paul Matthew","PersonnelType":"Employee","CardNumber":"612312","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. South Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T16:09:02.000Z","Dateonly":"2025-05-28","Swipe_Time":"16:09:02","EmployeeID":"328239","PersonGUID":"E5649FF6-C93B-4D44-B03B-37C71DAD2E8F","ObjectName1":"Nowell, Kaytlin","PersonnelType":"Employee","CardNumber":"618044","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. South Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T08:59:32.000Z","Dateonly":"2025-05-28","Swipe_Time":"08:59:32","EmployeeID":"320109","PersonGUID":"FB3049C1-3C8D-470D-904E-172071BB1637","ObjectName1":"Nakum, Paresh","PersonnelType":"Employee","CardNumber":"604221","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. South Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T16:09:06.000Z","Dateonly":"2025-05-28","Swipe_Time":"16:09:06","EmployeeID":"324639","PersonGUID":"F6478191-00E2-4319-8ECC-8D34FB79A9A1","ObjectName1":"Sprunt, Elizabeth","PersonnelType":"Employee","CardNumber":"609093","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. South Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T23:36:45.000Z","Dateonly":"2025-05-28","Swipe_Time":"23:36:45","EmployeeID":"W0022449","PersonGUID":"E0ECF741-9548-463A-9B4E-A3E55D50D4AC","ObjectName1":"Angel, Maria","PersonnelType":"Contractor","CardNumber":"613873","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. North Lobby Doors-IN"}]},{"floor":"Floor 06","total":4,"occupants":[{"LocaleMessageTime":"2025-05-28T15:12:43.000Z","Dateonly":"2025-05-28","Swipe_Time":"15:12:43","EmployeeID":"74218316","PersonGUID":"20E66D9A-6208-423D-8234-F7B7F4ED7879","ObjectName1":"Walsh, Amanda","PersonnelType":"Contractor","CardNumber":"602917","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ.06. Mail Room_11:00:17"},{"LocaleMessageTime":"2025-05-28T17:02:47.000Z","Dateonly":"2025-05-28","Swipe_Time":"17:02:47","EmployeeID":"68214655","PersonGUID":"27CD8885-3554-4404-AA5D-F89BC1BDFDE6","ObjectName1":"Case, Brian","PersonnelType":"Contractor","CardNumber":"613800","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ.06. Mail Room_11:00:17"},{"LocaleMessageTime":"2025-05-28T18:06:12.000Z","Dateonly":"2025-05-28","Swipe_Time":"18:06:12","EmployeeID":"327247","PersonGUID":"0EA08AE0-4792-487D-8F17-8369D866DFAA","ObjectName1":"Francon, Axel","PersonnelType":"Employee","CardNumber":"613377","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 06. Fitness Center East_11:01:02"},{"LocaleMessageTime":"2025-05-28T18:03:23.000Z","Dateonly":"2025-05-28","Swipe_Time":"18:03:23","EmployeeID":"327608","PersonGUID":"6719213A-5211-4639-B358-A843B0464E95","ObjectName1":"Steiner, John-Michael","PersonnelType":"Employee","CardNumber":"613713","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 06. South Center Hall Entry-IN"}]},{"floor":"Floor 14","total":4,"occupants":[{"LocaleMessageTime":"2025-05-28T13:41:49.000Z","Dateonly":"2025-05-28","Swipe_Time":"13:41:49","EmployeeID":"315081","PersonGUID":"FF242F1E-FDF3-4F19-BF29-551C1AA071D5","ObjectName1":"Vassallo, Annie","PersonnelType":"Employee","CardNumber":"230952","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 14. North Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T17:09:49.000Z","Dateonly":"2025-05-28","Swipe_Time":"17:09:49","EmployeeID":"328295","PersonGUID":"E3547D01-1018-44DC-A629-137EF1E0F58D","ObjectName1":"Rembold, John M.","PersonnelType":"Employee","CardNumber":"602945","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 14. Freight Elevator Lobby-IN"},{"LocaleMessageTime":"2025-05-28T11:43:09.000Z","Dateonly":"2025-05-28","Swipe_Time":"11:43:09","EmployeeID":"W0021215","PersonGUID":"D1D94388-9156-4200-AEBA-E0DAD2B48AF1","ObjectName1":"Lo O, Eddy","PersonnelType":"Contractor","CardNumber":"614190","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 14. Freight Elevator Lobby-IN"},{"LocaleMessageTime":"2025-05-28T15:27:14.000Z","Dateonly":"2025-05-28","Swipe_Time":"15:27:14","EmployeeID":"328396","PersonGUID":"A10DFF3B-1C47-4A69-A166-C5BC8FA7D84C","ObjectName1":"Stepanian, Julia","PersonnelType":"Employee","CardNumber":"603032","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 14. North Lobby Doors-IN"}]},{"floor":"Floor 12","total":1,"occupants":[{"LocaleMessageTime":"2025-05-28T11:19:36.000Z","Dateonly":"2025-05-28","Swipe_Time":"11:19:36","EmployeeID":"67458169","PersonGUID":"86F2993B-D5B1-46E8-9D29-66CD41B84390","ObjectName1":"Devulapalli, Phanendra","PersonnelType":"Contractor","CardNumber":"603009","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 12. South Lobby Doors-IN"}]}],"personnelSummary":{"employees":19,"contractors":8},"personnelBreakdown":[{"personnelType":"Employee","count":19},{"personnelType":"Contractor","count":8}],
"visitedToday":{"employees":19,"contractors":8,"total":27},"totalVisitedToday":27,

