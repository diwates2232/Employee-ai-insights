This is my current file Give me Updated js file carefully

// controllers/denverInOutInconsistencyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const sql                = require('mssql');
const normalizeKey       = require('../data/normalizeKey');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');

const warnedKeys = new Set();

// Build a Set of normalized door___direction keys (strict doors only)
const normalizedMonitoredKeys = new Set(
  Object.entries(monitoredDoors).map(
    ([door, dir]) => normalizeKey(door, dir)
  )
);

/** Strip any trailing “_HH:MM:SS” from a door name **/
function stripTimeSuffix(doorRaw) {
  return doorRaw.replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '').trim();
}

/**
 * Determine floor label by regex.
 * Falls back to mapDoorToFloor if necessary.
 */
function extractFloor(rawDoor) {
  const noTime = stripTimeSuffix(rawDoor);
  const m = noTime.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) {
    return `Floor ${m[1]}`;
  }
  // fallback: attempt to map via doorFloorMap
  const keyIn  = normalizeKey(noTime, 'InDirection');
  const keyOut = normalizeKey(noTime, 'OutDirection');
  if (doorFloorMap[keyIn])  return doorFloorMap[keyIn];
  if (doorFloorMap[keyOut]) return doorFloorMap[keyOut];
  if (!warnedKeys.has(noTime)) {
    console.warn(`⛔ Unmapped door for floor extraction: "${noTime}"`);
    warnedKeys.add(noTime);
  }
  return 'Unknown Floor';
}

/**
 * Fetch all swipe events from Jan 1, 2025 up to now.
 * Returns an array of records with fields:
 *   LocaleMessageTime (Date),
 *   Dateonly (YYYY-MM-DD string),
 *   Swipe_Time (HH:mm:ss string),
 *   EmployeeID (string),
 *   PersonGUID (string),
 *   PersonnelType (string),
 *   CardNumber (string),
 *   AdmitCode (string),
 *   Direction ('InDirection' or 'OutDirection'),
 *   Door (string).
 */
async function fetchHistoricalEvents() {
  const pool = await denver.poolPromise;
  const req  = pool.request();

  // Start from January 1, 2025 at midnight (America/Denver)
  const since = DateTime.fromObject(
    { year: 2025, month: 1, day: 1, hour: 0, minute: 0, second: 0 },
    { zone: 'America/Denver' }
  ).toJSDate();

  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType   = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/**
 * Compute in/out inconsistency metrics:
 *   - Floor-wise: total person-days, inconsistent person-days, percentage
 *   - Employee-wise: total days with any event, inconsistent days, percentage
 *
 * A “person-day” is defined as a unique combination of:
 *   { personId, date, floor }.
 * For each person-day:
 *   - We look for the earliest InDirection swipe and the latest OutDirection swipe.
 *   - If either is missing, we mark that person-day as “inconsistent.”
 *
 * Only events whose (normalized) door + direction key appears in the strictDoorList are used.
 *
 * @param {Array} events – array of swipe-event objects from fetchHistoricalEvents()
 * @returns {Object} {
 *   floorInconsistency: [
 *     { floor, totalPersonDays, inconsistentPersonDays, inconsistencyPercentage }
 *   ],
 *   employeeInconsistency: [
 *     { employeeId, totalDays, inconsistentDays, inconsistencyPercentage }
 *   ]
 * }
 */
function computeInOutInconsistency(events) {
  // Data structures for grouping
  // Key for person-day-floor: `${personId}__${date}__${floor}`
  const groupMap = new Map();

  // For employee-level grouping: key `${personId}__${date}` → { isInconsistent: boolean }
  const empDayMap = new Map();

  // FIRST PASS: Filter & bucket events
  events.forEach(evt => {
    const dateOnly = evt.Dateonly;           // 'YYYY-MM-DD'
    const direction = evt.Direction.trim();   // 'InDirection' or 'OutDirection'
    const rawDoor = evt.Door.trim();
    // 1) strip time suffix
    const doorNoTime = stripTimeSuffix(rawDoor);
    // 2) build normalized key to check if this door+direction is “strict”
    const normKey = normalizeKey(doorNoTime, direction);
    if (!normalizedMonitoredKeys.has(normKey)) return;

    // Determine personId (prefer GUID, fallback to EmployeeID, then CardNumber)
    const personId = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    if (!personId) return; // skip if no identifier

    // Determine floor
    const floor = extractFloor(doorNoTime);

    // Build group key
    const groupKey = `${personId}__${dateOnly}__${floor}`;

    // If not seen yet, initialize:
    if (!groupMap.has(groupKey)) {
      groupMap.set(groupKey, {
        personId,
        dateOnly,
        floor,
        firstInTime: null,   // earliest InDirection (HH:mm:ss)
        lastOutTime: null    // latest OutDirection (HH:mm:ss)
      });
    }

    const bucket = groupMap.get(groupKey);
    const swipeTime = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');

    if (direction === 'InDirection') {
      if (
        !bucket.firstInTime ||
        swipeTime < bucket.firstInTime
      ) {
        bucket.firstInTime = swipeTime;
      }
    } else if (direction === 'OutDirection') {
      if (
        !bucket.lastOutTime ||
        swipeTime > bucket.lastOutTime
      ) {
        bucket.lastOutTime = swipeTime;
      }
    }
  });

  // SECOND PASS: Determine inconsistency per group, and accumulate for floor & employee-day
  // Data structures for aggregation:
  // floor → { totalPersonDays: Number, inconsistentPersonDays: Number }
  const floorAgg = new Map();
  // employeeId → { totalDays: Set<date>, inconsistentDays: Set<date> }
  const empAgg = new Map();

  groupMap.forEach(bucket => {
    const { personId, dateOnly, floor, firstInTime, lastOutTime } = bucket;
    const isInconsistent = !(firstInTime && lastOutTime);

    // 1) Floor-level aggregation
    if (!floorAgg.has(floor)) {
      floorAgg.set(floor, {
        totalPersonDays: 0,
        inconsistentPersonDays: 0
      });
    }
    const fAgg = floorAgg.get(floor);
    fAgg.totalPersonDays += 1;
    if (isInconsistent) {
      fAgg.inconsistentPersonDays += 1;
    }

    // 2) Employee-level aggregation
    // Employee “day” key:
    const empDayKey = `${personId}__${dateOnly}`;
    if (!empAgg.has(personId)) {
      empAgg.set(personId, {
        totalDaysSet: new Set(),
        inconsistentDaysSet: new Set()
      });
    }
    const eAgg = empAgg.get(personId);
    eAgg.totalDaysSet.add(dateOnly);
    if (isInconsistent) {
      eAgg.inconsistentDaysSet.add(dateOnly);
    }
  });

  // BUILD RESULT ARRAYS
  const floorInconsistency = [];
  floorAgg.forEach((vals, floor) => {
    const { totalPersonDays, inconsistentPersonDays } = vals;
    const pct =
      totalPersonDays > 0
        ? (inconsistentPersonDays / totalPersonDays) * 100
        : 0;
    floorInconsistency.push({
      floor,
      totalPersonDays,
      inconsistentPersonDays,
      inconsistencyPercentage: parseFloat(pct.toFixed(2))
    });
  });

  const employeeInconsistency = [];
  empAgg.forEach((vals, personId) => {
    const totalDays = vals.totalDaysSet.size;
    const inconsistentDays = vals.inconsistentDaysSet.size;
    const pct =
      totalDays > 0 ? (inconsistentDays / totalDays) * 100 : 0;
    employeeInconsistency.push({
      employeeId: personId,
      totalDays,
      inconsistentDays,
      inconsistencyPercentage: parseFloat(pct.toFixed(2))
    });
  });

  return {
    asOf: new Date().toISOString(),
    floorInconsistency,
    employeeInconsistency
  };
}

/**
 * Controller endpoint: GET /api/denver/inout-inconsistency
 *
 * Fetches all strict-door swipe events from Jan 1, 2025 to now,
 * computes floor-wise and employee-wise in/out inconsistency trends,
 * and returns a JSON payload.
 */
exports.getDenverInOutInconsistency = async (req, res) => {
  try {
    // Ensure the pool is ready
    await denver.poolPromise;

    // 1) Fetch historical events
    const events = await fetchHistoricalEvents();

    // 2) Compute inconsistency metrics
    const result = computeInOutInconsistency(events);

    // 3) Return JSON response
    res.status(200).json(result);
  } catch (err) {
    console.error('Error computing in/out inconsistency:', err);
    res.status(500).json({
      error: 'Failed to compute in/out inconsistency'
    });
  }
};

