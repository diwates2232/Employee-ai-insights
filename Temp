// src/components/SummaryChart.jsx
import React, { useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// Zone-specific gradients
const ZONE_GRADIENTS = {
  'Red Zone':    ['#A80000', '#FFCCCC'],
  'Yellow zone': ['#B28000', '#FFF2CC'],
  'Orange Zone': ['#C75D00', '#FFE0B2'],
  'Green Zone':  ['#006400', '#CCFFCC'],
};

// Fallback gradients (dark â†’ faint)
const FALLBACK_GRADIENTS = [
  ['#340068','#EAD7FF'],
  ['#005F73','#CAEBF2'],
  ['#9B2226','#FFB3B3'],
  ['#2A9D8F','#B8FFF9'],
  ['#264653','#A0B5D8']
];

export default function SummaryChart({ summary = [] }) {
  useEffect(() => {
    console.log('Summary Chart Data:', summary);
  }, [summary]);

  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Zone-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={summary}
            margin={{ top: 20, right: 30, left: 0, bottom: 5 }}
          >
            {/* Gradient definitions */}
            <defs>
              {summary.map((entry, idx) => {
                const [dark, faint] = ZONE_GRADIENTS[entry.zone] || FALLBACK_GRADIENTS[idx % FALLBACK_GRADIENTS.length];
                return (
                  <linearGradient id={`grad-${idx}`} key={idx} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={dark} stopOpacity={1}/>
                    <stop offset="100%" stopColor={faint} stopOpacity={1}/>
                  </linearGradient>
                );
              })}
            </defs>

            <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
            <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#333' }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#333' }} />
            <Tooltip />
            <Legend
              verticalAlign="bottom"
              wrapperStyle={{ paddingTop: 10 }}
              formatter={(value) => <span style={{ color: '#FFD100', fontWeight: 'bold' }}>{value}</span>}
            />

            <Bar dataKey="count" name="Count" radius={[6, 6, 0, 0]}>
              {summary.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={`url(#grad-${idx})`}
                  stroke="#fff"
                  strokeWidth={1}
                />
              ))}
              <LabelList
                dataKey="count"
                position="top"
                style={{
                  fontSize: 12,
                  fontWeight: 'bold',
                  fill: '#000',
                }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}








// src/components/SummaryChart.jsx
import React, { useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// Specific zone gradients (dark, faint)
const ZONE_GRADIENTS = {
  'Red Zone':    ['#A80000', '#FFCCCC'],
  'Yellow zone': ['#B28000', '#FFF2CC'],
  'Orange Zone': ['#C75D00', '#FFE0B2'],
  'Green Zone':  ['#006400', '#CCFFCC'],
};

// Five attractive fallback gradients
const FALLBACK_GRADIENTS = [
  ['#340068','#EAD7FF'],
  ['#005F73','#CAEBF2'],
  ['#9B2226','#FFB3B3'],
  ['#2A9D8F','#B8FFF9'],
  ['#264653','#A0B5D8']
];

export default function SummaryChart({ summary = [] }) {
  useEffect(() => {
    console.log('Summary Chart Data:', summary);
  }, [summary]);

  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Zone-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={summary}
            margin={{ top: 20, right: 30, left: 0, bottom: 5 }}
          >
            {/* define gradients */}
            <defs>
              {summary.map((entry, idx) => {
                const grad = ZONE_GRADIENTS[entry.zone]
                  || FALLBACK_GRADIENTS[idx % FALLBACK_GRADIENTS.length];
                return (
                  <linearGradient id={`grad-${idx}`} key={idx} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={grad[0]} stopOpacity={1}/>
                    <stop offset="100%" stopColor={grad[1]} stopOpacity={1}/>
                  </linearGradient>
                );
              })}
            </defs>

            <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
            <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#333' }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#333' }} />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />

            <Bar dataKey="count" name="Count" radius={[6, 6, 0, 0]}>
              {summary.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={`url(#grad-${idx})`}
                  stroke="#fff"
                  strokeWidth={1}
                />
              ))}
              <LabelList
                dataKey="count"
                position="top"
                // label fill matches the dark shade of each bar
                style={(entry) => {
                  const grad = ZONE_GRADIENTS[entry.payload.zone]
                    || FALLBACK_GRADIENTS[summary.indexOf(entry.payload) % FALLBACK_GRADIENTS.length];
                  return { fill: grad[0], fontSize: 12, fontWeight: 'bold' };
                }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}













// src/components/SummaryChart.jsx
import React, { useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// Define top (dark) and bottom (faint) colors for key zones
const ZONE_GRADIENTS = {
  'Red Zone':       ['#A80000', '#FFCCCC'],
  'Yellow zone':    ['#B28000', '#FFF2CC'],
  'Orange Zone':    ['#C75D00', '#FFE0B2'],
  'Green Zone':     ['#006400', '#CCFFCC'],
};

// fallback solid color if zone not in map
const FALLBACK_COLOR = '#B0B0B0';

export default function SummaryChart({ summary = [] }) {
  useEffect(() => {
    console.log('Summary Chart Data:', summary);
  }, [summary]);

  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Zone-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={summary}
            margin={{ top: 20, right: 30, left: 0, bottom: 5 }}
          >
            {/* Define one gradient per bar */}
            <defs>
              {summary.map((entry, idx) => {
                const [dark, faint] = ZONE_GRADIENTS[entry.zone] || [FALLBACK_COLOR, FALLBACK_COLOR];
                return (
                  <linearGradient id={`grad-${idx}`} key={idx} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={dark} stopOpacity={1}/>
                    <stop offset="100%" stopColor={faint} stopOpacity={1}/>
                  </linearGradient>
                );
              })}
            </defs>

            <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
            <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#333' }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#333' }} />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />

            <Bar dataKey="count" name="Count" radius={[6, 6, 0, 0]}>
              {summary.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={`url(#grad-${idx})`}
                  stroke="#fff"
                  strokeWidth={1}
                />
              ))}
              <LabelList
                dataKey="count"
                position="top"
                style={{ fill: '#000', fontSize: 12, fontWeight: 'bold' }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}














import React, { useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

// Simple palette to pick from
const ZONE_COLORS = [
  '#FFB300', // Amber
  '#0D47A1', // Dark Blue
  '#2E7D32', // Dark Green
  '#C62828', // Dark Red
  '#6A1B9A', // Purple
  '#FF6F00', // Orange
];

export default function SummaryChart({ summary = [] }) {
  useEffect(() => {
    console.log('Summary Chart Data:', summary);
  }, [summary]);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Zone-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400 }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={summary}
            margin={{ top: 20, right: 30, left: 0, bottom: 5 }}
          >
            <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
            <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#333' }} />
            <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#333' }} />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
            <Bar
              dataKey="count"
              name="Count"
              radius={[6, 6, 0, 0]}
            >
              {summary.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={ZONE_COLORS[idx % ZONE_COLORS.length]}
                  stroke="#fff"
                  strokeWidth={1}
                />
              ))}
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
);
}










  import React, { useEffect } from 'react';
  import {
    BarChart,
    Bar,
    XAxis,
    YAxis,
    Tooltip,
    CartesianGrid,
    ResponsiveContainer,
    Legend
  } from 'recharts';
  import { Card } from 'react-bootstrap';

  export default function SummaryChart({ summary = [] }) {
    useEffect(() => {
      console.log('Summary Chart Data:', summary);
    }, [summary]);

    return (
      <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
        <Card.Header className="bg-dark text-warning text-center">
          Zone-wise Occupancy
        </Card.Header>
        <Card.Body style={{ height: 400 }}>
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={summary} margin={{ top: 20, right: 30, left: 0, bottom: 5 }}>
              <defs>
                <linearGradient id="zoneGradient" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#FFD100" stopOpacity={0.8}/>
                  <stop offset="95%" stopColor="#FFB800" stopOpacity={0.2}/>
                </linearGradient>
              </defs>
              <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#333' }}/>
              <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#333' }}/>
              <Tooltip />
              <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
              <Bar
                dataKey="count"
                name="Count"
                fill="url(#zoneGradient)"
                radius={[6,6,0,0]}
              />
            </BarChart>
          </ResponsiveContainer>
        </Card.Body>
      </Card>
    );
  }
