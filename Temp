

const { DateTime } = require('luxon');
const { denver } = require('../config/siteConfig');
const doorFloorMap = require('../data/denverDoorFloorMap');
const sql = require('mssql');

const warnedKeys = new Set();

function normalizeDoorKey(rawDoorName, rawDirection) {
  const base = rawDoorName
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase()
    .replace(/-IN$/i, '')
    .replace(/-OUT$/i, '');
  const dir = rawDirection.toUpperCase().includes('IN') ? 'IN' : 'OUT';
  return `${base}___${dir}`;
}

function mapDoorToFloor(rawDoorName, rawDirection) {
  const key = normalizeDoorKey(rawDoorName, rawDirection);
  if (doorFloorMap[key]) return doorFloorMap[key];

  const baseMatch = key.match(/\b(\d{1,2})\./);
  if (baseMatch) return `Floor ${baseMatch[1]}`;

  if (!warnedKeys.has(key)) {
    console.warn(`â›” Unmapped door-floor key: "${key}" (raw "${rawDoorName}", dir "${rawDirection}")`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
             THEN t2.Text12
             ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= DATEADD(SECOND, -1, @since)
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8), LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

async function fetchTotalVisitedToday() {
  const pool = await denver.pool.connect();
  const req = pool.request();
  const start = new Date(); start.setHours(0, 0, 0, 0);
  req.input('start', sql.DateTime2, start);

  const { recordset } = await req.query(`
    WITH DailyVisits AS (
      SELECT DISTINCT ObjectIdentity1
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog
      WHERE
        MessageType = 'CardAdmitted'
        AND ObjectName2 LIKE '%HQ%'
        AND ObjectIdentity1 IS NOT NULL
        AND DATEADD(MINUTE, -1 * MessageLocaleOffset, MessageUTC) >= DATEADD(SECOND, -1, @start)
    )
    SELECT COUNT(*) AS totalVisitedToday FROM DailyVisits;
  `);

  return recordset[0]?.totalVisitedToday || 0;
}

async function fetchVisitedTodayBreakdown() {
  const pool = await denver.pool.connect();
  const req = pool.request();
  const start = new Date(); start.setHours(0, 0, 0, 0);
  req.input('start', sql.DateTime2, start);

  const { recordset } = await req.query(`
    WITH Combined AS (
      SELECT
        ObjectIdentity1,
        CASE WHEN pt.Name IN ('Contractor','Terminated Contractor') THEN 'Contractor'
             ELSE 'Employee' END AS bucket,
        DATEADD(MINUTE, -1 * MessageLocaleOffset, MessageUTC) AS dt
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel p ON t1.ObjectIdentity1 = p.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType pt ON p.PersonnelTypeId = pt.ObjectID
      WHERE
        MessageType = 'CardAdmitted'
        AND ObjectName2 LIKE '%HQ%'
        AND ObjectIdentity1 IS NOT NULL
        AND DATEADD(MINUTE, -1 * MessageLocaleOffset, MessageUTC) >= DATEADD(SECOND, -1, @start)
    ), Ranked AS (
      SELECT *, ROW_NUMBER() OVER (PARTITION BY ObjectIdentity1 ORDER BY dt DESC) AS rn
      FROM Combined
    )
    SELECT bucket, COUNT(*) AS cnt
    FROM Ranked
    WHERE rn = 1
    GROUP BY bucket;
  `);

  const breakdown = { employees: 0, contractors: 0 };
  recordset.forEach(({ bucket, cnt }) => {
    if (bucket === 'Employee') breakdown.employees = cnt;
    if (bucket === 'Contractor') breakdown.contractors = cnt;
  });
  breakdown.total = breakdown.employees + breakdown.contractors;
  return breakdown;
}

function isTodayInDenver(dateStr) {
  const swipeDate = DateTime.fromISO(dateStr, { zone: 'America/Denver' }).toFormat('yyyy-LL-dd');
  const today = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

function buildOccupancyForToday(allEvents) {
  const filtered = allEvents.filter(evt => isTodayInDenver(evt.Dateonly));

  const deduped = new Map();
  filtered.forEach(evt => {
    const existing = deduped.get(evt.PersonGUID);
    const evtTime = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    const existingTime = existing ? DateTime.fromFormat(existing.Swipe_Time, 'HH:mm:ss') : null;
    if (!existing || evtTime > existingTime) {
      deduped.set(evt.PersonGUID, evt);
    }
  });

  const final = Array.from(deduped.values());
  const floorMap = {};
  let employees = 0, contractors = 0;

  final.forEach(evt => {
    const floor = mapDoorToFloor(evt.Door, evt.Direction);
    if (!floorMap[floor]) floorMap[floor] = [];
    floorMap[floor].push(evt);

    const type = evt.PersonnelType;
    if (type === 'Employee' || type === 'Terminated Personnel') employees++;
    else contractors++;
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total: occupants.length,
    occupants
  }));

  return {
    asOf: new Date().toISOString(),
    currentCount: final.length,
    floorBreakdown,
    personnelSummary: { employees, contractors },
    personnelBreakdown: [
      { personnelType: 'Employee', count: employees },
      { personnelType: 'Contractor', count: contractors }
    ],
    totalVisitedToday: final.length,
    visitedToday: {
      employees,
      contractors,
      total: final.length
    }
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    const payload = buildOccupancyForToday(events);
    payload.totalVisitedToday = await fetchTotalVisitedToday();
    payload.visitedToday = await fetchVisitedTodayBreakdown();

    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};

