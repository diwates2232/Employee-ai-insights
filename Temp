const { denver } = require('../config/siteConfig');
// …
async function fetchNewEvents(…) {
  const pool = await denver.poolPromise;
  const req  = pool.request();
  // …
}




p




// config/db.js

const sql    = require('mssql');
const dotenv = require('dotenv');
dotenv.config();

const config = {
  server:   process.env.DB_SERVER,
  user:     process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  connectionTimeout: 30000,    // 30 s to establish connection
  requestTimeout:    0,        // 0 = no timeout on queries
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000   // 30 s before a connection is reaped
  },
  options: {
    encrypt:               true,
    trustServerCertificate: true
  }
};

let poolPromise = null;

/**
 * Get (and if needed, establish) the MSSQL connection pool for Pune.
 * Retries up to `attempts` times on failure.
 */
async function getPool(attempts = 3) {
  if (poolPromise) {
    return poolPromise;
  }

  poolPromise = (async () => {
    try {
      const pool = await sql.connect(config);
      console.log('✅ MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('❌ MSSQL pool connection failed:', err);
      poolPromise = null;  // reset so next call can retry
      if (attempts > 0) {
        console.log(`⏳ Retrying MSSQL connect (${attempts} left)…`);
        await new Promise(res => setTimeout(res, 3000));
        return getPool(attempts - 1);
      }
      throw err;
    }
  })();

  // Global listener for any error on the pooled driver
  sql.on('error', err => {
    console.error('❌ MSSQL global error:', err);
  });

  return poolPromise;
}

// Keep-alive ping every 5 minutes so connections never go idle
setInterval(async () => {
  try {
    const pool = await getPool();
    await pool.request().query('SELECT 1');
    // console.log('🔄 MSSQL keep-alive ping succeeded');
  } catch (err) {
    console.error('⚠️ MSSQL keep-alive failed, resetting pool:', err);
    poolPromise = null;  // force reconnect on next call
  }
}, 5 * 60 * 1000);

module.exports = { sql, getPool };








// config/siteConfig.js

const { sql, getPool } = require('./db');

// Pune uses the shared getPool():
const punePoolPromise = getPool();

// ———————————————————————————————————————————————————————————————————————————
// Denver pool configuration:

const denverConfig = {
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  connectionTimeout: 30000,   // ↑ increased from 3000 ms to 30000 ms (30 s)
  requestTimeout:    0,       // no timeout on each request
  pool: {
    max:               5,
    min:               0,
    idleTimeoutMillis: 30000, // ↑ increased so Denver connections are not reaped too aggressively
  },
  options: {
    encrypt:               true,
    trustServerCertificate: true
  }
};

let denverPoolPromise = null;

/**
 * Get (and if needed, establish) the Denver MSSQL connection pool.
 * Retries up to `attempts` times on failure.
 */
async function getDenverPool(attempts = 3) {
  if (denverPoolPromise) return denverPoolPromise;

  denverPoolPromise = (async () => {
    // Create a fresh pool instance each time we need to reconnect
    const pool = new sql.ConnectionPool(denverConfig);

    // If this pool ever throws an async error, log it and reset so we can rebuild next time
    pool.on('error', err => {
      console.error('❌ Denver MSSQL pool error:', err);
      denverPoolPromise = null;
    });

    try {
      await pool.connect();
      console.log('✅ Denver MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('❌ Denver pool connection failed:', err);
      denverPoolPromise = null;
      if (attempts > 0) {
        console.log(`⏳ Retrying Denver pool connect (${attempts} left)…`);
        await new Promise(res => setTimeout(res, 3000));
        return getDenverPool(attempts - 1);
      }
      throw err;
    }
  })();

  return denverPoolPromise;
}

// Keep-alive ping for Denver every 5 minutes as well
setInterval(async () => {
  try {
    const pool = await getDenverPool();
    await pool.request().query('SELECT 1');
    // console.log('🔄 Denver keep-alive ping succeeded');
  } catch (err) {
    console.error('⚠️ Denver keep-alive failed, resetting pool:', err);
    denverPoolPromise = null;
  }
}, 5 * 60 * 1000);

module.exports = {
  pune: {
    name:        'Pune',
    poolPromise: punePoolPromise,
    sql
  },
  denver: {
    name:        'Denver',
    poolPromise: getDenverPool(),  // immediately start connecting (with retries)
    sql
  }
};













Read below file carefully and Silve the issue ,
also we are getting many time same issue , i want never disconnect this pool.


Server running at http://localhost:5000
✅ MSSQL pool connected
✅ Denver MSSQL pool connected
❌ Denver MSSQL pool error: ConnectionError: Failed to connect to SRVWUDEN0891V:1433 in 3000ms
    at C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\mssql\lib\tedious\connection-pool.js:85:17
    at Connection.onConnect (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:849:9)
    at Object.onceWrapper (node:events:633:26)
    at Connection.emit (node:events:518:28)
    at Connection.emit (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:970:18)
    at Connection.connectTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1222:10)
    at Timeout._onTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1167:12)
    at listOnTimeout (node:internal/timers:588:17)
    at process.processTimers (node:internal/timers:523:7) {
  code: 'ETIMEOUT',
  originalError: ConnectionError: Failed to connect to SRVWUDEN0891V:1433 in 3000ms
      at Connection.connectTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1222:26)
      at Timeout._onTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1167:12)
      at listOnTimeout (node:internal/timers:588:17)
      at process.processTimers (node:internal/timers:523:7) {
    code: 'ETIMEOUT'
  }
}
node:internal/process/promises:394
    triggerUncaughtException(err, true /* fromPromise */);
    ^

ConnectionError: Failed to connect to SRVWUDEN0891V:1433 in 3000ms
    at C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\mssql\lib\tedious\connection-pool.js:85:17
    at Connection.onConnect (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:849:9)
    at Object.onceWrapper (node:events:633:26)
    at Connection.emit (node:events:518:28)
    at Connection.emit (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:970:18)
    at Connection.connectTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1222:10)
    at Timeout._onTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1167:12)
    at listOnTimeout (node:internal/timers:588:17)
    at process.processTimers (node:internal/timers:523:7) {
  code: 'ETIMEOUT',
  originalError: ConnectionError: Failed to connect to SRVWUDEN0891V:1433 in 3000ms
      at Connection.connectTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1222:26)
      at Timeout._onTimeout (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\node_modules\tedious\lib\connection.js:1167:12)
      at listOnTimeout (node:internal/timers:588:17)
      at process.processTimers (node:internal/timers:523:7) {
    code: 'ETIMEOUT'
  }
}

Node.js v22.15.0
PS C:\Users\W0024618\Desktop\swi




// config/db.js

const sql    = require('mssql');
const dotenv = require('dotenv');
dotenv.config();

const config = {
  server:   process.env.DB_SERVER,
  user:     process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  connectionTimeout: 30000,    // 30s to establish
  requestTimeout:    0,        // no timeout on queries
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  },
  options: {
    encrypt:               true,
    trustServerCertificate: true
  }
};

let poolPromise = null;

/**
 * Get (and if needed, establish) the MSSQL connection pool.
 * Retries up to `attempts` times on failure.
 */
async function getPool(attempts = 3) {
  if (poolPromise) {
    return poolPromise;
  }

  poolPromise = (async () => {
    try {
      const pool = await sql.connect(config);
      console.log('✅ MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('❌ MSSQL pool connection failed:', err);
      poolPromise = null;  // reset for retry
      if (attempts > 0) {
        console.log(`⏳ Retrying MSSQL connect (${attempts} left)…`);
        await new Promise(res => setTimeout(res, 3000));
        return getPool(attempts - 1);
      }
      throw err;
    }
  })();

  // Listen for async errors on the pool
  sql.on('error', err => {
    console.error('❌ MSSQL global error:', err);
  });

  return poolPromise;
}

// Keep‐alive ping to prevent idle timeouts
setInterval(async () => {
  try {
    const pool = await getPool();
    await pool.request().query('SELECT 1');
    // console.log('🔄 MSSQL keep‐alive ping');
  } catch (err) {
    console.error('⚠️ MSSQL keep‐alive failed, resetting pool:', err);
    poolPromise = null;  // force reconnect on next use
  }
}, 5 * 60 * 1000); // every 5 minutes

module.exports = { sql, getPool };






// config/siteConfig.js

const { sql, getPool } = require('./db');

// Pune uses the shared getPool():
const punePoolPromise = getPool();

// Denver pool factory
const denverConfig = {
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt:               true,
    trustServerCertificate: true
  },
  pool: {
    max: 5,
    min: 0,
    idleTimeoutMillis: 3000
  },
  connectionTimeout: 3000,
  requestTimeout:    0
};

let denverPoolPromise = null;
async function getDenverPool(attempts = 3) {
  if (denverPoolPromise) return denverPoolPromise;

  denverPoolPromise = (async () => {
    const pool = new sql.ConnectionPool(denverConfig);

    // Attach error listener to this pool instance
    pool.on('error', err => {
      console.error('❌ Denver MSSQL pool error:', err);
      // Reset so that next request will recreate it
      denverPoolPromise = null;
    });

    try {
      await pool.connect();
      console.log('✅ Denver MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('❌ Denver pool connection failed:', err);
      denverPoolPromise = null;
      if (attempts > 0) {
        console.log(`⏳ Retrying Denver pool connect (${attempts} left)…`);
        await new Promise(res => setTimeout(res, 3000));
        return getDenverPool(attempts - 1);
      }
      throw err;
    }
  })();

  return denverPoolPromise;
}

// Optional keep‐alive for Denver
setInterval(async () => {
  try {
    const pool = await getDenverPool();
    await pool.request().query('SELECT 1');
    // console.log('🔄 Denver keep‐alive ping');
  } catch (err) {
    console.error('⚠️ Denver keep‐alive failed:', err);
    denverPoolPromise = null;
  }
}, 5 * 60 * 1000);

module.exports = {
  pune: {
    name:        'Pune',
    poolPromise: punePoolPromise,
    sql
  },
  denver: {
    name:        'Denver',
    poolPromise: getDenverPool(),
    sql
  }
};





.env

DB_SERVER=SRVWUPNQ0986V
DB_USER=GSOC_Test
DB_PASSWORD=Westernuniongsoc@2025
DB_DATABASE=ACVSUJournal_00010020
PORT=5000





