// src/components/ZoneDetailsTable.jsx

import React, { useState, useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  // 3) Handler for search input
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      {/* Back to Dashboard and Search input, side by side */}
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: '1rem'
        }}
      >
        <a
          href="/"
          style={{
            color: '#FFD100',
            fontSize: '1rem',
            textDecoration: 'none',
            fontWeight: 'bold'
          }}
        >
          ‚Üê Back to Dashboard
        </a>

        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={handleSearchChange}
          style={{
            padding: '0.4rem 0.8rem',
            fontSize: '0.9rem',
            borderRadius: 4,
            border: '1px solid #ccc',
            maxWidth: 250
          }}
        />
      </div>

      {sortedEntries.map(([zone, emps]) => {
        // 4) Filter employees by search
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}





Now only change the position of serch employee section,Now back to dashboard button and search button look like Vertical i want horizontal

// src/components/ZoneDetailsTable.jsx

import React, { useState, useMemo } from 'react';
import './ZoneDetailsTable.css';

export default function ZoneDetailsTable({ data = {} }) {
  const [searchTerm, setSearchTerm] = useState('');

  // 1) Sort zones by descending count
  const sortedEntries = useMemo(() => {
    return Object.entries(data).sort(([, aList], [, bList]) => bList.length - aList.length);
  }, [data]);

  // 2) Filter predicate
  const matchesSearch = (emp) =>
    emp.ObjectName1.toLowerCase().includes(searchTerm.trim().toLowerCase());

  // 3) Handler for search input
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  if (!sortedEntries.length) {
    return <p>No zone detail data available.</p>;
  }

  return (
    <div className="zone-cards">
      {/* Search input (optional reuse) */}
      <div style={{ marginBottom: '1rem', textAlign: 'right' }}>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={handleSearchChange}
          style={{
            padding: '0.4rem 0.8rem',
            fontSize: '0.9rem',
            borderRadius: 4,
            border: '1px solid #ccc'
          }}
        />
      </div>

      {sortedEntries.map(([zone, emps]) => {
        // 4) Filter employees by search
        const filteredEmps = emps.filter(matchesSearch);
        if (filteredEmps.length === 0) {
          return null;
        }

        return (
          <div key={zone} className="zone-card">
            <div className="zone-header">
              <h3>{zone}</h3>
              <span className="zone-badge">Total: {filteredEmps.length}</span>
            </div>

            <table className="zone-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Type</th>
                  <th>Door Name</th>
                </tr>
              </thead>
              <tbody>
                {filteredEmps.map((emp, i) => (
                  <tr key={`${emp.EmployeeID}-${i}`}>
                    <td>{emp.ObjectName1}</td>
                    <td>{emp.Swipe_Time}</td>
                    <td>{emp.PersonnelType}</td>
                    <td>{emp.door}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        );
      })}
    </div>
  );
}

