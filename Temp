// controllers/liveOccupancyController.js

const { DateTime }   = require('luxon');
const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();

/** Normalize the raw door + direction into your map’s key format */
function normalizeZoneKey(rawDoor, rawDir) {
  const base = String(rawDoor || '')
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${base}___${dir}`;
}

/**
 * Map a swipe’s door+direction → zone.
 * 1) explicit lookup
 * 2) auto-extract for Pune doors
 * 3) “Out of office” returns null (true eviction)
 * 4) any other OutDirection is ignored (i.e. returns the same zone as InDirection)
 * 5) warn & fallback “Unknown Zone”
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  let zone = doorZoneMap[key];

  // 1) eviction marker
  if (zone === 'Out of office') {
    return null;           // true eviction, never show
  }

  // 2) auto-extract if unmapped and Pune door
  if (!zone && String(rawDoor||'').toUpperCase().startsWith('APAC_IN_PUN_')) {
    const rest  = rawDoor.toUpperCase().slice('APAC_IN_PUN_'.length);
    const paren = rest.match(/\(([^)]+)\)/);
    if (paren) {
      zone = paren[1].toUpperCase() === paren[1]
        ? `${paren[1]} ZONE`
        : `${paren[1][0].toUpperCase() + paren[1].slice(1).toLowerCase()} Zone`;
    } else {
      const parts = rest.split(/[\s_]+/).filter(Boolean);
      const maybeZone = parts[1] || parts[0];
      if (maybeZone) {
        if (/RECEPTION/.test(maybeZone)) {
          zone = 'Reception Area';
        } else {
          const z = maybeZone[0].toUpperCase() + maybeZone.slice(1).toLowerCase();
          zone = z.includes('Zone') ? z : `${z} Zone`;
        }
      }
    }
  }

  // 3) still no zone?
  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door-zone key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // 4) for OutDirection *non-eviction*, return exactly the same zone
  //    (i.e. never convert to an “- Outer” variant)
  return zone;
}


/** Fetch all swipe events since `since` (UTC) */
async function fetchNewEvents(since) {
  await poolConnect;
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    /* … your existing SQL … */
  `);
  return recordset;
}


/** Build the live-occupancy snapshot from allEvents */
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToZone(Door, Direction);

    // true “Out of office” eviction
    if (Direction === 'OutDirection' && zone === null) {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    // on both InDirection and other OutDirection, we keep the person
    uniquePeople.set(dedupKey, PersonnelType);
    current[dedupKey] = {
      Dateonly, Swipe_Time,
      EmployeeID, ObjectName1, CardNumber,
      PersonnelType, zone,
      door: Door, Direction
    };
  }

  // live headcounts
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // group by zone
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    // skip true evictions
    if (!emp.zone) continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([z, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ z, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // roll up floors
  const floorMap = {};
  for (const [z,d] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[z] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += d.total;
    for (const [pt,c] of Object.entries(d.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] =
        (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }

  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown:[
      { personnelType:'Employee',   count: employeeCount   },
      { personnelType:'Contractor', count: contractorCount }
    ]
  };
}

// … buildVisitedToday + getLiveOccupancy remain unchanged …














// controllers/liveOccupancyController.js

const { DateTime }   = require('luxon');
const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();

/** Normalize raw door+direction into map key */
function normalizeZoneKey(rawDoor, rawDir) {
  const base = String(rawDoor || '')
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${base}___${dir}`;
}

/**
 * Map a swipe’s door+direction → zone (or null for true “Out of office”).
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  let zone = doorZoneMap[key];

  // if the explicit map says “Out of office”, we bail out here **without** returning it
  if (zone === 'Out of office') {
    return null;
  }

  // auto‐extract for Pune doors when no explicit map
  if (!zone && String(rawDoor||'').toUpperCase().startsWith('APAC_IN_PUN_')) {
    const rest  = rawDoor.toUpperCase().slice('APAC_IN_PUN_'.length);
    const paren = rest.match(/\(([^)]+)\)/);
    if (paren) {
      zone = paren[1].toUpperCase() === paren[1]
        ? `${paren[1]} ZONE`
        : `${paren[1][0].toUpperCase() + paren[1].slice(1).toLowerCase()} Zone`;
    } else {
      const parts = rest.split(/[\s_]+/).filter(Boolean);
      const maybeZone = parts[1] || parts[0];
      if (maybeZone) {
        if (/RECEPTION/.test(maybeZone)) {
          zone = 'Reception Area';
        } else {
          const z = maybeZone[0].toUpperCase() + maybeZone.slice(1).toLowerCase();
          zone = z.includes('Zone') ? z : `${z} Zone`;
        }
      }
    }
  }

  // still no zone? warn once & fallback to “Unknown Zone”
  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door-zone key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // for any OutDirection into a real zone, mark it “- Outer”
  if (rawDir === 'OutDirection') {
    const base = zone.replace(/\s+Zone$/i, '');
    return `${base} - Outer`;
  }

  return zone;
}


/** Fetch all swipe events since `since` (UTC) */
async function fetchNewEvents(since) {
  await poolConnect;
  const req = pool.request();
  req.input('since', sql.DateTime2, since);
  const { recordset } = await req.query(`
    /* … your existing SQL … */
  `);
  return recordset;
}


/** Build the live‐occupancy snapshot from allEvents */
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToZone(Door, Direction);

    // if mapDoorToZone returned null, it was a true “Out of office” → evict
    if (Direction === 'OutDirection' && zone === null) {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    // now handle all other swipes (In or Out→Outer)
    uniquePeople.set(dedupKey, PersonnelType);
    current[dedupKey] = {
      Dateonly, Swipe_Time,
      EmployeeID, ObjectName1, CardNumber,
      PersonnelType, zone,
      door: Door, Direction
    };
  }

  // live headcounts
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // aggregate by zone
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    // skip any truly “Out of office” entries (zone was null)
    if (!emp.zone) continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([z, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ z, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // roll up into floors
  const floorMap = {};
  for (const [z,d] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[z] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += d.total;
    for (const [pt,c] of Object.entries(d.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] =
        (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }

  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown:[
      { personnelType:'Employee',   count: employeeCount   },
      { personnelType:'Contractor', count: contractorCount }
    ]
  };
}

// … buildVisitedToday + getLiveOccupancy stay exactly the same …
















// controllers/liveOccupancyController.js

const { DateTime }   = require('luxon');
const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();


/** Normalize the raw door + direction into your map’s key format */
function normalizeZoneKey(rawDoor, rawDir) {
  const base = String(rawDoor || '')
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${base}___${dir}`;
}

/**
 * Map a swipe’s door+direction → zone.
 * 1) explicit lookup
 * 2) auto‐extract for APAC_IN_PUN_*
 * 3) OutDirection → “Outer” suffix (unless “Out of office”)
 * 4) warn & fallback
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key  = normalizeZoneKey(rawDoor, rawDir);
  let zone   = doorZoneMap[key];

  // auto‐extract for Pune (if no explicit map)
  if (!zone && String(rawDoor||'').toUpperCase().startsWith('APAC_IN_PUN_')) {
    const rest  = rawDoor.toUpperCase().slice('APAC_IN_PUN_'.length);
    const paren = rest.match(/\(([^)]+)\)/);
    if (paren) {
      zone = paren[1].toUpperCase() === paren[1]
        ? `${paren[1]} ZONE`
        : `${paren[1][0].toUpperCase() + paren[1].slice(1).toLowerCase()} Zone`;
    } else {
      const parts = rest.split(/[\s_]+/).filter(Boolean);
      const maybeZone = parts[1] || parts[0];
      if (maybeZone) {
        if (/RECEPTION/.test(maybeZone)) {
          zone = 'Reception Area';
        } else {
          const z = maybeZone[0].toUpperCase() + maybeZone.slice(1).toLowerCase();
          zone = z.includes('Zone') ? z : `${z} Zone`;
        }
      }
    }
  }

  // still no zone → warn + fallback
  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door-zone key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // if OutDirection into any zone except “Out of office” → mark as Outer
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    const base = zone.replace(/\s+Zone$/i, '');
    return `${base} - Outer`;
  }

  return zone;
}


/** Fetch all swipe events since `since` (UTC) */
async function fetchNewEvents(since) {
  await poolConnect;
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      /* …your existing SQL… */
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}


/** Build the live‐occupancy snapshot from allEvents */
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToZone(Door, Direction);

    if (Direction === 'OutDirection') {
      if (zone === 'Out of office') {
        // True exit → remove from occupancy
        uniquePeople.delete(dedupKey);
        delete current[dedupKey];
        continue;
      } else {
        // Zone transfer → keep them in the map under the new Outer zone
        uniquePeople.set(dedupKey, PersonnelType);
        current[dedupKey] = {
          Dateonly, Swipe_Time,
          EmployeeID, ObjectName1, CardNumber,
          PersonnelType, zone,
          door: Door, Direction
        };
        continue;
      }
    }

    // InDirection → normal entry / update
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType, zone,
        door: Door, Direction
      };
    }
  }

  // live headcounts
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // zone & floor aggregates
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([z, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ z, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  const floorMap = {};
  for (const [z,d] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[z] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += d.total;
    for (const [pt,c] of Object.entries(d.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] =
        (floorMap[floor].byPersonnelType[pt] || 0) + c;
    }
  }

  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown:[
      { personnelType:'Employee',   count: employeeCount   },
      { personnelType:'Contractor', count: contractorCount }
    ]
  };
}

// … rest of your file (buildVisitedToday + getLiveOccupancy) remains unchanged …

















// controllers/liveOccupancyController.js

const { DateTime }   = require('luxon');
const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();




/** Normalize the raw door + direction into your map’s key format */
function normalizeZoneKey(rawDoor, rawDir) {
  const base = String(rawDoor || '')
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${base}___${dir}`;
}

/**
 * Map a swipe’s door+direction → zone.
 *
 * 1) Try explicit doorZoneMap lookup
 * 2) If APAC_IN_PUN_*: extract parenthesized or underscore-split zone
 * 3) If OutDirection on any recognized zone (but not "Out of office"), map to the "– Outer" variant
 * 4) Warn once & return Unknown Zone
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  // 1) explicit lookup
  let zone = doorZoneMap[key];

  // if(rawDoor.match('APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR')){
  //   console.log('*****************');
  //      console.log(key);
  //      console.log(zone);
  //       console.log('####');
  // }

  // 2) auto-extract for Pune doors
  if (!zone && String(rawDoor || '').toUpperCase().startsWith('APAC_IN_PUN_')) {
    const rest  = rawDoor.toUpperCase().slice('APAC_IN_PUN_'.length);
    const paren = rest.match(/\(([^)]+)\)/);
    if (paren) {
      // e.g. "(RED)" → "RED ZONE"
      zone = paren[1].toUpperCase() === paren[1]
        ? `${paren[1]} ZONE`
        : `${paren[1][0].toUpperCase() + paren[1].slice(1).toLowerCase()} Zone`;
    } else {
      // otherwise pick the second underscore-delimited token as zone
      const parts = rest.split(/[\s_]+/).filter(Boolean);
      const maybeZone = parts[1] || parts[0];
      if (maybeZone) {
        if (/RECEPTION/.test(maybeZone)) {
          zone = 'Reception Area';
        } else {
          const z = maybeZone[0].toUpperCase() + maybeZone.slice(1).toLowerCase();
          zone = z.includes('Zone') ? z : `${z} Zone`;
        }
      }
    }
  }
  // if(rawDoor.match('APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR')){
  //   console.log('*****************');
  //      console.log(zone);
  //       console.log('####');
  // }

  // 4) still no zone? warn & fallback
  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door-zone key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // 3) if OutDirection (not real eviction) → Outer variant
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    const base = zone.replace(/\s+Zone$/i, '');
    return `${base} - Outer`;
  }

  return zone;
}




/** Fetch all swipe events since `since` (UTC) */
async function fetchNewEvents(since) {
  await poolConnect;
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}


/** Build the live‐occupancy snapshot from allEvents */
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToZone(Door, Direction);





    // “Out of office” actually evicts
    if (Direction === 'OutDirection' && zone === 'Out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }


    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);

      current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, zone, door:Door,Direction };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }


  // live headcounts
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // zone & floor aggregates
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([z, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ z, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  const floorMap = {};
  for (const [z,d] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[z] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += d.total;
    for (const [pt,c] of Object.entries(d.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }

  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown:[
      { personnelType:'Employee',   count: employeeCount   },
      { personnelType:'Contractor', count: contractorCount }
    ]
  };
}

/** Build “visited today” from the same in‐memory stream */
function buildVisitedToday(allEvents) {
  // IST “today” string
  const today = DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

  // only today's InDirection swipes
  const todayIns = allEvents.filter(evt => {
    if (evt.Direction !== 'InDirection' || !evt.LocaleMessageTime) return false;
    const swipeDate = DateTime
      .fromJSDate(evt.LocaleMessageTime, { zone:'Asia/Kolkata' })
      .toFormat('yyyy-LL-dd');
    return swipeDate === today;
  });

  // dedupe by PersonGUID → keep latest
  const dedup = new Map();
  for (const e of todayIns) {
    const prev = dedup.get(e.PersonGUID);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(e.PersonGUID, e);
    }
  }

  const finalList   = Array.from(dedup.values());
  const employees   = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

/** Server‐Sent‐Events endpoint */
exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;

    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');

    // pull last 24h on startup
    let lastSeen = new Date(Date.now() - 24*60*60*1000);
    const events = [];

    const push = async () => {
      const fresh = await fetchNewEvents(lastSeen);
      if (fresh.length) {
        lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
        events.push(...fresh);
      }

      // build occupancy + today counts
      const occupancy  = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday      = {
        employees:   todayStats.employees,
        contractors: todayStats.contractors,
        total:       todayStats.total
      };

      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
    };

    await push();
    const timer = setInterval(push, 1000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};
