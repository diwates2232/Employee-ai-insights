// src/components/ERTOverview.jsx

import React, { useState, useMemo } from 'react';
import {
  Card,
  Row,
  Col,
  Badge
} from 'react-bootstrap';
import {
  FaEnvelopeOpenText,
  FaMobileAlt,
  FaMapMarkerAlt,
  FaHome
} from 'react-icons/fa';

/** Base location per role **/
const baseLocationByRole = {
  "Site Head":                  "Podium Floor – Red Zone",
  "HR":                          "Podium Floor – Red Zone",
  "Incident Controller":        "Podium Floor – Green Zone",
  "First Aid Team":             "Podium Floor – Green Zone",
  "ERT Team Leader":            "Podium Floor – Green Zone",
  "BCM Team / Site Operations": "Podium Floor – Red Zone"
};

/** Header border color per role **/
const headerColorByRole = {
  "Site Head":                  "#58595B",
  "HR":                          "#FF6F61",
  "BCM Team / Site Operations": "#A80000",
  "Incident Controller":        "#009E60",
  "ERT Team Leader":            "#FFB800"
};

// rotating name colors (– unused here but kept for future)
const NAME_COLORS = ['#FFD100'];

/**
 * Assign a single “zone‐specific” color.
 * Darker → lighter shades can be added if multiple “Red Zone” cards exist.
 */
function getZoneColor(zoneName) {
  const z = (zoneName || '').toLowerCase();
  if (z.includes('red')) {
    return '#A80000'; // dark red
  }
  if (z.includes('yellow')) {
    return '#FFD100'; // dark yellow
  }
  if (z.includes('green')) {
    return '#009E60'; // dark green
  }
  if (z.includes('blue')) {
    return '#0D47A1'; // dark blue
  }
  // fallback gray
  return '#555555';
}

/** Role priority order for sorting */
const rolePriority = {
  "Site Head": 1,
  "BCM Team / Site Operations": 2,
  "HR": 3,
  "Incident Controller": 4,
  "ERT Team Leader": 5
};

export default function ERTOverview({ ertStatus }) {
  const [filterZone, setFilterZone] = useState(null);

  // ─── Build a flat list of all members with role, presence, and zone ───────
  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus).forEach(([role, membersArray]) => {
      membersArray.forEach((m) => {
        list.push({
          role,
          name: m.name,
          email: m.email,
          phone: m.phone,
          present: !!m.present,
          zone: m.zone || 'N/A'
        });
      });
    });
    return list;
  }, [ertStatus]);

  // ─── Compute zone‐wise counts (for filter cards) ───────────────────────────
  const zoneCounts = useMemo(() => {
    const counts = {};
    allMembers.forEach((m) => {
      if (m.present) {
        const z = m.zone;
        counts[z] = (counts[z] || 0) + 1;
      }
    });
    return counts; // e.g. { 'Red Zone': 2, 'Yellow Zone': 1 }
  }, [allMembers]);

  // ─── Sorted array of [zoneName, count] ────────────────────────────────────
  const sortedZones = useMemo(() => {
    return Object.entries(zoneCounts).sort(([a], [b]) =>
      a.localeCompare(b)
    );
  }, [zoneCounts]);

  // ─── Filtered + sorted list of members for display ────────────────────────
  const visibleMembers = useMemo(() => {
    // Apply zone filter (only present & zone matches)
    let list = allMembers.filter((m) => {
      if (filterZone) {
        return m.present && m.zone === filterZone;
      }
      return true;
    });

    // Sort by:
    // 1. present (available first)
    // 2. role priority (lower number = higher priority)
    // 3. name (alphabetical)
    list.sort((a, b) => {
      if (a.present !== b.present) {
        return a.present ? -1 : 1;
      }
      const pa = rolePriority[a.role] || 99;
      const pb = rolePriority[b.role] || 99;
      if (pa !== pb) {
        return pa - pb;
      }
      return a.name.localeCompare(b.name);
    });

    return list;
  }, [allMembers, filterZone]);

  return (
    <div className="mt-0">

      {/* ── Zone‐filter cards ───────────────────────────────────────────────────── */}
      <Row className="g-2 mb-4">
        {sortedZones.map(([zoneName, count]) => {
          const color = getZoneColor(zoneName);
          const isSelected = filterZone === zoneName;

          return (
            <Col key={zoneName} xs={12} sm={6} md={4} lg={3}>
              <Card
                className="text-center shadow-sm"
                style={{
                  cursor: 'pointer',
                  opacity: filterZone && !isSelected ? 0.5 : 1
                }}
                onClick={() => {
                  setFilterZone((prev) =>
                    prev === zoneName ? null : zoneName
                  );
                }}
              >
                <Card.Header
                  className="text-white"
                  style={{
                    backgroundColor: color,
                    borderRadius: '0 0.25rem 0 0'
                  }}
                >
                  {zoneName}
                </Card.Header>
                <Card.Body>
                  <h2 className="mb-0">{count}</h2>
                  <div className="text-muted small">Available</div>
                </Card.Body>
              </Card>
            </Col>
          );
        })}

        {sortedZones.length === 0 && (
          <Col xs={12}>
            <Card className="text-center shadow-sm">
              <Card.Body>
                <div className="text-muted">
                  No available ERT members right now.
                </div>
              </Card.Body>
            </Card>
          </Col>
        )}
      </Row>

      {/* ── Member cards (4 per row) ────────────────────────────────────────────── */}
      <Row className="g-2">
        {visibleMembers.map((m) => {
          const accent = headerColorByRole[m.role] || '#FFD100';
          const baseLoc = baseLocationByRole[m.role] || 'N/A';
          const zoneColor = getZoneColor(m.zone);

          return (
            <Col key={`${m.role}-${m.name}`} xs={12} sm={6} md={3}>
              <Card className="h-100 shadow-sm">
                <Card.Header
                  className="bg-dark text-white d-flex justify-content-between align-items-center"
                  style={{
                    borderTop:    `4px solid ${accent}`,
                    borderLeft:   `6px solid ${accent}`,
                    borderRadius: '0 0.25rem 0 0'
                  }}
                >
                  <span>{m.name}</span>
                  <Badge
                    bg={m.present ? 'success' : 'danger'}
                    pill
                  >
                    {m.present ? 'Available' : 'Away'}
                  </Badge>
                </Card.Header>

                <Card.Body className="p-2">
                  {/* Role */}
                  <div className="mb-2">
                    <strong>Role:</strong> {m.role}
                  </div>

                  {/* Contact */}
                  <div className="small mb-2">
                    <FaEnvelopeOpenText className="me-2" style={{ color: '#FFD100' }} />
                    <a
                      href={`mailto:${m.email}`}
                      style={{ color: '#000', textDecoration: 'underline' }}
                    >
                      {m.email}
                    </a>
                  </div>
                  <div className="small mb-2">
                    <FaMobileAlt className="me-2" style={{ color: '#FF6F61' }} />
                    <a
                      href={`tel:${m.phone}`}
                      style={{ color: '#000', textDecoration: 'underline' }}
                    >
                      {m.phone}
                    </a>
                  </div>

                  {/* Locations */}
                  <div className="mt-2 small">
                    <div className="d-flex align-items-center mb-1">
                      <FaHome className="me-2" style={{ color: '#A80000' }} />
                      <span>
                        Base: {baseLoc}
                      </span>
                    </div>
                    {m.present && (
                      <div className="d-flex align-items-center">
                        <FaMapMarkerAlt className="me-2" style={{ color: '#009E60' }} />
                        <span>
                          Live: {m.zone}
                        </span>
                      </div>
                    )}
                  </div>
                </Card.Body>

                {/* Zone badge at card bottom with zone‐specific background */}
                {m.present && (
                  <Card.Footer
                    className="text-center text-white small"
                    style={{ backgroundColor: zoneColor }}
                  >
                    {m.zone}
                  </Card.Footer>
                )}
              </Card>
            </Col>
          );
        })}

        {/* No members match the filter */}
        {filterZone && visibleMembers.length === 0 && (
          <Col xs={12}>
            <Card className="text-center shadow-sm">
              <Card.Body>
                <div className="text-muted">
                  No ERT members present in “{filterZone}.”
                </div>
              </Card.Body>
            </Card>
          </Col>
        )}
      </Row>
    </div>
  );
}











Now Look below file carefully and Site Head BCM Team Incident Conytrollrr ERT Team leader data 
now on Ui Currently we are display at top of Ui Site Head BCM Team and HR data ,
now i want Display their data at top when Avilabel , when status is away then display their data on botton , and give prority to Avilale team ,

also automatically genetared card are not fill colours like dark to faint ,'
and Zone is created Yellow and colour you filled blue itv is not look good , use Zone related coloue ,ex
Red Zone then use red dark to faint colour,


aslo data are display on ui like row and colounm, like Site head, incident controler , 
Use Seprate row and colunm for each name mention on this list ,
in a one row display 4 cards , and it is not necessary to display incident controller have 2 name , then only 2 card in row , then use another name 2 cards in front of them

make neccessary changes only and give me updated file carefully

{
     "Site Head": [
    { "name": "Rajeev Mago",      "email": "rajeev.mago@wu.com",      "phone": "xxx-xxx-xxxx" }
  ],

 "BCM Team / Site Operations": [
    { "name": "Rohit Singla",     "email": "rohit.singla@wu.com",     "phone": "xxx-xxx-xxxx" }
  ],
   "HR": [
    { "name": "Suma Roy",         "email": "suma.roy@wu.com",         "phone": "xxx-xxx-xxxx" }
  ],


"Incident Controller": [
    { "name": "Lloyds Dass",      "email": "Lloyds.Dass@wu.com",      "phone": "xxx-xxx-xxxx" },
     { "name": "Sameer Kanade",   "email": "Sameer.Kanade@wu.com",   "phone": "xxx-xxx-xxxx" }
  ],

  "ERT Team Leader": [
    { "name": "Vishal Chaudhari", "email": "Vishal.Chaudhary@wu.com", "phone": "xxx-xxx-xxxx" },
    { "name": "Vinit Kumar",      "email": "Vinit.Kumar@wu.com",      "phone": "xxx-xxx-xxxx" },
    { "name": "Sagar Jamdade",    "email": "sagar.jamdade@wu.com",    "phone": "xxx-xxx-xxxx" },
    { "name": "Satish Bhoyane",   "email": "satishpandurang.bhoyane@westernunion.com",   "phone": "xxx-xxx-xxxx" },
    { "name": "Sonu Pandey",      "email": "Sonu.Pandey@westernunion.com",      "phone": "xxx-xxx-xxxx" },
    { "name": "Bhupendra Rangare","email": "bhupendra.rangare@wu.com","phone": "xxx-xxx-xxxx" }
  ]
}






// src/components/ERTOverview.jsx

import React, { useState, useMemo } from 'react';
import {
  Card,
  Row,
  Col,
  ListGroup,
  Badge
} from 'react-bootstrap';
import {
  FaEnvelopeOpenText,
  FaMobileAlt,
  FaMapMarkerAlt,
  FaHome
} from 'react-icons/fa';

/** Base location per role **/
const baseLocationByRole = {
  "Site Head":                  "Podium Floor – Red Zone",
  "HR":                          "Podium Floor – Red Zone",
  "Incident Controller":        "Podium Floor – Green Zone",
  "First Aid Team":             "Podium Floor – Green Zone",
  "ERT Team Leader":            "Podium Floor – Green Zone",
  "BCM Team / Site Operations": "Podium Floor – Red Zone"
};

/** Header border color per role **/
const headerColorByRole = {
  "Incident Controller":        "#009E60",
  "ERT Team Leader":            "#FFB800",
  "BCM Team / Site Operations": "#A80000",
  "Site Head":                  "#58595B",
  "HR":                          "#FF6F61"
};

// rotating name colors (expandable)
const NAME_COLORS = ['#FFD100'];

/**
 * Generate a palette of “dark to faint” colors.
 * You can adjust or expand this list manually if you know your zones ahead of time.
 */
const PALETTE = [
  '#4A148C', // very dark purple
  '#311B92',
  '#1A237E',
  '#0D47A1',
  '#01579B',
  '#006064',
  '#004D40',
  '#1B5E20',
  '#33691E',
  '#827717',
  '#F57F17',
  '#FF6F00',
  '#E65100',
  '#BF360C'
];

export default function ERTOverview({ ertStatus }) {
  // ─── State: which zone is currently selected (or null = “no filter”) ─────────
  const [filterZone, setFilterZone] = useState(null);

  // ─── Build a flat list of all present members, then extract zone counts ──────
  const { sortedZones, zoneToColor } = useMemo(() => {
    const counts = {};
    Object.values(ertStatus).forEach((membersArray) => {
      membersArray.forEach((m) => {
        if (m.present) {
          const z = m.zone || 'N/A';
          counts[z] = (counts[z] || 0) + 1;
        }
      });
    });

    // Sort zones alphabetically
    const zonesArr = Object.entries(counts).sort(([a], [b]) =>
      a.localeCompare(b)
    );

    // Assign each zone a color from the PALETTE in order (dark → faint).
    // If there are more zones than colors, we wrap around.
    const mapping = {};
    zonesArr.forEach(([zoneName], idx) => {
      mapping[zoneName] = PALETTE[idx % PALETTE.length];
    });

    return {
      sortedZones: zonesArr, // array of [zoneName, count]
      zoneToColor: mapping  // e.g. { 'Red Zone': '#4A148C', ... }
    };
  }, [ertStatus]);

  // ─── Filtered version of ertStatus for “role-wise” display ───────────────────
  const filteredStatus = useMemo(() => {
    if (!filterZone) {
      return ertStatus;
    }
    // Build a new object containing only roles whose members match the filterZone
    const result = {};
    Object.entries(ertStatus).forEach(([role, membersArray]) => {
      const filteredMembers = membersArray.filter(
        (m) => m.present && (m.zone || 'N/A') === filterZone
      );
      if (filteredMembers.length > 0) {
        result[role] = filteredMembers;
      }
    });
    return result;
  }, [ertStatus, filterZone]);

  return (
    <div className="mt-0">
      {/* ── Zone-wise summary cards (manual colors, act as filters) ──────────────── */}
      <Row className="g-2 mb-4">
        {sortedZones.map(([zoneName, count]) => {
          const color = zoneToColor[zoneName] || '#BBBBBB';
          const isSelected = filterZone === zoneName;

          return (
            <Col key={zoneName} xs={12} sm={6} md={4} lg={3}>
              <Card
                className="text-center shadow-sm"
                style={{
                  cursor: 'pointer',
                  opacity: filterZone && !isSelected ? 0.5 : 1
                }}
                onClick={() => {
                  // Toggle filter: clicking the same zone again clears it
                  setFilterZone((prev) => (prev === zoneName ? null : zoneName));
                }}
              >
                <Card.Header
                  className="text-white"
                  style={{
                    backgroundColor: color,
                    borderRadius: '0 0.25rem 0 0'
                  }}
                >
                  {zoneName}
                </Card.Header>
                <Card.Body>
                  <h2 className="mb-0">{count}</h2>
                  <div className="text-muted small">Available</div>
                </Card.Body>
              </Card>
            </Col>
          );
        })}

        {/* If no one is present or no zones found */}
        {sortedZones.length === 0 && (
          <Col xs={12}>
            <Card className="text-center shadow-sm">
              <Card.Body>
                <div className="text-muted">No available ERT members right now.</div>
              </Card.Body>
            </Card>
          </Col>
        )}
      </Row>

      {/* ── Role-wise member cards (filtered by filterZone) ───────────────────────── */}
      <Row className="g-2 mt-1">
        {Object.entries(filteredStatus).map(([role, members]) => {
          const accent = headerColorByRole[role] || '#FFD100';
          const baseLoc = baseLocationByRole[role] || 'N/A';

          // Sort so that present members appear first (though filteredStatus only includes present)
          const sortedMembers = [...members].sort((a, b) =>
            a.present === b.present ? 0 : a.present ? -1 : 1
          );

          return (
            <Col key={role} md={6} lg={4}>
              <Card className="h-100 shadow-sm">
                <Card.Header
                  className="bg-dark text-white"
                  style={{
                    borderTop:    `4px solid ${accent}`,
                    borderLeft:   `6px solid ${accent}`,
                    borderRadius: '0 0.25rem 0 0'
                  }}
                >
                  {role}
                </Card.Header>

                <ListGroup variant="flush">
                  {sortedMembers.map((m, idx) => {
                    const nameColor = NAME_COLORS[idx % NAME_COLORS.length];
                    return (
                      <ListGroup.Item
                        key={m.name}
                        className="py-2 bg-dark text-white"
                      >
                        {/* Name + Availability */}
                        <div className="d-flex justify-content-between align-items-start">
                          <div>
                            <strong style={{ color: nameColor }}>{m.name}</strong>
                            <Badge
                              bg={m.present ? 'success' : 'danger'}
                              className="ms-2"
                              pill
                            >
                              {m.present ? 'Available' : 'Away'}
                            </Badge>
                          </div>
                        </div>

                        {/* Contact row */}
                        <div className="mt-2">
                          <div className="small d-flex align-items-center mb-1">
                            <FaEnvelopeOpenText
                              className="me-2"
                              style={{ color: '#FFD100' }}
                            />
                            <a
                              href={`mailto:${m.email}`}
                              style={{
                                color: '#fff',
                                textDecoration: 'underline'
                              }}
                            >
                              {m.email}
                            </a>
                          </div>
                          <div className="small d-flex align-items-center">
                            <FaMobileAlt
                              className="me-2"
                              style={{ color: '#FF6F61' }}
                            />
                            <a
                              href={`tel:${m.phone}`}
                              style={{
                                color: '#fff',
                                textDecoration: 'underline'
                              }}
                            >
                              {m.phone}
                            </a>
                          </div>
                        </div>

                        {/* Locations */}
                        <div className="mt-3 d-flex flex-wrap gap-3 small">
                          <div className="d-flex align-items-center">
                            <FaHome className="me-2" style={{ color: '#A80000' }} />
                            <span style={{ color: '#A80000' }}>
                              Base: {baseLoc}
                            </span>
                          </div>
                          {m.present && (
                            <div className="d-flex align-items-center">
                              <FaMapMarkerAlt
                                className="me-2"
                                style={{ color: '#009E60' }}
                              />
                              <span style={{ color: '#009E60' }}>
                                Live: {m.zone || 'N/A'}
                              </span>
                            </div>
                          )}
                        </div>
                      </ListGroup.Item>
                    );
                  })}
                </ListGroup>
              </Card>
            </Col>
          );
        })}

        {/* If a zone is selected but yields no results */}
        {filterZone && Object.keys(filteredStatus).length === 0 && (
          <Col xs={12}>
            <Card className="text-center shadow-sm">
              <Card.Body>
                <div className="text-muted">
                  No ERT members present in “{filterZone}.”
                </div>
              </Card.Body>
            </Card>
          </Col>
        )}
      </Row>
    </div>
  );
}

