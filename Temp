// controllers/denverLiveOccupancyController.js

const { DateTime }      = require('luxon');
const { denver }        = require('../config/siteConfig');
const doorFloorMap      = require('../data/denverDoorFloorMap');
const sql               = require('mssql');

const warnedKeys = new Set();

/** Normalize a raw door name + direction into a lookup key. */
function normalizeDoorKey(rawDoorName, rawDirection) {
  const base = rawDoorName
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase()
    .replace(/-IN$/i, '')
    .replace(/-OUT$/i, '');
  const dir = rawDirection.toUpperCase().includes('IN') ? 'IN' : 'OUT';
  return `${base}___${dir}`;
}

/** Map a swipe’s door+direction to a floor label. */
function mapDoorToFloor(rawDoorName, rawDirection) {
  const key = normalizeDoorKey(rawDoorName, rawDirection);
  if (doorFloorMap[key]) {
    return doorFloorMap[key];
  }
  const m = key.match(/\b(\d{1,2})\./);
  if (m) {
    return `Floor ${m[1]}`;
  }
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}" (raw "${rawDoorName}", dir "${rawDirection}")`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

/**
 * Fetch all swipe events since `since`.
 * Returns recordset with fields:
 *   LocaleMessageTime, Dateonly, Swipe_Time,
 *   EmployeeID, PersonGUID, ObjectName1,
 *   PersonnelType, CardNumber, AdmitCode,
 *   Direction, Door
 */
async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
          THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name            AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]'     ,'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]'          ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel      t2    ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType  t3    ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/** True if the `Dateonly` string falls on today in Denver. */
function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
                             .toFormat('yyyy-LL-dd');
  const today      = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

/**
 * Build the live‐occupancy snapshot from allEvents.
 */
function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const floor    = mapDoorToFloor(Door, Direction);

    // “Out of office” really evicts
    if (Direction === 'OutDirection' && floor === 'Unknown Floor') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, floor };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }

  // live headcounts
  let employees   = 0;
  let contractors = 0;
  for (const pt of uniquePeople.values()) {
    if (pt === 'Employee' || pt === 'Terminated Personnel') employees++;
    else contractors++;
  }

  // floor aggregation
  const floorMap = {};
  for (const emp of Object.values(current)) {
    floorMap[emp.floor] = floorMap[emp.floor] || [];
    floorMap[emp.floor].push(emp);
  }
  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));

  return {
    asOf:               new Date().toISOString(),
    currentCount:       employees + contractors,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employees   },
      { personnelType: 'Contractor', count: contractors }
    ]
  };
}

/**
 * Build the “visited Today” deduped totals from allEvents.
 */
function buildVisitedToday(allEvents) {
  const today = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');

  // only today's InDirection swipes
  const todayIn = allEvents.filter(evt =>
    evt.Direction === 'InDirection' && isTodayInDenver(evt.Dateonly)
  );

  // dedupe by PersonGUID → keep latest swipe
  const dedup = new Map();
  todayIn.forEach(e => {
    const prev = dedup.get(e.PersonGUID);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(e.PersonGUID, e);
    }
  });

  const list = Array.from(dedup.values());
  const employees   = list.filter(e =>
    e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel'
  ).length;
  const contractors = list.length - employees;

  return { employees, contractors, total: list.length };
}

/**
 * Fetch + stream Denver live occupancy + visited-today via SSE.
 */
exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();

  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  // start from 24h ago
  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    // build both snapshots from the same data
    const liveStats    = buildOccupancy(events);
    const todayStats   = buildVisitedToday(events);

    // merge
    const payload = {
      ...liveStats,
      totalVisitedToday:  todayStats.total,
      visitedToday:       { employees: todayStats.employees, contractors: todayStats.contractors, total: todayStats.total }
    };

    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  // initial + interval
  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};



















Read below file carefully.issue is there 
/**
 * Build both:
 *  • the live floor-occupancy snapshot, and
 *  • the “visited Today” deduped totals,
 * from exactly the same in-memory data.
 */

Above two function are removed from my side by mistakely so kindly add this function and give me Updated js file carefully.

/** Build the live‐occupancy snapshot from allEvents */

async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToZone(Door, Direction);

    // “Out of office” actually evicts
    if (Direction === 'OutDirection' && zone === 'Out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, zone };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }



For more Information Refer above code and make changes smothly and give me Updated js file carefully


// controllers/denverLiveOccupancyController.js

const { DateTime }      = require('luxon');
const { denver }        = require('../config/siteConfig');
const doorFloorMap      = require('../data/denverDoorFloorMap');
const sql               = require('mssql');

const warnedKeys = new Set();

/** Normalize a raw door name + direction into a lookup key. */
function normalizeDoorKey(rawDoorName, rawDirection) {
  const base = rawDoorName
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase()
    .replace(/-IN$/i, '')
    .replace(/-OUT$/i, '');
  const dir = rawDirection.toUpperCase().includes('IN') ? 'IN' : 'OUT';
  return `${base}___${dir}`;
}

/** Map a swipe’s door+direction to a floor label. */
function mapDoorToFloor(rawDoorName, rawDirection) {
  const key = normalizeDoorKey(rawDoorName, rawDirection);
  if (doorFloorMap[key]) {
    return doorFloorMap[key];
  }
  // fallback: extract "Floor N" from something like "US.CO.HQ. 12. …"
  const m = key.match(/\b(\d{1,2})\./);
  if (m) {
    return `Floor ${m[1]}`;
  }
  // warn once
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}" (raw "${rawDoorName}", dir "${rawDirection}")`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

/**
 * Fetch all swipe events since `since`.
 * Returns recordset with fields:
 *   LocaleMessageTime, Dateonly, Swipe_Time,
 *   EmployeeID, PersonGUID, ObjectName1,
 *   PersonnelType, CardNumber, AdmitCode,
 *   Direction, Door
 */
async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
          THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name            AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]'     ,'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]'          ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel      t2    ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType  t3    ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/** True if the `Dateonly` string falls on today in Denver. */
function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
                             .toFormat('yyyy-LL-dd');
  const today      = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

/**
 * Build both:
 *  • the live floor-occupancy snapshot, and
 *  • the “visited Today” deduped totals,
 * from exactly the same in-memory data.
 */


function buildOccupancyForToday(allEvents) {
  // 1) filter only today’s InDirection swipes
  const todayIn = allEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
   );


/** Build the live‐occupancy snapshot from allEvents */

  // 2) dedupe: keep only the latest swipe per PersonGUID
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // 3) tally employees vs contractors, and group by floor
  let employees   = 0;
  let contractors = 0;
  const floorMap  = {};

  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);

    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));

  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employees   },
      { personnelType: 'Contractor', count: contractors }
    ],
    totalVisitedToday:  finalList.length,
    visitedToday:       { employees, contractors, total: finalList.length }
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();

  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  // start streaming all swipes from 24h ago
  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    // build everything from the same today-only, deduped data
    const payload = buildOccupancyForToday(events);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  // initial + interval
  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};
