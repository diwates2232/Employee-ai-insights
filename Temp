Now see this currently it look like fixed capacity 100% bar height is fixed so it goes top and 
Live bar Count display in a bottom so it look odd,
and reduce gap between floor,
also  Adjust Occupancy bar size as per Live count so it look interactive


// src/components/FloorOccupancyChart.jsx

import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Cell,
  LabelList,
  Legend
} from 'recharts';
import { Card } from 'react-bootstrap';
import floorCapacities from '../constants/floorCapacities';
// floorCapacities should look like:
// {
//   "Podium Floor": 725,
//   "Tower B":      303,
//   "2nd Floor":    185,
//   // …any other floors
// }

// A palette of 12 gradients for “live headcount” bars
const FLOOR_COLOR_PALETTE = [
  ['#FFD100', '#FFF2CC'],
  ['#009E60', '#CFFAF3'],
  ['#A80000', '#FFCCCC'],
  ['#58595B', '#D6E3F0'],
  ['#FF6F61', '#FFD1CD'],
  ['#FFB800', '#FFF8CC'],
  ['#006400', '#CCFFCC'],
  ['#4B0082', '#E0CCFF'],
  ['#C75D00', '#FFE0B2'],
  ['#264653', '#A0B5D8'],
  ['#9B2226', '#FFB3B3'],
  ['#005F73', '#CAEBF2']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // 1) Enrich each floor object with liveCount, capacity, usedPct, capacityPct (always 100), and label
  const enriched = data.map((floorObj) => {
    const { floor, total: liveCount } = floorObj;
    const capacity = floorCapacities[floor] ?? 0;
    const usedPct = capacity > 0
      ? ((liveCount / capacity) * 100).toFixed(1)
      : '0.0';
    return {
      ...floorObj,           // includes breakdown fields: employees, contractors, etc.
      capacity,
      liveCount,
      usedPct: Number(usedPct),
      capacityPct: 100,      // full-length bar
      label: `${liveCount}/${capacity}`
    };
  });

  // 2) Compute “Pune Office” totals across all floors
  const totalLive = enriched.reduce((sum, f) => sum + f.liveCount, 0);
  const totalCap  = enriched.reduce((sum, f) => sum + f.capacity, 0);
  const totalUsedPct = totalCap > 0
    ? ((totalLive / totalCap) * 100).toFixed(1)
    : '0.0';

  const totalEntry = {
    floor: 'Pune Office',
    liveCount: totalLive,
    capacity: totalCap,
    usedPct: Number(totalUsedPct),
    capacityPct: 100,
    label: `${totalLive}/${totalCap}`
  };

  // 3) Sort floors by liveCount descending, then prepend “Pune Office”
  const sortedFloors = [...enriched].sort((a, b) => b.liveCount - a.liveCount);
  const chartData = [totalEntry, ...sortedFloors];

  // 4) Custom tooltip to show raw counts, percentages, and breakdown
  const renderTooltip = ({ active, payload, label }) => {
    if (!active || !payload?.length) return null;
    // payload[0] corresponds to capacityPct; payload[1] is usedPct
    const floorObj = payload[0].payload;
    const { liveCount, capacity, usedPct } = floorObj;

    // Include breakdown entries (e.g., employees, contractors, tempBadge, etc.)
    const breakdownEntries = Object.entries(floorObj).filter(
      ([key]) =>
        ![
          'floor',
          'liveCount',
          'capacity',
          'usedPct',
          'capacityPct',
          'label'
        ].includes(key)
    );

    return (
      <div
        style={{
          backgroundColor: 'var(--wu-gray-dark)',
          color: '#fff',
          border: '1px solid var(--wu-yellow)',
          borderRadius: 4,
          padding: '0.75rem',
          minWidth: 200
        }}
      >
        <div style={{ marginBottom: 4 }}>
          <strong style={{ fontSize: 14 }}>Floor: {label}</strong>
        </div>
        <div style={{ marginBottom: 6, fontWeight: 'bold' }}>
          Live: {liveCount} / {capacity} ({usedPct}%)
        </div>
        {breakdownEntries.map(([type, value]) => (
          <div
            key={type}
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              marginTop: 2,
              color: '#fff'
            }}
          >
            <span style={{ opacity: 0.8 }}>
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </span>
            <span style={{ fontWeight: 'bold' }}>{value}</span>
          </div>
        ))}
      </div>
    );
  };

  return (
    <Card
      className="mb-4 shadow-sm border"
      style={{ borderColor: 'var(--wu-yellow)' }}
    >
      <Card.Header className="bg-dark text-warning text-center">
        Floor‐wise Live Headcount vs. Capacity
      </Card.Header>

      <Card.Body
        style={{
          height: 600,
          padding: 0,
          backgroundColor: 'var(--wu-gray-dark)'
        }}
      >
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={chartData}
            margin={{ top: 20, right: 24, left: 0, bottom: 24 }}
            barCategoryGap="10%"
          >
            {/* 5) Gradient for capacity bars (red dark → faint) */}
            <defs>
              <linearGradient id="capacity-gradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="0%" stopColor="#A80000" stopOpacity={1} />
                <stop offset="100%" stopColor="#FFCCCC" stopOpacity={1} />
              </linearGradient>
              {/* 6) One gradient per floor for “live” bars (multi‐colour) */}
              {chartData.map((_, idx) => {
                const [darkColor, lightColor] =
                  FLOOR_COLOR_PALETTE[idx % FLOOR_COLOR_PALETTE.length];
                return (
                  <linearGradient
                    id={`live-grad-${idx}`}
                    key={`live-grad-${idx}`}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={darkColor} stopOpacity={1} />
                    <stop offset="100%" stopColor={lightColor} stopOpacity={1} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* 7) Grid and Axes */}
            <CartesianGrid stroke="#555" strokeDasharray="3 3" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#fff' }}
              angle={0}
              textAnchor="middle"
              interval={0}
              height={40}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#fff' }}
              domain={[0, 100]}
              unit="%"
            />

            {/* 8) Custom Tooltip */}
            <Tooltip content={renderTooltip} />

            {/* 9) Legend */}
            <Legend
              verticalAlign="top"
              align="right"
              wrapperStyle={{ color: '#fff', paddingBottom: 20}}
              payload={[
                { value: 'Capacity (100%)', type: 'square', color: '#A80000' },
                { value: 'Live (%)', type: 'square', color: '#FFD100' }
              ]}
            />

            {/* 10) Capacity (%) bar – wide, red gradient */}
            <Bar
              dataKey="capacityPct"
              name="Capacity (100%)"
              radius={[4, 4, 0, 0]}
              barSize={50}
              fill="url(#capacity-gradient)"
            >
              {chartData.map((_, idx) => (
                <Cell
                  key={`cap-cell-${idx}`}
                  fill="url(#capacity-gradient)"
                />
              ))}
              <LabelList
                dataKey="capacityPct"
                position="top"
                formatter={() => `100%`}
                style={{
                  fill: '#fff',
                  fontSize: 12,
                  fontWeight: 'bold'
                }}
              />
            </Bar>

            {/* 11) Live (%) bar – narrower, multi‐colour */}
            <Bar
              dataKey="usedPct"
              name="Live (%)"
              radius={[4, 4, 0, 0]}
              barSize={50}
            >
              {chartData.map((_, idx) => (
                <Cell
                  key={`live-cell-${idx}`}
                  fill={`url(#live-grad-${idx})`}
                />
              ))}
              <LabelList
                dataKey="usedPct"
                position="insideTop"
                formatter={(val) => `${val}%`}
                style={{
                  fill: '#000',
                  fontSize: 10,
                  fontWeight: 'bold',
                  backgroundColor: 'rgba(255,255,255,0.7)',
                  borderRadius: 2,
                  padding: '2px 4px'
                }}
              />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}
