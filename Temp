// src/pages/DenverInOutInconsistency.jsx

import React, { useEffect, useState } from 'react';

export default function DenverInOutInconsistencyPage({ data }) {
  // If you want to re-fetch inside this component rather than rely on App.js, do it like this:
  // (But if you’re already passing “data” from App.js via props, you don’t need another fetch.)

  const [inconsistencyList, setInconsistencyList] = useState(data || []);

  // ONLY use this useEffect if you want to fetch here directly:
  useEffect(() => {
    fetch('http://localhost:5000/api/inout-inconsistency-denver')
      .then((res) => {
        if (!res.ok) {
          throw new Error(`HTTP ${res.status}`);
        }
        return res.json();
      })
      .then((json) => {
        setInconsistencyList(json || []);
      })
      .catch((err) => {
        console.error('Failed to fetch in/out inconsistency:', err);
      });
  }, []);

  return (
    <div>
      <h2>Denver In/Out Inconsistency</h2>
      {inconsistencyList.length === 0 ? (
        <p>No inconsistency data available.</p>
      ) : (
        <table className="table table-striped">
          <thead>
            <tr>
              <th>Date</th>
              <th>Floor</th>
              <th>Total Persons</th>
              <th>Inconsistent Count</th>
              <th>Inconsistency %</th>
            </tr>
          </thead>
          <tbody>
            {inconsistencyList.map((row) => (
              <tr key={`${row.date}-${row.floor}`}>
                <td>{row.date}</td>
                <td>{row.floor}</td>
                <td>{row.totalPersons}</td>
                <td>{row.inconsistentCount}</td>
                <td>{row.inconsistencyPercentage}%</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}









// src/pages/DenverInOutInconsistency.jsx
import React, { useState, useEffect } from 'react';

export default function DenverInOutInconsistency() {
  const [dailyFloorStats, setDailyFloorStats] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  // track which “date+floor” rows have their instances expanded:
  const [expandedRows, setExpandedRows] = useState({});

  useEffect(() => {
    async function fetchData() {
      try {
        const resp = await fetch('/api/denver/inout-inconsistency');
        if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
        const json = await resp.json();
        // we only need dailyFloorStats for this page
        setDailyFloorStats(json.dailyFloorStats || []);
      } catch (err) {
        console.error('Failed to fetch:', err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  const toggleRow = (key) => {
    setExpandedRows((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  if (loading) {
    return <div>Loading data…</div>;
  }

  if (error) {
    return <div style={{ color: 'red' }}>Error: {error}</div>;
  }

  return (
    <div>
      <h1>Denver In/Out Inconsistency</h1>
      <table
        style={{
          width: '100%',
          borderCollapse: 'collapse',
          marginTop: '1rem',
        }}
      >
        <thead>
          <tr>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>Date</th>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>Floor</th>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>In Count</th>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>Out Count</th>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>Total Persons</th>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>Inconsistent Count</th>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>Inconsistency %</th>
            <th style={{ border: '1px solid #ccc', padding: '8px' }}>Instances</th>
          </tr>
        </thead>
        <tbody>
          {dailyFloorStats.map((row) => {
            // use a unique key: date__floor
            const rowKey = `${row.date}__${row.floor}`;
            const isExpanded = Boolean(expandedRows[rowKey]);
            return (
              <React.Fragment key={rowKey}>
                <tr>
                  <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                    {row.date}
                  </td>
                  <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                    {row.floor}
                  </td>
                  <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                    {row.inCount}
                  </td>
                  <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                    {row.outCount}
                  </td>
                  <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                    {row.totalPersons}
                  </td>
                  <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                    {row.inconsistentCount}
                  </td>
                  <td style={{ border: '1px solid #ccc', padding: '8px' }}>
                    {row.inconsistencyPercentage}%
                  </td>
                  <td style={{ border: '1px solid #ccc', padding: '8px', textAlign: 'center' }}>
                    {row.instances.length > 0 ? (
                      <button onClick={() => toggleRow(rowKey)}>
                        {isExpanded ? 'Hide' : 'View'} ({row.instances.length})
                      </button>
                    ) : (
                      '—'
                    )}
                  </td>
                </tr>

                {isExpanded && row.instances.length > 0 && (
                  <tr>
                    <td
                      colSpan={8}
                      style={{
                        border: '1px solid #ccc',
                        padding: '8px',
                        backgroundColor: '#f9f9f9',
                      }}
                    >
                      <table
                        style={{
                          width: '100%',
                          borderCollapse: 'collapse',
                          marginTop: '0.5rem',
                        }}
                      >
                        <thead>
                          <tr>
                            <th style={{ border: '1px solid #ddd', padding: '6px' }}>
                              Employee ID
                            </th>
                            <th style={{ border: '1px solid #ddd', padding: '6px' }}>
                              Name
                            </th>
                            <th style={{ border: '1px solid #ddd', padding: '6px' }}>
                              Personnel Type
                            </th>
                          </tr>
                        </thead>
                        <tbody>
                          {row.instances.map((inst) => (
                            <tr key={inst.employeeId}>
                              <td style={{ border: '1px solid #ddd', padding: '6px' }}>
                                {inst.employeeId}
                              </td>
                              <td style={{ border: '1px solid #ddd', padding: '6px' }}>
                                {inst.name}
                              </td>
                              <td style={{ border: '1px solid #ddd', padding: '6px' }}>
                                {inst.personnelType}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </td>
                  </tr>
                )}
              </React.Fragment>
            );
          })}

          {dailyFloorStats.length === 0 && (
            <tr>
              <td colSpan={8} style={{ padding: '16px', textAlign: 'center' }}>
                No data to display.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}











// C:\Users\W0024618\Desktop\swipeData\client-denver\src\App.js

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome                 from './pages/DashboardHome';
import FloorDetailsPage              from './pages/FloorDetailsPage';
import DenverInOutInconsistencyPage  from './pages/DenverInOutInconsistency'; // ← NEW

import './App.css';

export default function App() {
  // live data states
  const [floorData, setFloorData]                         = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown]       = useState([]);
  const [totalVisitedToday, setTotalVisitedToday]         = useState(0);
  const [personnelSummary, setPersonnelSummary]           = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday]                   = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary]         = useState([]);
  const [inOutInconsistencyData, setInOutInconsistencyData] = useState([]); // ← NEW

  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');
    es.onmessage = e => {
      try {
        const p = JSON.parse(e.data);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []);
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = err => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, []);

  // ← NEW: Fetch the in/out inconsistency data once, on mount
  useEffect(() => {
    fetch('http://localhost:5000/api/inout-inconsistency-denver')
      .then(res => res.json())
      .then(data => {
        setInOutInconsistencyData(data || []);
      })
      .catch(err => {
        console.error('Failed to fetch in/out inconsistency data:', err);
      });
  }, []);

  return (
    <BrowserRouter>
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">
          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy — Western Union Denver
          </Navbar.Brand>
          <Nav className="ms-auto align-items-center">
            <Nav.Link as={Link} to="/" className="nav-item-infographic">
              Dashboard
            </Nav.Link>
            <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
              Floor Details
            </Nav.Link>
            <Nav.Link as={Link} to="/inout-inconsistency" className="nav-item-infographic">
              In/Out Inconsistency
            </Nav.Link>
            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={personnelSummary}
                  totalVisitedToday={totalVisitedToday}
                  visitedToday={visitedToday}
                  floorData={floorData}
                  personnelBreakdown={personnelBreakdown}
                  floorInOutSummary={floorInOutSummary}
                />
              }
            />

            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={floorData}
                  floorInOutSummary={floorInOutSummary}
                />
              }
            />

            {/* ← NEW: Route for DenverInOutInconsistencyPage */}
            <Route
              path="/inout-inconsistency"
              element={
                <DenverInOutInconsistencyPage
                  data={inOutInconsistencyData}
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}

















i have create DenverInOutInconsistency.jsx
page 

now read below my current app.js file carefully.

http://localhost:5000/api/inout-inconsistency-denver
this is api then give me u[pdated app.js file add only this api retails


//C:\Users\W0024618\Desktop\swipeData\client-denver\src\App.js

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome    from './pages/DashboardHome';
import FloorDetailsPage from './pages/FloorDetailsPage';

import './App.css';

export default function App() {
  // live data states
  // const [summaryData, setSummaryData]               = useState([]);
  const [floorData, setFloorData]                   = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday]   = useState(0);
  const [personnelSummary, setPersonnelSummary]     = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday]             = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary]   = useState([]); // ← NEW

  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');
    es.onmessage = e => {
      try {
        const p = JSON.parse(e.data);
        // setSummaryData(p.summary || []);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []); // ← NEW
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = err => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, []);

  return (
    <BrowserRouter>
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">
          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy — Western Union Denver
          </Navbar.Brand>
          <Nav className="ms-auto align-items-center">
            <Nav.Link as={Link} to="/" className="nav-item-infographic">
              Dashboard
            </Nav.Link>
            <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
              Floor Details
            </Nav.Link>
            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={personnelSummary}
                  totalVisitedToday={totalVisitedToday}
                  visitedToday={visitedToday}
                  floorData={floorData}
                  personnelBreakdown={personnelBreakdown}
                  floorInOutSummary={floorInOutSummary}  // ← PASS DOWN
                />
              }
            />
            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={floorData}
                  floorInOutSummary={floorInOutSummary}  // ← PASS DOWN
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}








