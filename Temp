// controllers/occupancyController.js

const { poolConnect, pool, sql } = require('../config/db');

function extractZone(door) {
  // split on “_” and take part that likely represents the zone 
  // (e.g. “TOWER B” in “APAC_IN_PUN_TOWER B_ST5_…”)
  const parts = door.split('_');
  return parts[3] || 'Unknown';
}

exports.getOccupancy = async (req, res) => {
  try {
    await poolConnect;
    const request = pool.request();

    // 1) Handle optional ?date=YYYY-MM-DD
    let whereClause;
    if (req.query.date) {
      // user-specified day
      request.input('filterDate', sql.Date, req.query.date);
      whereClause = `CONVERT(date, LocaleMessageTime) = @filterDate`;
    } else {
      // last 24 hours window
      // use GETDATE() on the server side
      whereClause = `LocaleMessageTime >= DATEADD(HOUR, -24, GETDATE())`;
    }

    // 2) Run the same CTE + filter
    const result = await request.query(`
      WITH CombinedQuery AS (
        /* … your original CTE here … */
      )
      SELECT
        CONVERT(VARCHAR(25), LocaleMessageTime, 126) AS LocaleMessageTime,
        CONVERT(VARCHAR(10), LocaleMessageTime, 23)  AS Dateonly,
        CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door,
        Rejection_Type
      FROM CombinedQuery
      WHERE ${whereClause}
      ORDER BY LocaleMessageTime DESC;
    `);

    const rows = result.recordset;

    // 3) Group into zones
    const zoneMap = {};
    rows.forEach(r => {
      const zone = extractZone(r.Door);
      (zoneMap[zone] = zoneMap[zone] || []).push(r);
    });

    // 4) Build summary counts
    const summary = Object.entries(zoneMap).map(([zone, recs]) => ({
      zone,
      count: recs.length,
    }));

    // 5) Respond
    res.json({
      // echo back which filter was used
      filter: req.query.date
        ? `date = ${req.query.date}`
        : 'last 24 hours',
      summary,
      details: zoneMap,
    });
  } catch (err) {
    console.error('Occupancy error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};










// controllers/occupancyController.js

const { poolConnect, pool, sql } = require('../config/db');  // bring in sql

function extractZone(door) {
  const parts = door.split('_');
  return parts[3] || 'Unknown';
}

exports.getOccupancy = async (req, res) => {
  try {
    await poolConnect;
    const request = pool.request();

    // use sql.Date to match only the date portion
    const todayDate = new Date();                     // e.g. 2025-05-16T...
    // strip time portion:
    const yyyy = todayDate.getFullYear();
    const mm   = String(todayDate.getMonth() + 1).padStart(2, '0');
    const dd   = String(todayDate.getDate()).padStart(2, '0');
    const isoDateOnly = `${yyyy}-${mm}-${dd}`;        // "2025-05-16"

    request.input('today', sql.Date, isoDateOnly);

    const result = await request.query(`
      WITH CombinedQuery AS (
        /* … your CTE as before … */
      )
      SELECT
        CONVERT(VARCHAR(25), LocaleMessageTime, 126) AS LocaleMessageTime,
        CONVERT(VARCHAR(10), LocaleMessageTime, 23)  AS Dateonly,
        CONVERT(VARCHAR(8), LocaleMessageTime, 108)  AS Swipe_Time,
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door,
        Rejection_Type
      FROM CombinedQuery
      WHERE CONVERT(date, LocaleMessageTime) = @today
      ORDER BY LocaleMessageTime DESC;
    `);

    const rows = result.recordset;

    const zoneMap = {};
    rows.forEach(r => {
      const zone = extractZone(r.Door);
      zoneMap[zone] = zoneMap[zone] || [];
      zoneMap[zone].push(r);
    });

    const summary = Object.entries(zoneMap).map(
      ([zone, recs]) => ({ zone, count: recs.length })
    );

    res.json({
      date: isoDateOnly,
      summary,
      details: zoneMap,
    });
  } catch (err) {
    console.error('Occupancy error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};










// controllers/occupancyController.js

const { poolConnect, pool } = require('../config/db');

function extractZone(door) {
  // Assumes door strings like "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR"
  // We’ll take the 4th underscore-separated segment as the “zone”
  const parts = door.split('_');
  return parts[3] || 'Unknown';
}

exports.getOccupancy = async (req, res) => {
  try {
    await poolConnect;
    const request = pool.request();

    // only today’s swipes
    request.input('today', request.SqlDate, new Date());

    // fetch raw rows for today
    const result = await request.query(`
      WITH CombinedQuery AS (
        /* … your CTE as before … */
      )
      SELECT
        LocaleMessageTime,
        CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
        CONVERT(VARCHAR(8), LocaleMessageTime, 108) AS Swipe_Time,
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door,
        Rejection_Type
      FROM CombinedQuery
      WHERE CONVERT(date, LocaleMessageTime) = @today
      ORDER BY LocaleMessageTime DESC
    `);

    const rows = result.recordset;

    // group by zone
    const zoneMap = {};
    rows.forEach(r => {
      const zone = extractZone(r.Door);
      if (!zoneMap[zone]) zoneMap[zone] = [];
      zoneMap[zone].push(r);
    });

    // build summary
    const summary = Object.entries(zoneMap).map(([zone, recs]) => ({
      zone,
      count: recs.length
    }));

    res.json({
      date: new Date().toISOString().slice(0,10),
      summary,       // [{ zone: 'TOWER B', count: 12 }, …]
      details: zoneMap
    });
  } catch (err) {
    console.error('Occupancy error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};







// routes/occupancyRoutes.js

const express = require('express');
const router  = express.Router();
const { getOccupancy } = require('../controllers/occupancyController');

router.get('/occupancy', getOccupancy);

module.exports = router;





// server.js

const express = require('express');
const cors    = require('cors');
const empRt   = require('./routes/employeeRoutes');
const occRt   = require('./routes/occupancyRoutes');  // new

const app = express();
app.use(cors());
app.use(express.json());

app.use('/api', empRt);
app.use('/api', occRt);      // <-- mounts GET /api/occupancy

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});






// controllers/employeeController.js

const { poolConnect, pool } = require('../config/db');

exports.getEmployeeData = async (req, res) => {
  try {
    await poolConnect;
    const request = pool.request();

    // Pagination params (defaults: page 1, 100 rows)
    const page     = parseInt(req.query.page)     || 1;
    const pageSize = parseInt(req.query.pageSize) || 100;
    const offset   = (page - 1) * pageSize;

    const sqlQuery = `
      WITH CombinedQuery AS (
        /* your original CTE here… */
      )
      SELECT
        -- Format as ISO string for the full datetime
        CONVERT(VARCHAR(25), LocaleMessageTime, 126) AS LocaleMessageTime,
        -- Keep date only as 'YYYY-MM-DD'
        CONVERT(VARCHAR(10), LocaleMessageTime, 23)  AS Dateonly,
        -- Extract just the time as 'HH:MM:SS'
        CONVERT(VARCHAR(8), LocaleMessageTime, 108)  AS Swipe_Time,
        EmployeeID,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door,
        Rejection_Type
      FROM CombinedQuery
      ORDER BY LocaleMessageTime DESC
      OFFSET ${offset} ROWS
      FETCH NEXT ${pageSize} ROWS ONLY;
    `;

    const result = await request.query(sqlQuery);

    res.json({
      page,
      pageSize,
      data: result.recordset,
    });
  } catch (error) {
    console.error('SQL error:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};







When i select Top 100 rows we got this API responce

{
        "LocaleMessageTime": "2025-04-09T13:15:36.000Z",
        "Dateonly": "2025-04-09T00:00:00.000Z",
        "Swipe_Time": "1970-01-01T13:15:36.000Z",
        "EmployeeID": "0",
        "ObjectName1": "India, TEMP_PUN_001",
        "PersonnelType": "Temp Badge",
        "CardNumber": "411101",
        "AdmitCode": "Admit",
        "Direction": "InDirection",
        "Door": "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR",
        "Rejection_Type": null
    },
    {
        "LocaleMessageTime": "2025-04-09T12:23:39.000Z",
        "Dateonly": "2025-04-09T00:00:00.000Z",
        "Swipe_Time": "1970-01-01T12:23:39.000Z",
        "EmployeeID": "0",
        "ObjectName1": "India, TEMP_PUN_001",
        "PersonnelType": "Temp Badge",
        "CardNumber": "411101",
        "AdmitCode": "Admit",
        "Direction": "InDirection",
        "Door": "APAC_IN_PUN_TOWER B_ST5_KAPIL DEV DOOR",
        "Rejection_Type": null
    },
    {
        "LocaleMessageTime": "2025-04-09T10:24:55.000Z",
        "Dateonly": "2025-04-09T00:00:00.000Z",
        "Swipe_Time": "1970-01-01T10:24:55.000Z",
        "EmployeeID": "0",
        "ObjectName1": "India, TEMP_PUN_001",
        "PersonnelType": "Temp Badge",
        "CardNumber": "411101",
        "AdmitCode": "Admit",
        "Direction": "InDirection",
        "Door": "APAC_IN_PUN_PODIUM_RED_MAIN LIFT LOBBY ENTRY 1-DOOR",
        "Rejection_Type": null
    },
    {
        "LocaleMessageTime": "2025-04-06T12:56:16.000Z",
        "Dateonly": "2025-04-06T00:00:00.000Z",
        "Swipe_Time": "1970-01-01T12:56:16.000Z",
        "EmployeeID": "0",
        "ObjectName1": "India, TEMP_PUN_001",
        "PersonnelType": "Temp Badge",
        "CardNumber": "411101",
        "AdmitCode": "Admit",
        "Direction": "InDirection",
        "Door": "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR",
        "Rejection_Type": null
    },
    {
        "LocaleMessageTime": "2025-04-06T11:27:45.000Z",
        "Dateonly": "2025-04-06T00:00:00.000Z",
        "Swipe_Time": "1970-01-01T11:27:45.000Z",
        "EmployeeID": "0",
        "ObjectName1": "India, TEMP_PUN_001",
        "PersonnelType": "Temp Badge",
        "CardNumber": "411101",
        "AdmitCode": "Admit",
        "Direction": "InDirection",
        "Door": "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR",
        "Rejection_Type": null
    },
    {
