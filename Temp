File 1
// config/siteConfig.js

const { pool: punePool, sql } = require('./db'); 

// Create Denver connection
const denverPool = new sql.ConnectionPool({
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
});

denverPool.connect();

module.exports = {
  pune: {
    name: 'Pune',
    pool: punePool,
    doorZoneMap:   require('../data/doorZoneMap'),
    zoneFloorMap:  require('../data/zoneFloorMap')
  },
  denver: {
    name: 'Denver',
    pool: denverPool,
    zoneFloorMap:  require('../data/denverDoorFloorMap'),
  }
};





File 2

// controllers/denverLiveOccupancyController.js

const { DateTime }      = require('luxon');
const { denver }        = require('../config/siteConfig');
const doorFloorMap      = require('../data/denverDoorFloorMap');
const sql               = require('mssql');

const warnedKeys = new Set();

/** Normalize a raw door name + direction into a lookup key. */
function normalizeDoorKey(rawDoorName, rawDirection) {
  const base = rawDoorName
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase()
    .replace(/-IN$/i, '')
    .replace(/-OUT$/i, '');
  const dir = rawDirection.toUpperCase().includes('IN') ? 'IN' : 'OUT';
  return `${base}___${dir}`;
}

/** Map a swipe’s door+direction to a floor label. */
function mapDoorToFloor(rawDoorName, rawDirection) {
  const key = normalizeDoorKey(rawDoorName, rawDirection);
  if (doorFloorMap[key]) {
    return doorFloorMap[key];
  }
  // fallback: extract "Floor N" from something like "US.CO.HQ. 12. …"
  const m = key.match(/\b(\d{1,2})\./);
  if (m) {
    return `Floor ${m[1]}`;
  }
  // warn once
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}" (raw "${rawDoorName}", dir "${rawDirection}")`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

/**
 * Fetch all swipe events since `since`.
 * Returns recordset with fields:
 *   LocaleMessageTime, Dateonly, Swipe_Time,
 *   EmployeeID, PersonGUID, ObjectName1,
 *   PersonnelType, CardNumber, AdmitCode,
 *   Direction, Door
 */
async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
          THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name            AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]'     ,'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]'          ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel      t2    ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType  t3    ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/** True if the `Dateonly` string falls on today in Denver. */
function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
                             .toFormat('yyyy-LL-dd');
  const today      = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

/**
 * Build both:
 *  • the live floor-occupancy snapshot, and
 *  • the “visited Today” deduped totals,
 * from exactly the same in-memory data.
 */
function buildOccupancyForToday(allEvents) {
  // 1) filter only today’s InDirection swipes
  const todayIn = allEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );

  // 2) dedupe: keep only the latest swipe per PersonGUID
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // 3) tally employees vs contractors, and group by floor
  let employees   = 0;
  let contractors = 0;
  const floorMap  = {};

  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);

    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));

  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employees   },
      { personnelType: 'Contractor', count: contractors }
    ],
    totalVisitedToday:  finalList.length,
    visitedToday:       { employees, contractors, total: finalList.length }
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();

  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  // start streaming all swipes from 24h ago
  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    // build everything from the same today-only, deduped data
    const payload = buildOccupancyForToday(events);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  // initial + interval
  await push();
  const timer = setInterval(push, 1000);




file 3

// server.js

const express = require('express');
const cors    = require('cors');
const path    = require('path');

const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// simple sanity-check
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers under /api
app.use('/api', employeeRoutes);           // /api/employees
app.use('/api', liveOccupancyRoutes);      // /api/live-occupancy
app.use('/api', occupancyDenverRoutes);    // /api/live-occupancy/denver

// debug: list registered endpoints
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\n📋 Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
}

// serve React build (if any)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));




  req.on('close', () => clearInterval(timer));
};




file 4
.env

DB_SERVER=SRVWUPNQ0986V
DB_USER=GSOC_Test
DB_PASSWORD=Westernuniongsoc@2025
DB_DATABASE=ACVSUJournal_00010020
PORT=5000
