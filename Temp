// src/components/FloorOccupancyChart.jsx
import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

// 15 dark→light gradient pairs
const FLOOR_GRADIENTS = [
  ['#002f6c', '#bfd6ff'], // Navy Blue
  ['#3b4cca', '#d0d8ff'], // Slate Blue
  ['#006d5b', '#cffaf3'], // Teal Green
  ['#4e5d6c', '#d6e3f0'], // Steel Gray
  ['#4b0082', '#e0ccff'], // Royal Purple
  ['#264653', '#a0b5d8'], // Dark Cyan
  ['#9b2226', '#ffb3b3'], // Crimson
  ['#005f73', '#caebf2'], // Dark Teal
  ['#7f6000', '#fff2cc'], // Dark Gold
  ['#6a1b9a', '#e5ccf2'], // Deep Purple
  ['#8b0000', '#ffcccc'], // Dark Red
  ['#006400', '#ccffcc'], // Dark Green
  ['#8b4513', '#ffe5cc'], // Saddle Brown
  ['#2f4f4f', '#d9d9d9'], // Dark Slate Gray
  ['#483d8b', '#e6e6fa']  // Dark Slate Blue
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor detail data available.</Card>;
  }

  // Sort descending
  const sortedData = [...data].sort((a, b) => b.total - a.total);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#ffffff'
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={sortedData}
              margin={{ top: 30, right: 30, left: 10, bottom: 40 }}
            >
              {/* Define one gradient per floor */}
              <defs>
                {sortedData.map((_, idx) => {
                  const [dark, light] = FLOOR_GRADIENTS[idx % FLOOR_GRADIENTS.length];
                  return (
                    <linearGradient
                      id={`floorGrad-${idx}`}
                      key={idx}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={dark} stopOpacity={1}/>
                      <stop offset="100%" stopColor={light} stopOpacity={1}/>
                    </linearGradient>
                  );
                })}
              </defs>

              <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis
                dataKey="floor"
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Floor', position: 'bottom', offset: 20 }}
              />
              <YAxis
                allowDecimals={false}
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 10 }}
              />

              <Tooltip
                wrapperStyle={{
                  backgroundColor: '#fff',
                  border: '1px solid #ccc',
                  borderRadius: '4px'
                }}
              />

              <Legend
                verticalAlign="bottom"
                wrapperStyle={{ paddingTop: 10 }}
                formatter={(value) => (
                  <span style={{ color: '#FFD100', fontWeight: 'bold' }}>
                    {value}
                  </span>
                )}
              />

              <Bar dataKey="total" name="Occupancy" radius={[6, 6, 0, 0]}>
                {sortedData.map((_, idx) => (
                  <Cell
                    key={idx}
                    fill={`url(#floorGrad-${idx})`}
                    stroke="#fff"
                    strokeWidth={1}
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}











// src/components/FloorOccupancyChart.jsx
import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

// Western Union–inspired floor colors (for header & legend text only)
const HEADER_BG = 'bg-dark text-warning text-center';

// NO more plain solid fills—define a light gradient for every floor
const DEFAULT_FLOOR_GRADIENT = ['#3B4CCA', '#D0D8FF']; // Slate-blue → light fade

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor detail data available.</Card>;
  }

  // Sort descending
  const sortedData = [...data].sort((a, b) => b.total - a.total);

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className={HEADER_BG}>
        Floor-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#ffffff'
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={sortedData}
              margin={{ top: 30, right: 30, left: 10, bottom: 40 }}
            >
              {/* Define one gradient for each floor */}
              <defs>
                {sortedData.map((floorEntry, idx) => (
                  <linearGradient
                    id={`floorGrad-${idx}`}
                    key={idx}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={DEFAULT_FLOOR_GRADIENT[0]} stopOpacity={1}/>
                    <stop offset="100%" stopColor={DEFAULT_FLOOR_GRADIENT[1]} stopOpacity={1}/>
                  </linearGradient>
                ))}
              </defs>

              <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis
                dataKey="floor"
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Floor', position: 'bottom', offset: 20 }}
              />
              <YAxis
                allowDecimals={false}
                tick={{ fontSize: 12, fill: '#333' }}
                label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 10 }}
              />

              <Tooltip wrapperStyle={{ backgroundColor: '#fff', border: '1px solid #ccc', borderRadius: '4px' }} />

              <Legend
                verticalAlign="bottom"
                wrapperStyle={{ paddingTop: 10 }}
                formatter={(value) => (
                  <span style={{ color: '#FFD100', fontWeight: 'bold' }}>
                    {value}
                  </span>
                )}
              />

              <Bar dataKey="total" name="Occupancy" radius={[6, 6, 0, 0]}>
                {sortedData.map((_, idx) => (
                  <Cell
                    key={`cell-${idx}`}
                    fill={`url(#floorGrad-${idx})`}
                    stroke="#fff"
                    strokeWidth={1}
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}

















Now below Theme is Confirm 

// src/components/SummaryChart.jsx
import React, { useEffect } from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  Legend,
  Cell
} from 'recharts';
import { Card } from 'react-bootstrap';

// Zone gradients (dark → faint)
const ZONE_GRADIENTS = {
  'RED ZONE':    ['#A80000', '#FFCCCC'],
  'Yellow zone': ['#B28000', '#FFF2CC'],
  'Orange Zone': ['#C75D00', '#FFE0B2'],
  'Green Zone':  ['#006400', '#CCFFCC'],
  'Reception Area':['E0CCFF','#4B0082',],
};

// Zone label colors (for label + tooltip text only)
const ZONE_LABEL_COLORS = {
  'RED ZONE':    '#A80000',
  'Yellow zone': '#B28000',
  'Orange Zone': '#C75D00',
  'Green Zone':  '#006400',
};

// Fallback gradient for unmapped zones
const DEFAULT_FADED_GRADIENT = ['#3B4CCA', '#D0D8FF', '#4B0082','E0CCFF'];  // dark → light gray

export default function SummaryChart({ summary = [] }) {
  useEffect(() => {
    console.log('Summary Chart Data:', summary);
  }, [summary]);

  if (!summary.length) {
    return <Card body>No zone data available</Card>;
  }

  const renderLabel = ({ x, y, width, value, index }) => {
    const zone = summary[index].zone;
    const color = ZONE_LABEL_COLORS[zone] || '#333';
    return (
      <text
        x={x + width / 2}
        y={y - 6}
        fill={color}
        textAnchor="middle"
        fontSize={12}
        fontWeight="bold"
      >
        {value}
      </text>
    );
  };

  const renderTooltip = ({ active, payload, label }) => {
    if (!active || !payload?.length) return null;
    const { zone, count } = payload[0].payload;
    const color = ZONE_LABEL_COLORS[zone] || '#333';
    return (
      <div
        style={{
          backgroundColor: '#fff',
          border: '1px solid #ccc',
          padding: '8px',
          borderRadius: '4px',
          color: '#000'
        }}
      >
        <div><strong>{label}</strong></div>
        <div style={{ color }}>
          {payload[0].name}: {count}
        </div>
      </div>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: '#e0e0e0' }}>
      <Card.Header className="bg-dark text-warning text-center">
        Zone-wise Occupancy
      </Card.Header>
      <Card.Body style={{ height: 400, padding: 0 }}>
        <div
          style={{
            height: '100%',
            border: '1px solid #ccc',
            borderRadius: '4px',
            backgroundColor: '#ffffff'
          }}
        >
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={summary}
              margin={{ top: 20, right: 30, left: 0, bottom: 5 }}
            >
              {/* Gradients for each bar */}
              <defs>
                {summary.map((entry, idx) => {
                  const grad = ZONE_GRADIENTS[entry.zone] || DEFAULT_FADED_GRADIENT;
                  return (
                    <linearGradient
                      id={`grad-${idx}`}
                      key={idx}
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="0%" stopColor={grad[0]} stopOpacity={1}/>
                      <stop offset="100%" stopColor={grad[1]} stopOpacity={1}/>
                    </linearGradient>
                  );
                })}
              </defs>

              <CartesianGrid stroke="#d0d0d0" strokeDasharray="4 4" />
              <XAxis dataKey="zone" tick={{ fontSize: 12, fill: '#333' }} />
              <YAxis allowDecimals={false} tick={{ fontSize: 12, fill: '#333' }} />

              <Tooltip content={renderTooltip} />

              <Legend
                verticalAlign="bottom"
                wrapperStyle={{ paddingTop: 10 }}
                formatter={(value) => (
                  <span style={{ color: '#FFD100', fontWeight: 'bold' }}>
                    {value}
                  </span>
                )}
              />

              <Bar
                dataKey="count"
                name="Count"
                radius={[6, 6, 0, 0]}
                label={renderLabel}
              >
                {summary.map((_, idx) => (
                  <Cell
                    key={`cell-${idx}`}
                    fill={`url(#grad-${idx})`}
                    stroke="#fff"
                    strokeWidth={1}
                  />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </Card.Body>
    </Card>
  );
}



read Above theme File carefully.and make same changes in below file .
Give me This Below Updated js file carefully


import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Legend,
  Cell,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';

// Western Union-inspired floor colors
const FLOOR_COLORS = [
  '#FFD100', // WU Yellow
  '#000000', // Black
  '#58595B', // Gray
  '#FFB800', // Accent Yellow
  '#C0C0C0', // Light Gray
  '#333333', // Dark Gray
  '#F2C744', // WU warm highlight
  '#A6A6A6', // neutral
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return <Card body>No floor data available</Card>;
  }

  // Sort by count descending
  const sortedData = [...data].sort((a, b) => b.total - a.total);

  return (
    <Card className="mb-4">
      <Card.Header>Floor-wise Occupancy</Card.Header>
      <Card.Body style={{ height: 400 }}>
        
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={sortedData}
            margin={{ top: 30, right: 30, left: 10, bottom: 40 }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#333' }}
              label={{ value: 'Floor', position: 'bottom', offset: 20 }}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#333' }}
              allowDecimals={false}
              label={{ value: 'Occupancy', angle: -90, position: 'insideLeft', offset: 10 }}
            />
            <Tooltip />
            <Legend verticalAlign="bottom" wrapperStyle={{ paddingTop: 10 }} />
            <Bar dataKey="total" name="Occupancy" radius={[6, 6, 0, 0]}>
              {
                sortedData.map((entry, idx) => (
                  <Cell key={`cell-${idx}`} fill={FLOOR_COLORS[idx % FLOOR_COLORS.length]} />
                ))
              }
              <LabelList dataKey="total" position="top" style={{ fill: '#000', fontSize: 12 }} />
            </Bar>
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}

