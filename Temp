
async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zoneRaw  = mapDoorToZone(Door, Direction);
    const zone     = zoneRaw && zoneRaw.toLowerCase();

    // 1) True "Out of office" → full eviction
    if (Direction === 'OutDirection' && zone === 'out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    // 2) Any other OutDirection → keep them (outer areas, reception exits, etc.)
    if (Direction === 'OutDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        // re-use the exact-cased string so your details match zoneFloorMap keys:
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 3) InDirection → normal check-in
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 4) Catch-all eviction
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // live headcounts (only from uniquePeople, which has already evicted all true out-of-office)
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // Build zone→people map, but filter out any out-of-office at this final step too
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    const zKey = emp.zone.toLowerCase();
    if (zKey === 'out of office') continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  // zoneDetails
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ zone, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // floorBreakdown
  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }





  const ertStatus = Object.fromEntries(
  Object.entries(ertMembers).map(([role, members]) => {
    const list = members.map(m => {
      // Check if this name appears in current (matching ObjectName1)
      const present = Object.values(current).some(e => e.ObjectName1 === m.name);
      return { ...m, present };
    });
    return [ role, list ];
  })
);



  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
     ertStatus,
    // personnelBreakdown:[
    //   { personnelType:'Employee',   count: employeeCount },
    //   { personnelType:'Contractor', count: contractorCount }
    // ]

  personnelBreakdown: (() => {
    const map = new Map();
    // uniquePeople: Map<dedupKey, PersonnelType>
    for (const pt of uniquePeople.values()) {
      map.set(pt, (map.get(pt) || 0) + 1);
    }
    return Array.from(map, ([personnelType, count]) => ({ personnelType, count }));
  })(),



  };
}



/** Build “visited today” from the same in‐memory stream */
function buildVisitedToday(allEvents) {
  // IST “today” string
  const today = DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

  // only today's InDirection swipes
  const todayIns = allEvents.filter(evt => {
    if (evt.Direction !== 'InDirection' || !evt.LocaleMessageTime) return false;
    const swipeDate = DateTime
      .fromJSDate(evt.LocaleMessageTime, { zone:'Asia/Kolkata' })
      .toFormat('yyyy-LL-dd');
    return swipeDate === today;
  });

  // dedupe by PersonGUID → keep latest
  const dedup = new Map();
  for (const e of todayIns) {
    const prev = dedup.get(e.PersonGUID);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(e.PersonGUID, e);
    }
  }

  const finalList   = Array.from(dedup.values());
  const employees   = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

/** Server‐Sent‐Events endpoint */
exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;

    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');

    // pull last 24h on startup
    let lastSeen = new Date(Date.now() - 24*60*60*1000);
    const events = [];

    const push = async () => {
      const fresh = await fetchNewEvents(lastSeen);
      if (fresh.length) {
        lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
        events.push(...fresh);
      }

      // build occupancy + today counts
      const occupancy  = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday      = {
        employees:   todayStats.employees,
        contractors: todayStats.contractors,
        total:       todayStats.total
      };

      
// occupancy.ertStatus = ertStatus;

res.write(`data: ${JSON.stringify(occupancy)}\n\n`);

      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
    };

    await push();
    const timer = setInterval(push, 1000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};

























// controllers/denverLiveOccupancyController.js

const { DateTime } = require('luxon');
const { denver } = require('../config/siteConfig');
const doorFloorMap = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql = require('mssql');
const normalizeKey = require('../data/normalizeKey');

const warnedKeys = new Set();
const normalizedMonitoredKeys = new Set(
  Object.entries(monitoredDoors).map(([door, dir]) => normalizeKey(door, dir))
);

function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' }).toFormat('yyyy-LL-dd');
  const today = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req = pool.request();
  req.input('since', sql.DateTime2, since);
  const { recordset } = await req.query(`
    SELECT
      PersonGUID, EmployeeID, CardNumber, Direction, Door,
      Swipe_Time, Dateonly, LocaleMessageTime, PersonnelType
    FROM ACVSUJournal_00010020.dbo.LiveSwipeEvent
    WHERE LocaleMessageTime > @since
    ORDER BY LocaleMessageTime ASC
  `);
  return recordset;
}

function computeTotalVisitedToday(allEvents) {
  const seen = new Set();
  allEvents.forEach(evt => {
    if (evt.Direction === 'InDirection' && isTodayInDenver(evt.Dateonly)) {
      const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
      seen.add(key);
    }
  });
  return seen.size;
}

function buildOccupancyForToday(allEvents, freshEvents) {
  const lastSwipeMap = new Map();

  // Build latest swipe per person
  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    const prev = lastSwipeMap.get(key);
    const now = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      lastSwipeMap.set(key, evt);
    }
  });

  // Keep only those whose last swipe is InDirection
  const liveOccupants = Array.from(lastSwipeMap.values()).filter(evt =>
    evt.Direction === 'InDirection'
  );

  // Fallback if none detected
  let finalList = liveOccupants;
  if (finalList.length === 0) {
    finalList = freshEvents.filter(e =>
      e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
    );
  }

  let liveEmployees = 0;
  let liveContractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      liveEmployees++;
    } else {
      liveContractors++;
    }
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occ]) => ({
    floor,
    total: occ.length,
    occupants: occ
  }));

  const personnelBreakdown = Object.entries(
    finalList.reduce((m, e) => {
      m.set(e.PersonnelType, (m.get(e.PersonnelType) || 0) + 1);
      return m;
    }, new Map())
  ).map(([personnelType, count]) => ({ personnelType, count }));

  const totalInSwipes = freshEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  ).length;
  const totalOutSwipes = freshEvents.filter(e =>
    e.Direction === 'OutDirection' && isTodayInDenver(e.Dateonly)
  ).length;

  const validEvents = allEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      const key = normalizeKey(evt.Door.trim(), evt.Direction.trim());
      return normalizedMonitoredKeys.has(key);
    });

  const dedupedIO = new Map();
  validEvents.forEach(evt => {
    const fl = mapDoorToFloor(evt.Door, evt.Direction);
    const mapKey = `${evt.PersonGUID}___${fl}___${evt.Direction}`;
    const prev = dedupedIO.get(mapKey);
    const now = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      dedupedIO.set(mapKey, evt);
    }
  });

  const floorIO = {};
  Array.from(dedupedIO.values()).forEach(evt => {
    const fl = mapDoorToFloor(evt.Door, evt.Direction);
    if (fl === 'Out of office') return;
    floorIO[fl] = floorIO[fl] || {
      inSwipes: 0,
      outSwipes: 0,
      inSet: new Set(),
      outSet: new Set()
    };
    if (evt.Direction === 'InDirection') {
      floorIO[fl].inSwipes++;
      floorIO[fl].inSet.add(evt.PersonGUID);
    } else {
      floorIO[fl].outSwipes++;
      floorIO[fl].outSet.add(evt.PersonGUID);
    }
  });

  const floorInOutSummary = Object.entries(floorIO).map(([floor, stats]) => {
    const inOnly = [...stats.inSet].filter(id => !stats.outSet.has(id));
    return {
      floor,
      inSwipes: stats.inSwipes,
      outSwipes: stats.outSwipes,
      inOnlyCount: inOnly.length,
      inOnlyPersons: inOnly
    };
  });

  const totalVisitedToday = computeTotalVisitedToday(allEvents);
  const seenMap = new Map();
  allEvents.forEach(evt => {
    if (evt.Direction !== 'InDirection' || !isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    if (!seenMap.has(key)) seenMap.set(key, evt.PersonnelType);
  });

  let visitedEmployees = 0;
  let visitedContractors = 0;
  seenMap.forEach(type => {
    if (type === 'Employee' || type === 'Terminated Personnel') {
      visitedEmployees++;
    } else {
      visitedContractors++;
    }
  });

  return {
    asOf: new Date().toISOString(),
    currentCount: finalList.length,
    floorBreakdown,
    personnelSummary: { employees: liveEmployees, contractors: liveContractors },
    personnelBreakdown,
    totalVisitedToday,
    visitedToday: {
      employees: visitedEmployees,
      contractors: visitedContractors,
      total: seenMap.size
    },
    swipeStats: { totalInSwipes, totalOutSwipes },
    floorInOutSummary
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    Connection: 'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};











// controllers/denverLiveOccupancyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql                = require('mssql');
const normalizeKey       = require('../data/normalizeKey');

const warnedKeys = new Set();

// Precompute normalized keys for your strict in/out doors
const normalizedMonitoredKeys = new Set(
  Object.entries(monitoredDoors).map(([door, dir]) =>
    normalizeKey(door, dir)
  )
);

function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
    .toFormat('yyyy-LL-dd');
  const today     = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);
  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, PersonnelType,
      CardNumber, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);
  return recordset;
}

function computeTotalVisitedToday(allEvents) {
  const seen = new Set();
  allEvents.forEach(evt => {
    if (evt.Direction === 'InDirection' && isTodayInDenver(evt.Dateonly)) {
      seen.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });
  return seen.size;
}

function buildOccupancyForToday(allEvents, freshEvents) {
  // ─── A) Evict truly Out-of-office ────────────────────────────────
  const lastByPerson = new Map();
  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    const prev = lastByPerson.get(key);
    if (!prev || evt.LocaleMessageTime > prev.LocaleMessageTime) {
      lastByPerson.set(key, evt);
    }
  });

  const evicted = new Set();
  lastByPerson.forEach(evt => {
    if (
      evt.Direction === 'OutDirection' &&
      mapDoorToFloor(evt.Door, evt.Direction) === 'Out of office'
    ) {
      evicted.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });

  // ─── 1) Build liveMap deduped by last InDirection ─────────────
  const liveMap = new Map();
  allEvents.forEach(evt => {
    if (evt.Direction !== 'InDirection' || !isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    if (evicted.has(key)) return;
    const prev = liveMap.get(key);
    const now  = evt.LocaleMessageTime.getTime();
    if (!prev || now > prev.LocaleMessageTime.getTime()) {
      liveMap.set(key, evt);
    }
  });

  let finalList = Array.from(liveMap.values());

  // ← Fallback: if no live occupants, use freshEvents InDirection
  if (finalList.length === 0) {
    const freshMap = new Map();
    freshEvents.forEach(evt => {
      if (evt.Direction !== 'InDirection' || !isTodayInDenver(evt.Dateonly)) return;
      const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
      const prev = freshMap.get(key);
      const now  = evt.LocaleMessageTime.getTime();
      if (!prev || now > prev.LocaleMessageTime.getTime()) {
        freshMap.set(key, evt);
      }
    });
    if (freshMap.size > 0) {
      finalList = Array.from(freshMap.values());
    }
  }

  // ─── 2) Live occupancy counts & floor breakdown ────────────────
  let liveEmployees   = 0;
  let liveContractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      liveEmployees++;
    } else {
      liveContractors++;
    }
  });
  const floorBreakdown = Object.entries(floorMap).map(([floor, occ]) => ({
    floor,
    total:     occ.length,
    occupants: occ
  }));

  // ─── 3) Personnel breakdown (live) ─────────────────────────────
  const personnelBreakdown = Object.entries(
    finalList.reduce((m, e) => {
      m.set(e.PersonnelType, (m.get(e.PersonnelType) || 0) + 1);
      return m;
    }, new Map())
  ).map(([personnelType, count]) => ({ personnelType, count }));

  // ─── 4) Swipe stats (freshEvents only) ─────────────────────────
  const totalInSwipes  = freshEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  ).length;
  const totalOutSwipes = freshEvents.filter(e =>
    e.Direction === 'OutDirection' && isTodayInDenver(e.Dateonly)
  ).length;

  // ─── 5) Floor In/Out summary (strict doors only) ───────────────
  const validEvents = allEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      const key = normalizeKey(evt.Door.trim(), evt.Direction.trim());
      return normalizedMonitoredKeys.has(key);
    });

  const dedupedIO = new Map();
  validEvents.forEach(evt => {
    const fl     = mapDoorToFloor(evt.Door, evt.Direction);
    const mapKey = `${evt.PersonGUID}___${fl}___${evt.Direction}`;
    const prev   = dedupedIO.get(mapKey);
    const now    = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      dedupedIO.set(mapKey, evt);
    }
  });

  const floorInOutSummary = Array.from(dedupedIO.values()).reduce((acc, evt) => {
    const fl = mapDoorToFloor(evt.Door, evt.Direction);
    if (fl === 'Out of office') return acc;
    acc[fl] = acc[fl] || {
      inSwipes:  0,
      outSwipes: 0,
      inSet:     new Set(),
      outSet:    new Set()
    };
    if (evt.Direction === 'InDirection') {
      acc[fl].inSwipes++;
      acc[fl].inSet.add(evt.PersonGUID);
    } else {
      acc[fl].outSwipes++;
      acc[fl].outSet.add(evt.PersonGUID);
    }
    return acc;
  }, {});

  const floorIOArray = Object.entries(floorInOutSummary).map(([floor, stats]) => {
    const inOnly = [...stats.inSet].filter(id => !stats.outSet.has(id));
    return {
      floor,
      inSwipes:      stats.inSwipes,
      outSwipes:     stats.outSwipes,
      inOnlyCount:   inOnly.length,
      inOnlyPersons: inOnly
    };
  });

  // ─── 6) Visitors today (first-swipe only) ──────────────────────
  const totalVisitedToday = computeTotalVisitedToday(allEvents);
  const seenMap = new Map();
  allEvents.forEach(evt => {
    if (evt.Direction !== 'InDirection' || !isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    if (!seenMap.has(key)) seenMap.set(key, evt.PersonnelType);
  });
  let visitedEmployees   = 0;
  let visitedContractors = 0;
  seenMap.forEach(type => {
    if (type === 'Employee' || type === 'Terminated Personnel') {
      visitedEmployees++;
    } else {
      visitedContractors++;
    }
  });

  // ─── 7) Return full payload ─────────────────────────────────────
  return {
    asOf:               new Date().toISOString(),

    // Live occupancy
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees: liveEmployees, contractors: liveContractors },
    personnelBreakdown,

    // Visitors today
    totalVisitedToday,
    visitedToday:       {
      employees:   visitedEmployees,
      contractors: visitedContractors,
      total:       seenMap.size
    },

    // Swipe stats & in/out summary
    swipeStats:         { totalInSwipes, totalOutSwipes },
    floorInOutSummary:  floorIOArray
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};










// controllers/denverLiveOccupancyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql                = require('mssql');
const normalizeKey       = require('../data/normalizeKey');

const warnedKeys = new Set();
const normalizedMonitoredKeys = new Set(
  Object.entries(monitoredDoors).map(([door, dir]) =>
    normalizeKey(door, dir)
  )
);

function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
    .toFormat('yyyy-LL-dd');
  const today     = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);
  const { recordset } = await req.query(`
    /* … your same SQL … */
  `);
  return recordset;
}

function computeTotalVisitedToday(allEvents) {
  const seen = new Set();
  allEvents.forEach(evt => {
    if (evt.Direction === 'InDirection' && isTodayInDenver(evt.Dateonly)) {
      seen.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });
  return seen.size;
}

function buildOccupancyForToday(allEvents, freshEvents) {
  // ─── A) Evict “Out of office” ───────────────────────────────────
  const lastByPerson = new Map();
  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    const prev = lastByPerson.get(key);
    if (!prev || evt.LocaleMessageTime > prev.LocaleMessageTime) {
      lastByPerson.set(key, evt);
    }
  });
  const evicted = new Set();
  lastByPerson.forEach(evt => {
    if (
      evt.Direction === 'OutDirection' &&
      mapDoorToFloor(evt.Door, evt.Direction) === 'Out of office'
    ) {
      evicted.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });

  // ─── 1) Dedupe live InDirection by last swipe ──────────────────
  const liveMap = new Map();
  allEvents.forEach(evt => {
    if (evt.Direction !== 'InDirection' || !isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    if (evicted.has(key)) return;
    const prev = liveMap.get(key);
    const now  = DateTime.fromISO(evt.LocaleMessageTime).toMillis();
    if (!prev || now > DateTime.fromISO(prev.LocaleMessageTime).toMillis()) {
      liveMap.set(key, evt);
    }
  });
  let finalList = Array.from(liveMap.values());

  // ← Fallback: dedupe fresh InDirection if no liveList found
  if (finalList.length === 0) {
    const freshIns = freshEvents.filter(e =>
      e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
    );
    if (freshIns.length > 0) {
      const fallbackMap = new Map();
      freshIns.forEach(evt => {
        const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
        const prev = fallbackMap.get(key);
        const now  = DateTime.fromISO(evt.LocaleMessageTime).toMillis();
        if (!prev || now > DateTime.fromISO(prev.LocaleMessageTime).toMillis()) {
          fallbackMap.set(key, evt);
        }
      });
      finalList = Array.from(fallbackMap.values());
    }
  }

  // ─── 2) Live occupancy counts & floor breakdown ────────────────
  let liveEmployees   = 0;
  let liveContractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (
      e.PersonnelType === 'Employee' ||
      e.PersonnelType === 'Terminated Personnel'
    ) {
      liveEmployees++;
    } else {
      liveContractors++;
    }
  });
  const floorBreakdown = Object.entries(floorMap).map(
    ([floor, occ]) => ({ floor, total: occ.length, occupants: occ })
  );

  // ─── 3) Live personnel breakdown ───────────────────────────────
  const personnelBreakdown = Object.entries(
    finalList.reduce((m, e) => {
      m.set(e.PersonnelType, (m.get(e.PersonnelType) || 0) + 1);
      return m;
    }, new Map())
  ).map(([personnelType, count]) => ({ personnelType, count }));

  // ─── 4) Swipe stats (freshEvents only) ─────────────────────────
  const totalInSwipes  = freshEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  ).length;
  const totalOutSwipes = freshEvents.filter(e =>
    e.Direction === 'OutDirection' && isTodayInDenver(e.Dateonly)
  ).length;

  // ─── 5) Floor In/Out summary (strict doors only) ───────────────
  const validEvents = allEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      const key = normalizeKey(evt.Door.trim(), evt.Direction.trim());
      return normalizedMonitoredKeys.has(key);
    });

  const dedupIO = new Map();
  validEvents.forEach(evt => {
    const fl     = mapDoorToFloor(evt.Door, evt.Direction);
    const mapKey = `${evt.PersonGUID}___${fl}___${evt.Direction}`;
    const prev   = dedupIO.get(mapKey);
    const now    = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      dedupIO.set(mapKey, evt);
    }
  });

  const floorInOutSummary = Object.values(
    Object.entries(
      Array.from(dedupIO.values()).reduce((acc, evt) => {
        const fl = mapDoorToFloor(evt.Door, evt.Direction);
        if (fl === 'Out of office') return acc;
        acc[fl] = acc[fl] || {
          inSwipes:  0,
          outSwipes: 0,
          inSet:     new Set(),
          outSet:    new Set()
        };
        if (evt.Direction === 'InDirection') {
          acc[fl].inSwipes++;
          acc[fl].inSet.add(evt.PersonGUID);
        } else {
          acc[fl].outSwipes++;
          acc[fl].outSet.add(evt.PersonGUID);
        }
        return acc;
      }, {})
    ).map(([floor, stats]) => ({
      floor,
      inSwipes:      stats.inSwipes,
      outSwipes:     stats.outSwipes,
      inOnlyCount:   [...stats.inSet].filter(id => !stats.outSet.has(id)).length,
      inOnlyPersons: [...stats.inSet].filter(id => !stats.outSet.has(id))
    }))
  );

  // ─── 6) Visitors today (first-swipe only) ──────────────────────
  const totalVisitedToday = computeTotalVisitedToday(allEvents);
  const seenMap = new Map();
  allEvents.forEach(evt => {
    if (
      evt.Direction !== 'InDirection' ||
      !isTodayInDenver(evt.Dateonly)
    ) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    if (!seenMap.has(key)) seenMap.set(key, evt.PersonnelType);
  });
  let visitedEmployees   = 0;
  let visitedContractors = 0;
  seenMap.forEach(type => {
    if (type === 'Employee' || type === 'Terminated Personnel') {
      visitedEmployees++;
    } else {
      visitedContractors++;
    }
  });

  // ─── 7) Return full payload ─────────────────────────────────────
  return {
    asOf:               new Date().toISOString(),

    // live occupancy
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees: liveEmployees, contractors: liveContractors },
    personnelBreakdown,

    // visitors today
    totalVisitedToday,
    visitedToday:       {
      employees:   visitedEmployees,
      contractors: visitedContractors,
      total:       seenMap.size
    },

    // swipe stats & in/out summary
    swipeStats:         { totalInSwipes, totalOutSwipes },
    floorInOutSummary
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};


















// controllers/denverLiveOccupancyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql                = require('mssql');
const normalizeKey = require('../data/normalizeKey');

const warnedKeys = new Set();


/** Determine floor label, fallback to “HQ. N.” parsing **/
function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

/** Strip any trailing “_HH:MM:SS” from a door name **/
function stripTimeSuffix(doorRaw) {
  return doorRaw.replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '');
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType   = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
    .toFormat('yyyy-LL-dd');
  const today = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

/**
 * Build live occupancy + swipe summaries.
 * @param {Array} allEvents   – cumulative events (for occupancy)
 * @param {Array} freshEvents – just-fetched events (for swipeStats & floorInOut)
 */

function computeVisitedToday(allEvents) {
  const seen = new Set();
  allEvents.forEach(evt => {
    if (evt.Direction === 'InDirection' && isTodayInDenver(evt.Dateonly)) {
      const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
      seen.add(key);
    }
  });
  return seen.size;
}






function buildOccupancyForToday(allEvents, freshEvents) {
  // ─── A) Evict anyone who swiped truly “out of office” ───────────
  const evicted = new Set();
  // scan most recent event per person
  const lastByPerson = new Map();
  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    const prev = lastByPerson.get(key);
    if (!prev || evt.LocaleMessageTime > prev.LocaleMessageTime) {
      lastByPerson.set(key, evt);
    }
  });
  // any latest event that maps to Out of office evicts
  lastByPerson.forEach(evt => {
    if (evt.Direction === 'OutDirection' && mapDoorToFloor(evt.Door, evt.Direction) === 'Out of office') {
      evicted.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });
  // filter them out
  const activeEvents = allEvents.filter(evt => {
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
    return !evicted.has(key);
  });

  // ─── 1) Occupancy: dedupe by latest InDirection per person ───────
  const todayIn = activeEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // ─── 2) Floor breakdown & personnel counts ────────────────────────
  let employees = 0, contractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });
  const floorBreakdown = Object.entries(floorMap).map(([floor, occ]) => ({
    floor, total: occ.length, occupants: occ
  }));

  // ─── 3) Personnel breakdown ───────────────────────────────────────
  const personnelBreakdown = Array.from(
    finalList.reduce((m, e) => {
      m.set(e.PersonnelType, (m.get(e.PersonnelType) || 0) + 1);
      return m;
    }, new Map()),
    ([personnelType, count]) => ({ personnelType, count })
  );

  // ─── 4) Swipe stats from freshEvents only ─────────────────────────
  const totalInSwipes  = freshEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  ).length;
  const totalOutSwipes = freshEvents.filter(e =>
    e.Direction === 'OutDirection' && isTodayInDenver(e.Dateonly)
  ).length;

// +++ Add this right after your imports, to normalize your strictDoorList once +++
 const normalizedMonitoredKeys = new Set(
   Object.entries(monitoredDoors).map(([door, dir]) =>
     normalizeKey(door, dir)
   )
 );



 // ─── 5) Floor In/Out summary (only doors in strictDoorList) ───────
  const validEvents = allEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      // normalize to “KEY___DIRECTION”
      const key = normalizeKey(evt.Door.trim(), evt.Direction.trim());
      // only accept if it exactly matches one of your monitoredDoors
      return normalizedMonitoredKeys.has(key);
    });




  const dedupedMap = new Map();
  validEvents.forEach(evt => {
    const fl = mapDoorToFloor(evt.Door, evt.Direction);
    // const fl  = mapDoorToFloor(evt.Door, evt.Direction);
  
    const key = `${evt.EmployeeID}___${fl}___${evt.Direction}`;
    const prev = dedupedMap.get(key);
    const now  = DateTime.fromFormat(evt.Swipe_Time, 'HH:mm:ss');
    if (!prev || now > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      dedupedMap.set(key, evt);
    }
  });



  const floorMapIO = {};
  Array.from(dedupedMap.values()).forEach(evt => {
    //  if (fl === 'Out of office') return;
    // always recompute fl in this scope
    const fl = mapDoorToFloor(evt.Door, evt.Direction);
    // guard again, just in case
    if (fl === 'Out of office') return;

    // const fl = mapDoorToFloor(evt.Door, evt.Direction);
    floorMapIO[fl] = floorMapIO[fl] || { inSwipes: 0, outSwipes: 0, inSet: new Set(), outSet: new Set() };
    if (evt.Direction === 'InDirection') {
      floorMapIO[fl].inSwipes++;
      floorMapIO[fl].inSet.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    } else {
      floorMapIO[fl].outSwipes++;
      floorMapIO[fl].outSet.add(evt.PersonGUID || evt.EmployeeID || evt.CardNumber);
    }
  });

  const floorInOutSummary = Object.entries(floorMapIO).map(([floor, stats]) => {
    const inOnly = [...stats.inSet].filter(id => !stats.outSet.has(id));
    return {
      floor,
      inSwipes:      stats.inSwipes,
      outSwipes:     stats.outSwipes,
      inOnlyCount:   inOnly.length,
      inOnlyPersons: inOnly
    };
  });

  // ─── 6) Today visited ─────────────────────────────────────────────
  // const visitedToday = { employees, contractors, total: finalList.length };

  // ─── 6) Today visited ─────────────────────────────────────────────
  // total unique people who swiped in today
  const totalVisitedToday = computeVisitedToday(allEvents);
  // current head-count
   const currentCount = finalList.length;



  


  return {
    asOf:               new Date().toISOString(),
    //currentCount:       finalList.length,
     currentCount,

    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown,
    totalVisitedToday,              // unique people who visited today
    visitedToday: {                 // breakdown of today's visitors currently inside
      employees,
      contractors,
      total: currentCount
    },

    swipeStats:         { totalInSwipes, totalOutSwipes },
    floorInOutSummary
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }
    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};

