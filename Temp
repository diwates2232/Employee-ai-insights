data: {"asOf":"2025-05-28T10:54:59.024Z","currentCount":8,"floorBreakdown":[{"floor":"Floor 13","total":2,"occupants":[{"LocaleMessageTime":"2025-05-28T04:51:50.000Z","Dateonly":"2025-05-28","Swipe_Time":"04:51:50","EmployeeID":"W0022449","PersonGUID":"E0ECF741-9548-463A-9B4E-A3E55D50D4AC","ObjectName1":"Angel, Maria","PersonnelType":"Contractor","CardNumber":"613873","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. North Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T04:46:58.000Z","Dateonly":"2025-05-28","Swipe_Time":"04:46:58","EmployeeID":"199599","PersonGUID":"2909F487-2D9B-4413-A230-EF5D02BA465A","ObjectName1":"Formento, Dennis","PersonnelType":"Employee","CardNumber":"231699","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 13. North Lobby Doors-IN"}]},{"floor":"Floor 06","total":2,"occupants":[{"LocaleMessageTime":"2025-05-28T02:52:08.000Z","Dateonly":"2025-05-28","Swipe_Time":"02:52:08","EmployeeID":"W0026151","PersonGUID":"5EC24130-835B-4D6F-8CFC-E9C2B1993F4B","ObjectName1":"Dean, Taje","PersonnelType":"Contractor","CardNumber":"617976","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 06. Fitness Center East_11:01:02"},{"LocaleMessageTime":"2025-05-28T03:35:32.000Z","Dateonly":"2025-05-28","Swipe_Time":"03:35:32","EmployeeID":"W0022451","PersonGUID":"35327275-1D0C-4BF7-8817-6A76B5F9E29A","ObjectName1":"Alamo, Martin","PersonnelType":"Contractor","CardNumber":"613770","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 06. Fitness Center West_11:01:B9"}]},{"floor":"Floor 09","total":3,"occupants":[{"LocaleMessageTime":"2025-05-28T04:07:09.000Z","Dateonly":"2025-05-28","Swipe_Time":"04:07:09","EmployeeID":"305776","PersonGUID":"52B69EA4-1DD6-44A4-972A-EA2F87D2858E","ObjectName1":"D'Nicuola, Jeff","PersonnelType":"Employee","CardNumber":"232397","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 09. South Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T04:46:13.000Z","Dateonly":"2025-05-28","Swipe_Time":"04:46:13","EmployeeID":"248939","PersonGUID":"26EE614B-8819-4306-99DA-2E25730C894D","ObjectName1":"Wyant, Cammy J","PersonnelType":"Employee","CardNumber":"233020","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 09. South Lobby Doors-IN"},{"LocaleMessageTime":"2025-05-28T04:54:23.000Z","Dateonly":"2025-05-28","Swipe_Time":"04:54:23","EmployeeID":"74480","PersonGUID":"04BEC3F6-0BB7-4BD1-940E-012D6A8BE14A","ObjectName1":"Schloeman, William","PersonnelType":"Employee","CardNumber":"608728","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 09. North Lobby Doors-IN"}]},{"floor":"Floor 11","total":1,"occupants":[{"LocaleMessageTime":"2025-05-28T04:51:12.000Z","Dateonly":"2025-05-28","Swipe_Time":"04:51:12","EmployeeID":"319779","PersonGUID":"031037CA-9C9C-4A85-B8BB-5FF3F418D0F7","ObjectName1":"Lewis, David Wayne","PersonnelType":"Employee","CardNumber":"613494","AdmitCode":"Admit","Direction":"InDirection","Door":"US.CO.HQ. 11. South Lobby Doors-IN"}]}],"personnelSummary":{"employees":5,"contractors":3},"personnelBreakdown":[{"personnelType":"Contractor","count":3},{"personnelType":"Employee","count":5}],"totalVisitedToday":8,"visitedToday":{"employees":5,"contractors":3,"total":8},"swipeStats":{"totalInSwipes":242,"totalOutSwipes":109,"inOnlyEmployees":5,"inOnlyContractors":0},"floorInOutSummary":[{"floor":"Floor 09","inSwipes":1,"outSwipes":0,"inOnlyCount":1,"inOnlyPersons":["04BEC3F6-0BB7-4BD1-940E-012D6A8BE14A___04:54:23"]}]}

Read All file carefully and API Responce and check all function works or not and solve this issue

// controllers/denverLiveOccupancyController.js

const { DateTime }      = require('luxon');
const { denver }        = require('../config/siteConfig');
const doorFloorMap      = require('../data/denverDoorFloorMap');
const {monitoredDoors} =require ('../data/strictDoorList');
const sql               = require('mssql');

const warnedKeys = new Set();

/** Normalize door+direction key **/
function normalizeKey(rawDoor, rawDir) {
  const d = String(rawDoor || '').trim().replace(/\s+/g, ' ').toUpperCase();
  const dir = /IN/i.test(rawDir) ? 'IN' : 'OUT';
  return `${d}___${dir}`;
}

/** Determine floor label, fallback to “HQ. N.” parsing **/
function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) {
    return doorFloorMap[key];
  }
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) {
    return `Floor ${m[1]}`;
  }
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR) 
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2    ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3    ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' }).toFormat('yyyy-LL-dd');
  const today     = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}


function buildOccupancyForToday(allEvents,freshEvents) {
  // --- TRACK swipe counts & per-person direction history ---
  const swipeHistory   = new Map();
  const firstEvent     = new Map();
  // let totalInSwipes    = 0;
  // let totalOutSwipes   = 0;

  let totalInSwipes  = freshEvents.filter(e => e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)).length;
  let totalOutSwipes = freshEvents.filter(e => e.Direction === 'OutDirection' && isTodayInDenver(e.Dateonly)).length;

  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;
    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber || evt.ObjectName1;

    if (!swipeHistory.has(key)) {
      swipeHistory.set(key, new Set());
      firstEvent.set(key, evt);
    }
    swipeHistory.get(key).add(evt.Direction);

    if (evt.Direction === 'InDirection') totalInSwipes++;
    if (evt.Direction === 'OutDirection') totalOutSwipes++;
  });

  // --- DEDUPE & current occupancy ---
  const todayIn = allEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );

  const uniquePeople = new Map();
  const current = {};

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToFloor(Door, Direction);

    // OutDirection at “Out of office” evicts
    if (Direction === 'OutDirection' && zone === 'Out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, zone };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }

  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // --- TALLY & GROUP BY FLOOR ---
  let employees   = 0;
  let contractors = 0;
  const floorMap  = {};

  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);

    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));



  // --- COMPUTE in-only counts ---
   let inOnlyEmployees   = 0;
  let inOnlyContractors = 0;
  swipeHistory.forEach((dirs, key) => {
    if (dirs.has('InDirection') && !dirs.has('OutDirection')) {
      const evt = firstEvent.get(key);
      if (!evt) return;
      if (evt.PersonnelType === 'Employee' || evt.PersonnelType === 'Terminated Personnel') {
        inOnlyEmployees++;
      } else {
        inOnlyContractors++;
      }
    }
  });


  const swipeStats = {
    totalInSwipes,
    totalOutSwipes,
    inOnlyEmployees,
    inOnlyContractors
  };


// --- NEW: per-floor In/Out summary with strict-door filtering ---
  // 1) Only today’s events
  const todayEvents = allEvents.filter(e => isTodayInDenver(e.Dateonly));
// Step 2 replacement: loose match on monitoredDoors keys
 // Only consider freshEvents for this summary
  const validEvents = freshEvents
    .filter(e => isTodayInDenver(e.Dateonly))
    .filter(evt => {
      const dir     = evt.Direction.trim();
      const doorRaw = evt.Door.trim().toUpperCase();
      return Object.entries(monitoredDoors).some(([key, reqDir]) =>
        doorRaw.includes(key) && reqDir === dir
      ) || (
        (dir === 'InDirection' && doorRaw.endsWith('-IN')) ||
        (dir === 'OutDirection' && doorRaw.endsWith('-OUT'))
      );
   // });

  return isStrict || isSuffix;
});

  // 3) Count every distinct swipe (no dedupe), track in/out per person per floor
  const floorMapIO = {};
  validEvents.forEach(evt => {
    const floorKey  = mapDoorToFloor(evt.Door, evt.Direction);
    const personKey = `${evt.PersonGUID || evt.EmployeeID || evt.CardNumber}___${evt.Swipe_Time}`;

    if (!floorMapIO[floorKey]) {
      floorMapIO[floorKey] = { inSwipes: 0, outSwipes: 0, inSet: new Set(), outSet: new Set() };
    }

    if (evt.Direction === 'InDirection') {
      floorMapIO[floorKey].inSwipes++;
      floorMapIO[floorKey].inSet.add(personKey);
    } else if (evt.Direction === 'OutDirection') {
      floorMapIO[floorKey].outSwipes++;
      floorMapIO[floorKey].outSet.add(personKey);
    }
  });

  // 4) Build summary with anomaly detection
  const floorInOutSummary = Object.entries(floorMapIO).map(([floor, stats]) => {
    const inOnly = [...stats.inSet].filter(k => !stats.outSet.has(k));
    return {
      floor,
      inSwipes:    stats.inSwipes,
      outSwipes:   stats.outSwipes,
      inOnlyCount: inOnly.length,
      inOnlyPersons: inOnly
    };
  });



  // --- FINAL PAYLOAD ---
  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },


personnelBreakdown: (() => {
  const map = new Map();
  finalList.forEach(e => {
    const type = e.PersonnelType || 'Unknown';
    map.set(type, (map.get(type) || 0) + 1);
  });
  return Array.from(map, ([personnelType, count]) => ({ personnelType, count }));
})(),


    totalVisitedToday:  finalList.length,
    visitedToday:       { employees, contractors, total: finalList.length },
    swipeStats,
    floorInOutSummary
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();

  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    const payload = buildOccupancyForToday(events, fresh);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};
