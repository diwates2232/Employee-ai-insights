// data/zoneFloorMap.js

const zoneFloorMap = {
  // Podium Floor
  "Red Zone":                    "Podium Floor",
  "Yellow Zone":                 "Podium Floor",
  "Reception Area":              "Podium Floor",
  "Green Zone":                  "Podium Floor",
  "Orange Zone":                 "Podium Floor",
  "GSOC":                        "Podium Floor",
  "Assembly Area":               "Podium Floor",

  // 2nd Floor
  "2nd Floor, Pune":             "2nd Floor",

  // Tower B
  "Tower B":                     "Tower B",
  "Reception Area Tower B":      "Tower B",
  "Tower B GYM":                 "Tower B",

  // Outer‐Area variants (same floors as their base zones)
  "Red Zone - Outer Area":               "Podium Floor",
  "Yellow Zone - Outer Area":            "Podium Floor",
  "Reception Area - Outer Area":         "Podium Floor",
  "Green Zone - Outer Area":             "Podium Floor",
  "Orange Zone - Outer Area":            "Podium Floor",
  "GSOC - Outer Area":                   "Podium Floor",
  "Assembly Area - Outer Area":          "Podium Floor",
  "2nd Floor, Pune - Outer Area":        "2nd Floor",
  "Tower B - Outer Area":                "Tower B",
  "Reception Area Tower B - Outer Area": "Tower B",
  "Tower B GYM - Outer Area":            "Tower B",

  // True “Out of office” eviction (we filter these out in the controller)
  "Out of office":               "Podium Floor"
};

module.exports = zoneFloorMap;






// controllers/liveOccupancyController.js

const { DateTime }   = require('luxon');
const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();

/** Normalize raw door & direction into key for doorZoneMap */
function normalizeZoneKey(rawDoor, rawDir) {
  const base = String(rawDoor || '')
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${base}___${dir}`;
}

/**
 * Map a swipe’s door+direction → zone.
 * 1) explicit doorZoneMap lookup
 * 2) if APAC_IN_PUN_* extract parenthesized or split zone
 * 3) if OutDirection & not "Out of office" → mark as "… - Outer Area"
 * 4) warn & return "Unknown Zone"
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  let zone = doorZoneMap[key];

  // auto-extract for Pune doors
  if (!zone && String(rawDoor||'').toUpperCase().startsWith('APAC_IN_PUN_')) {
    const rest = rawDoor.toUpperCase().slice('APAC_IN_PUN_'.length);
    const paren = rest.match(/\(([^)]+)\)/);
    if (paren) {
      zone = paren[1].toUpperCase() === paren[1]
        ? `${paren[1]} ZONE`
        : `${paren[1][0].toUpperCase()}${paren[1].slice(1).toLowerCase()} Zone`;
    } else {
      const parts = rest.split(/[\s_]+/).filter(Boolean);
      const maybe = parts[1]||parts[0];
      if (/RECEPTION/.test(maybe)) {
        zone = 'Reception Area';
      } else {
        const z = `${maybe[0].toUpperCase()}${maybe.slice(1).toLowerCase()}`;
        zone = z.includes('Zone') ? z : `${z} Zone`;
      }
    }
  }

  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door-zone key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // any OutDirection that isn’t the real “Out of office” → outer‐area
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    const base = zone.replace(/\s+Zone$/i,'');
    return `${base} - Outer Area`;
  }

  return zone;
}


/** Fetch raw swipe events since `since` */
async function fetchNewEvents(since) {
  await poolConnect;
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      /* … your existing SQL … */
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}


/** Build the live‐occupancy snapshot from allEvents */
async function buildOccupancy(allEvents) {
  const current      = {};   // dedupKey → latest in‐office record
  const uniquePeople = new Map();

  for (const e of allEvents) {
    const dedupKey = e.PersonGUID || e.EmployeeID || e.CardNumber || e.ObjectName1;
    const zoneRaw  = mapDoorToZone(e.Door, e.Direction);
    const zoneKey  = zoneRaw && zoneRaw.toLowerCase();

    // 1) OutDirection + "Out of office" → full evict
    if (e.Direction === 'OutDirection' && zoneKey === 'out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    // 2) Any other OutDirection → update zone but keep them in
    if (e.Direction === 'OutDirection') {
      uniquePeople.set(dedupKey, e.PersonnelType);
      current[dedupKey] = { ...e, zone: zoneRaw };
      continue;
    }

    // 3) InDirection → normal check-in
    if (e.Direction === 'InDirection') {
      uniquePeople.set(dedupKey, e.PersonnelType);
      current[dedupKey] = { ...e, zone: zoneRaw };
      continue;
    }

    // 4) catch-all eviction
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // live headcounts
  let employeeCount = 0, contractorCount = 0;
  for (const t of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(t)) employeeCount++;
    else contractorCount++;
  }

  // zone→people, filtering out any stray "Out of office"
  const zoneMap = {};
  for (const rec of Object.values(current)) {
    if (rec.zone.toLowerCase() === 'out of office') continue;
    (zoneMap[rec.zone] = zoneMap[rec.zone]||[]).push(rec);
  }

  // zoneDetails
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([z, emps]) => {
      const byType = emps.reduce((acc,e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ z, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // floorBreakdown
  const floorMap = {};
  for (const [z, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[z] || 'Unknown Floor';
    (floorMap[floor] = floorMap[floor]||{ total:0, byPersonnelType:{} }).total += data.total;
    for (const [pt,c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] =
        (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }

  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone:z, count:d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone:z, ...d.byPersonnelType, total:d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor:f, ...d.byPersonnelType, total:d.total })),
    details:          zoneMap,
    personnelSummary: { employees:employeeCount, contractors:contractorCount },
    personnelBreakdown:[
      { personnelType:'Employee',   count:employeeCount   },
      { personnelType:'Contractor', count:contractorCount }
    ]
  };
}


/** Build “visited today” independently from allEvents */
function buildVisitedToday(allEvents) {
  const todayStr = DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
  // only today's InDirection swipes
  const todayIns = allEvents.filter(e => {
    if (e.Direction !== 'InDirection' || !e.LocaleMessageTime) return false;
    const d = DateTime.fromJSDate(e.LocaleMessageTime,{zone:'Asia/Kolkata'})
                   .toFormat('yyyy-LL-dd');
    return d === todayStr;
  });

  // dedupe latest by PersonGUID
  const latest = new Map();
  for (const e of todayIns) {
    const prev = latest.get(e.PersonGUID);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      latest.set(e.PersonGUID, e);
    }
  }

  const visits     = Array.from(latest.values());
  const employees  = visits.filter(v=>!['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management'].includes(v.PersonnelType)).length;
  const total      = visits.length;
  return { employees, contractors: total - employees, total };
}


exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;
    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');

    let lastSeen = new Date(Date.now() - 24*60*60*1000);
    const events = [];

    const push = async () => {
      const fresh = await fetchNewEvents(lastSeen);
      if (fresh.length) {
        lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
        events.push(...fresh);
      }
      const occupancy = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday      = todayStats;

      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
    };

    await push();
    const timer = setInterval(push, 1000);
    req.on('close', ()=> clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) res.status(500).json({ error:'Internal Server Error' });
  }
};












Read both file carefully and solve this issue .Give me Updated js file carefully

// data/zoneFloorMap.js


const zoneFloorMap = {
  // Podium Floor
  "Red Zone":               "Podium Floor",
  "Yellow Zone":            "Podium Floor",
  "Reception Area":         "Podium Floor",
  "Green Zone":             "Podium Floor",
  "Orange Zone":            "Podium Floor",
  "GSOC":                   "Podium Floor",
  "Assembly Area":          "Podium Floor",

  // 2nd Floor
  "2nd Floor, Pune":        "2nd Floor",

  // Tower B
  "Tower B":                "Tower B",
  "Reception Area Tower B": "Tower B",
  "Tower B GYM":            "Tower B",

  // Outer‐Area variants
  "Red Zone - Outer Area":               "Podium Floor",
  "Yellow Zone - Outer Area":            "Podium Floor",
  "Reception Area":                       "Podium Floor",
  "Green Zone - Outer Area":             "Podium Floor",
  "Orange Zone - Outer Area":            "Podium Floor",
  "GSOC":                                 "Podium Floor",
  "Assembly Area":                        "Podium Floor",

  "2nd Floor, Pune":                    "2nd Floor",

  "Tower B ":                "Tower B",
  "Reception Area Tower B":   "Tower B",
  "Tower B GYM":                "Tower B",

 // True “Out of office” evictions
  "Out of office":       "Podium Floor",
  "Out of Office":       "Podium Floor"
};

module.exports = zoneFloorMap;









// controllers/liveOccupancyController.js

const { DateTime }   = require('luxon');
const { poolConnect, pool, sql } = require('../config/db');
const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();


/** Normalize the raw door + direction into your map’s key format */
function normalizeZoneKey(rawDoor, rawDir) {
  const base = String(rawDoor || '')
    .trim()
    .replace(/\s+/g, ' ')
    .toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${base}___${dir}`;
}

/**
 * Map a swipe’s door+direction → zone.
 *
 * 1) Try explicit doorZoneMap lookup
 * 2) If APAC_IN_PUN_*: extract parenthesized or underscore-split zone
 * 3) If OutDirection on any recognized zone (but not "Out of office"), map to the "– Outer" variant
 * 4) Warn once & return Unknown Zone
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  // 1) explicit lookup
  let zone = doorZoneMap[key];


  // 2) auto-extract for Pune doors
  if (!zone && String(rawDoor || '').toUpperCase().startsWith('APAC_IN_PUN_')) {
    const rest  = rawDoor.toUpperCase().slice('APAC_IN_PUN_'.length);
    const paren = rest.match(/\(([^)]+)\)/);
    if (paren) {
      // e.g. "(RED)" → "RED ZONE"
      zone = paren[1].toUpperCase() === paren[1]
        ? `${paren[1]} ZONE`
        : `${paren[1][0].toUpperCase() + paren[1].slice(1).toLowerCase()} Zone`;
    } else {
      // otherwise pick the second underscore-delimited token as zone
      const parts = rest.split(/[\s_]+/).filter(Boolean);
      const maybeZone = parts[1] || parts[0];
      if (maybeZone) {
        if (/RECEPTION/.test(maybeZone)) {
          zone = 'Reception Area';
        } else {
          const z = maybeZone[0].toUpperCase() + maybeZone.slice(1).toLowerCase();
          zone = z.includes('Zone') ? z : `${z} Zone`;
        }
      }
    }
  }

  // 4) still no zone? warn & fallback
  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door-zone key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // 3) if OutDirection (not real eviction) → Outer variant

  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    const base = zone.replace(/\s+Zone$/i, '');
    return `${base} `;
  }

  return zone;
}




/** Fetch all swipe events since `since` (UTC) */
async function fetchNewEvents(since) {
  await poolConnect;
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}


async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zoneRaw  = mapDoorToZone(Door, Direction);
    const zone     = zoneRaw && zoneRaw.toLowerCase();

    // 1) True "Out of office" → full eviction
    if (Direction === 'OutDirection' && zone === 'out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    // 2) Any other OutDirection → keep them (outer areas, reception exits, etc.)
    if (Direction === 'OutDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        // re-use the exact-cased string so your details match zoneFloorMap keys:
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 3) InDirection → normal check-in
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 4) Catch-all eviction
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // live headcounts (only from uniquePeople, which has already evicted all true out-of-office)
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // Build zone→people map, but filter out any out-of-office at this final step too
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    const zKey = emp.zone.toLowerCase();
    if (zKey === 'out of office') continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  // zoneDetails
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ zone, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // floorBreakdown
  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }

  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown:[
      { personnelType:'Employee',   count: employeeCount },
      { personnelType:'Contractor', count: contractorCount }
    ]
  };
}






















/** Build “visited today” from the same in‐memory stream */
function buildVisitedToday(allEvents) {
  // IST “today” string
  const today = DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

  // only today's InDirection swipes
  const todayIns = allEvents.filter(evt => {
    if (evt.Direction !== 'InDirection' || !evt.LocaleMessageTime) return false;
    const swipeDate = DateTime
      .fromJSDate(evt.LocaleMessageTime, { zone:'Asia/Kolkata' })
      .toFormat('yyyy-LL-dd');
    return swipeDate === today;
  });

  // dedupe by PersonGUID → keep latest
  const dedup = new Map();
  for (const e of todayIns) {
    const prev = dedup.get(e.PersonGUID);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(e.PersonGUID, e);
    }
  }

  const finalList   = Array.from(dedup.values());
  const employees   = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

/** Server‐Sent‐Events endpoint */
exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;

    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');

    // pull last 24h on startup
    let lastSeen = new Date(Date.now() - 24*60*60*1000);
    const events = [];

    const push = async () => {
      const fresh = await fetchNewEvents(lastSeen);
      if (fresh.length) {
        lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
        events.push(...fresh);
      }

      // build occupancy + today counts
      const occupancy  = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday      = {
        employees:   todayStats.employees,
        contractors: todayStats.contractors,
        total:       todayStats.total
      };

      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
    };

    await push();
    const timer = setInterval(push, 1000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};
