import React from 'react';
import { Link } from 'react-router-dom';
import { Card, Row, Col } from 'react-bootstrap';

import SummaryChart from '../components/SummaryChart';
import FloorOccupancyChart from '../components/FloorOccupancyChart';
import ZoneBreakdownTable from '../components/ZoneBreakdownTable';
import ZoneDetailsTable from '../components/ZoneDetailsTable';
import PersonnelTypeBreakdownTable from '../components/PersonnelTypeBreakdownTable';

export default function DashboardHome({
  summaryData,
  detailsData,
  floorData,
  zoneBreakdown,
  personnelBreakdown,
  totalVisitedToday
}) {
  const currentOccupancy = summaryData.reduce((sum, item) => sum + item.count, 0);

  const getPersonnelCount = (type) => {
    const entry = personnelBreakdown.find(p => p.personnelType === type);
    return entry ? entry.count : 0;
  };

  return (
    <>
      <Row className="mb-4">
        <Col md={3}>
          <Card bg="info" text="white" className="text-center">
            <Card.Body>
              <Card.Title>Total Visited Today</Card.Title>
              <Card.Text style={{ fontSize: '2rem' }}>{totalVisitedToday}</Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card bg="success" text="white" className="text-center">
            <Card.Body>
              <Card.Title>Current Occupancy</Card.Title>
              <Card.Text style={{ fontSize: '2rem' }}>{currentOccupancy}</Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card bg="primary" text="white" className="text-center">
            <Card.Body>
              <Card.Title>Employee Count</Card.Title>
              <Card.Text style={{ fontSize: '2rem' }}>{getPersonnelCount('Employee')}</Card.Text>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card bg="warning" text="dark" className="text-center">
            <Card.Body>
              <Card.Title>Contractor Count</Card.Title>
              <Card.Text style={{ fontSize: '2rem' }}>{getPersonnelCount('Contractor')}</Card.Text>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      <h2 className="mb-4">Occupancy Summary</h2>
      <SummaryChart summary={summaryData} />

      <h2 className="mb-4">Floor Occupancy</h2>
      <FloorOccupancyChart data={floorData} />

      <h2 className="mb-4">Zone Breakdown</h2>
      <ZoneBreakdownTable data={zoneBreakdown} />

      <h2 className="mb-4">Zone Details (Preview)</h2>
      <ZoneDetailsTable data={detailsData} />

      <h2 className="mb-4">Personnel Type Breakdown</h2>
      <PersonnelTypeBreakdownTable data={personnelBreakdown} />

      <div className="mt-3">
        <Link to="/details" className="btn btn-primary">
          View Full Zone Details
        </Link>
      </div>
    </>
  );
}





import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';

import SummaryChart from './components/SummaryChart';
import ZoneDetailsTable from './components/ZoneDetailsTable';
import FloorOccupancyChart from './components/FloorOccupancyChart';
import ZoneBreakdownTable from './components/ZoneBreakdownTable';
import DashboardHome from './pages/DashboardHome';

import './App.css';

function ZoneDetailsPage({ detailsData }) {
  return (
    <>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2>Zone Details</h2>
        <Link to="/" className="btn btn-secondary">
          ← Back to Dashboard
        </Link>
      </div>
      <ZoneDetailsTable data={detailsData} />
    </>
  );
}

function App() {
  const [summaryData, setSummaryData] = useState([]);
  const [detailsData, setDetailsData] = useState({});
  const [floorData, setFloorData] = useState([]);
  const [zoneBreakdown, setZoneBreakdown] = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday] = useState(0);

  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy');
    es.onmessage = (e) => {
      try {
        const payload = JSON.parse(e.data);
        setSummaryData(payload.summary || []);
        setDetailsData(payload.details || {});
        setFloorData(payload.floorBreakdown || []);
        setZoneBreakdown(payload.zoneBreakdown || []);
        setPersonnelBreakdown(payload.personnelBreakdown || []);
        setTotalVisitedToday(payload.totalVisitedToday || 0);
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = (err) => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, []);

  return (
    <BrowserRouter>
      <Navbar bg="dark" variant="dark" expand="lg" className="px-4">
        <Navbar.Brand as={Link} to="/" style={{ color: 'var(--wu-yellow)' }}>
          Live Occupancy — Western Union
        </Navbar.Brand>
        <Nav className="ms-auto">
          <Nav.Link as={Link} to="/" style={{ color: '#fff' }}>
            Dashboard
          </Nav.Link>
          <Nav.Link as={Link} to="/details" style={{ color: '#fff' }}>
            Details
          </Nav.Link>
        </Nav>
      </Navbar>

      <Container fluid className="mt-4">
        <Routes>
          <Route
            path="/"
            element={
              <DashboardHome
                summaryData={summaryData}
                detailsData={detailsData}
                floorData={floorData}
                zoneBreakdown={zoneBreakdown}
                personnelBreakdown={personnelBreakdown}
                totalVisitedToday={totalVisitedToday}
              />
            }
          />
          <Route
            path="/details"
            element={<ZoneDetailsPage detailsData={detailsData} />}
          />
        </Routes>
      </Container>
    </BrowserRouter>
  );
}

export default App;














const { poolConnect, pool, sql } = require('../config/db');
const mapDoorToZone = require('../data/doorZoneMap');
const zoneFloorMap = require('../data/zoneFloorMap');

async function fetchNewEvents(since) {
  const req = pool.request();
  req.input('since', sql.DateTime2, since);
  const result = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE 
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          SCard.[value]
        ) AS CardNumber,
        t5_admit.value AS AdmitCode,
        t5_dir.value   AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]      t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType]  t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
      ) AS SCard
        ON t1.XmlGUID = SCard.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return result.recordset;
}

// New function to count total employees who visited today
async function fetchTotalVisitedToday() {
  const req = pool.request();
  const todayStart = new Date();
  todayStart.setHours(0, 0, 0, 0);
  req.input('start', sql.DateTime2, todayStart);

  const result = await req.query(`
    WITH DailyVisits AS (
      SELECT DISTINCT
        CASE 
          WHEN pt.Name IN ('Contractor','Terminated Contractor') THEN p.Text12
          ELSE CAST(p.Int1 AS NVARCHAR)
        END AS EmployeeID
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] log
      LEFT JOIN [ACVSCore].[Access].[Personnel] p ON log.ObjectIdentity1 = p.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] pt ON p.PersonnelTypeId = pt.ObjectID
      WHERE 
        log.MessageType = 'CardAdmitted'
        AND log.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * log.MessageLocaleOffset, log.MessageUTC) >= @start
    )
    SELECT COUNT(*) AS totalVisitedToday FROM DailyVisits;
  `);

  return result.recordset[0]?.totalVisitedToday || 0;
}

async function buildOccupancy(allEvents) {
  const current = {};
  for (const evt of allEvents) {
    const {
      EmployeeID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      Dateonly,
      Swipe_Time,
      Direction,
      Door
    } = evt;

    let zone = mapDoorToZone(Door, Direction) || 'Unknown Zone';

    if (Direction === 'InDirection') {
      current[EmployeeID] = {
        Dateonly,
        Swipe_Time,
        EmployeeID,
        ObjectName1,
        CardNumber,
        PersonnelType,
        zone
      };
    } else {
      delete current[EmployeeID];
    }
  }

  const zoneMap = {};
  for (const emp of Object.values(current)) {
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const counts = emps.reduce((acc, { PersonnelType }) => {
        acc[PersonnelType] = (acc[PersonnelType] || 0) + 1;
        return acc;
      }, {});
      return [zone, {
        total: emps.length,
        byPersonnelType: counts,
        employees: emps
      }];
    })
  );

  const floorMap = {};
  for (const [zone, details] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += details.total;
    for (const [ptype, cnt] of Object.entries(details.byPersonnelType)) {
      floorMap[floor].byPersonnelType[ptype] =
        (floorMap[floor].byPersonnelType[ptype] || 0) + cnt;
    }
  }

  const summary = Object.entries(zoneDetails).map(([zone, d]) => ({
    zone,
    count: d.total
  }));

  const zoneBreakdown = Object.entries(zoneDetails).map(
    ([zone, d]) => ({ zone, ...d.byPersonnelType, total: d.total })
  );

  const floorBreakdown = Object.entries(floorMap).map(
    ([floor, d]) => ({ floor, ...d.byPersonnelType, total: d.total })
  );

  // Build personnel breakdown (current occupancy by type)
  const personnelCount = {};
  Object.values(current).forEach(({ PersonnelType }) => {
    personnelCount[PersonnelType] = (personnelCount[PersonnelType] || 0) + 1;
  });

  return {
    asOf: new Date().toISOString(),
    summary,
    zoneBreakdown,
    floorBreakdown,
    details: zoneMap,
    personnelBreakdown: Object.entries(personnelCount).map(
      ([type, count]) => ({ type, count })
    )
  };
}

exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;

    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive'
    });
    res.write('\n');

    let lastSeen = new Date(Date.now() - 1000 * 60 * 60); // 1 hour ago
    const allEvents = [];

    const totalVisitedToday = await fetchTotalVisitedToday();

    const sendUpdate = async () => {
      const newEvents = await fetchNewEvents(lastSeen);
      if (newEvents.length > 0) {
        lastSeen = newEvents[newEvents.length - 1].LocaleMessageTime;
        allEvents.push(...newEvents);
        const payload = await buildOccupancy(allEvents);
        payload.totalVisitedToday = totalVisitedToday;
        res.write(`data: ${JSON.stringify(payload)}\n\n`);
      }
    };

    {
      const recent = await fetchNewEvents(new Date(Date.now() - 1000 * 60 * 60));
      if (recent.length) {
        lastSeen = recent[recent.length - 1].LocaleMessageTime;
        allEvents.push(...recent);
      }
      const initial = await buildOccupancy(allEvents);
      initial.totalVisitedToday = totalVisitedToday;
      res.write(`data: ${JSON.stringify(initial)}\n\n`);
    }

    const interval = setInterval(sendUpdate, 1000);
    req.on('close', () => clearInterval(interval));
  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};












lets check my backend files and give me only necessary updated file and update file carefully



// controllers/liveOccupancyController.js
const { poolConnect, pool, sql } = require('../config/db');
const mapDoorToZone = require('../data/doorZoneMap');
const zoneFloorMap = require('../data/zoneFloorMap');

async function fetchNewEvents(since) {
  const req = pool.request();
  req.input('since', sql.DateTime2, since);
  const result = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE 
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          SCard.[value]
        ) AS CardNumber,
        t5_admit.value AS AdmitCode,
        t5_dir.value   AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]      t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType]  t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
      ) AS SCard
        ON t1.XmlGUID = SCard.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

   return result.recordset;
}

async function buildOccupancy(allEvents) {
  const current = {};
  for (const evt of allEvents) {
    const {
      EmployeeID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      Dateonly,
      Swipe_Time,
      Direction,
      Door
    } = evt;

    let zone = mapDoorToZone(Door, Direction) || 'Unknown Zone';

    if (Direction === 'InDirection') {
      current[EmployeeID] = {
        Dateonly,
        Swipe_Time,
        EmployeeID,
        ObjectName1,
        CardNumber,
        PersonnelType,
        zone
      };
    } else {
      delete current[EmployeeID];
    }
  }

  const zoneMap = {};
  for (const emp of Object.values(current)) {
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const counts = emps.reduce((acc, { PersonnelType }) => {
        acc[PersonnelType] = (acc[PersonnelType] || 0) + 1;
        return acc;
      }, {});
      return [zone, {
        total: emps.length,
        byPersonnelType: counts,
        employees: emps
      }];
    })
  );

  const floorMap = {};
  for (const [zone, details] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += details.total;
    for (const [ptype, cnt] of Object.entries(details.byPersonnelType)) {
      floorMap[floor].byPersonnelType[ptype] =
        (floorMap[floor].byPersonnelType[ptype] || 0) + cnt;
    }
  }

  const summary = Object.entries(zoneDetails).map(([zone, d]) => ({
    zone,
    count: d.total
  }));

  const zoneBreakdown = Object.entries(zoneDetails).map(
    ([zone, d]) => ({ zone, ...d.byPersonnelType, total: d.total })
  );

  const floorBreakdown = Object.entries(floorMap).map(
    ([floor, d]) => ({ floor, ...d.byPersonnelType, total: d.total })
  );

  return {
    asOf: new Date().toISOString(),
    summary,
    zoneBreakdown,
    floorBreakdown,
    details: zoneMap
  };
}

exports.getLiveOccupancy = async (req, res) => {
  try {
    await poolConnect;

    res.writeHead(200, {
      'Content-Type':      'text/event-stream',
      'Cache-Control':     'no-cache',
      'Connection':        'keep-alive'
    });
    res.write('\n');

    let lastSeen = new Date(Date.now() - 1000 * 60 * 60); // start one hour back (or adjust)

    const allEvents = [];

    const checkForNew = async () => {
      const newEvents = await fetchNewEvents(lastSeen);
      if (newEvents.length > 0) {
        lastSeen = newEvents[newEvents.length - 1].LocaleMessageTime;
        allEvents.push(...newEvents);
        const payload = await buildOccupancy(allEvents);
        res.write(`data: ${JSON.stringify(payload)}\n\n`);
      }
    };

    {
      const recent = await fetchNewEvents(new Date(Date.now() - 1000 * 60 * 60));
      if (recent.length) {
        lastSeen = recent[recent.length - 1].LocaleMessageTime;
        allEvents.push(...recent);
      }
      const initial = await buildOccupancy(allEvents);
      res.write(`data: ${JSON.stringify(initial)}\n\n`);
    }

    const interval = setInterval(checkForNew, 1000);
    req.on('close', () => clearInterval(interval));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};







// routes/liveOccupancyRoutes.js

const express = require('express');
const router  = express.Router();
const { getLiveOccupancy } = require('../controllers/liveOccupancyController');

router.get('/live-occupancy',getLiveOccupancy);

module.exports = router;









// server.js

const express = require('express');
const cors    = require('cors');
const path    = require('path');

const employeeRoutes  = require('./routes/employeeRoutes');
const liveOccupancyRt = require('./routes/liveOccupancyRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// TEMP: simple sanity-check endpoint
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers (they themselves define '/employees' and '/live-occupancy')
app.use('/api', employeeRoutes);
app.use('/api', liveOccupancyRt);

// ————— DEBUG: list all directly registered routes —————
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\n📋 Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
} else {
  console.warn('⚠️ No routes found in app._router.stack');
}

// serve your React build (if you have one)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health-check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));



