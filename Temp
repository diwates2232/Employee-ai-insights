// controllers/denverLiveOccupancyController.js

const { DateTime }      = require('luxon');
const { denver }        = require('../config/siteConfig');
const doorFloorMap      = require('../data/denverDoorFloorMap');
const sql               = require('mssql');

const warnedKeys = new Set();

function normalizeKey(rawDoor, rawDir) {
  const d = String(rawDoor || '').trim().replace(/\s+/g,' ').toUpperCase();
  const dir = /IN/i.test(rawDir) ? 'IN' : 'OUT';
  return `${d}___${dir}`;
}

function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) {
    return doorFloorMap[key];
  }
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) {
    return `Floor ${m[1]}`;
  }
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      -- (same CTE as before)
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
          THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name            AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      -- (joins omitted for brevity)
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
                             .toFormat('yyyy-LL-dd');
  const today     = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

function buildOccupancyForToday(allEvents) {
  // --- NEW: track swipe history & counts ---
  const swipeHistory     = new Map(); // key -> Set of directions
  const lastEventByKey   = new Map(); // key -> first-seen event (for personnelType)
  let totalInSwipes  = 0;
  let totalOutSwipes = 0;

  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;

    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber || evt.ObjectName1;
    if (!swipeHistory.has(key)) {
      swipeHistory.set(key, new Set());
      lastEventByKey.set(key, evt);
    }
    swipeHistory.get(key).add(evt.Direction);

    if (evt.Direction === 'InDirection') totalInSwipes++;
    else if (evt.Direction === 'OutDirection') totalOutSwipes++;
  });
  // --- end NEW logic ---


  const todayIn = allEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );

  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToFloor(Door, Direction);

    // “Out of office” eviction
    if (Direction === 'OutDirection' && zone === 'Out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType, zone
      };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }

  // 2) dedupe: keep only the latest swipe per PersonGUID
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // 3) tally employees vs contractors, and group by floor
  let employees   = 0;
  let contractors = 0;
  const floorMap  = {};

  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);

    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));

  // --- NEW: compute in-only counts ---
  let inOnlyEmployees   = 0;
  let inOnlyContractors = 0;
  swipeHistory.forEach((dirs, key) => {
    if (dirs.has('InDirection') && !dirs.has('OutDirection')) {
      const evt = lastEventByKey.get(key);
      if (!evt) return;
      if (evt.PersonnelType === 'Employee' || evt.PersonnelType === 'Terminated Personnel') {
        inOnlyEmployees++;
      } else {
        inOnlyContractors++;
      }
    }
  });
  // --- end NEW in-only logic ---

  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employees   },
      { personnelType: 'Contractor', count: contractors }
    ],
    totalVisitedToday:  finalList.length,
    visitedToday:       { employees, contractors, total: finalList.length },
    swipeStats: {
      totalInSwipes,
      totalOutSwipes,
      inOnlyEmployees,
      inOnlyContractors
    }
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();

  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    const payload = buildOccupancyForToday(events);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};














// controllers/denverLiveOccupancyController.js

const { DateTime }      = require('luxon');
const { denver }        = require('../config/siteConfig');
const doorFloorMap      = require('../data/denverDoorFloorMap');
const sql               = require('mssql');

const warnedKeys = new Set();

function normalizeKey(rawDoor, rawDir) {
  const d = String(rawDoor || '').trim().replace(/\s+/g,' ').toUpperCase();
  const dir = /IN/i.test(rawDir) ? 'IN' : 'OUT';
  return `${d}___${dir}`;
}

function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) {
    return doorFloorMap[key];
  }
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) {
    return `Floor ${m[1]}`;
  }
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      -- (same CTE as before)
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE WHEN t3.Name IN ('Contractor','Terminated Contractor')
          THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name            AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      -- (joins omitted for brevity)
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
                             .toFormat('yyyy-LL-dd');
  const today     = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

function buildOccupancyForToday(allEvents) {
  // --- NEW: track swipe history & counts ---
  const swipeHistory     = new Map(); // key -> Set of directions
  const lastEventByKey   = new Map(); // key -> first-seen event (for personnelType)
  let totalInSwipes  = 0;
  let totalOutSwipes = 0;

  allEvents.forEach(evt => {
    if (!isTodayInDenver(evt.Dateonly)) return;

    const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber || evt.ObjectName1;
    if (!swipeHistory.has(key)) {
      swipeHistory.set(key, new Set());
      lastEventByKey.set(key, evt);
    }
    swipeHistory.get(key).add(evt.Direction);

    if (evt.Direction === 'InDirection') totalInSwipes++;
    else if (evt.Direction === 'OutDirection') totalOutSwipes++;
  });
  // --- end NEW logic ---


  const todayIn = allEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
  );

  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToFloor(Door, Direction);

    // “Out of office” eviction
    if (Direction === 'OutDirection' && zone === 'Out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType, zone
      };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }

  // 2) dedupe: keep only the latest swipe per PersonGUID
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // 3) tally employees vs contractors, and group by floor
  let employees   = 0;
  let contractors = 0;
  const floorMap  = {};

  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);

    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));

  // --- NEW: compute in-only counts ---
  let inOnlyEmployees   = 0;
  let inOnlyContractors = 0;
  swipeHistory.forEach((dirs, key) => {
    if (dirs.has('InDirection') && !dirs.has('OutDirection')) {
      const evt = lastEventByKey.get(key);
      if (!evt) return;
      if (evt.PersonnelType === 'Employee' || evt.PersonnelType === 'Terminated Personnel') {
        inOnlyEmployees++;
      } else {
        inOnlyContractors++;
      }
    }
  });
  // --- end NEW in-only logic ---

  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employees   },
      { personnelType: 'Contractor', count: contractors }
    ],
    totalVisitedToday:  finalList.length,
    visitedToday:       { employees, contractors, total: finalList.length },
    swipeStats: {
      totalInSwipes,
      totalOutSwipes,
      inOnlyEmployees,
      inOnlyContractors
    }
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();

  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    const payload = buildOccupancyForToday(events);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};

















Now read Below Controller File carefully.



// controllers/denverLiveOccupancyController.js

const { DateTime }      = require('luxon');
const { denver }        = require('../config/siteConfig');
const doorFloorMap      = require('../data/denverDoorFloorMap');
const sql               = require('mssql');

const warnedKeys = new Set();


/** Normalize door+direction key **/
function normalizeKey(rawDoor, rawDir) {
  const d = String(rawDoor || '').trim().replace(/\s+/g,' ').toUpperCase();
  const dir = /IN/i.test(rawDir) ? 'IN' : 'OUT';
  return `${d}___${dir}`;
}

/** Determine floor label, fallback to parsing “. N.” after HQ */
function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) {
    return doorFloorMap[key];
  }
  // fall back: find “HQ. NN.”
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) {
    return `Floor ${m[1]}`;
  }
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}


/**
 * Fetch all swipe events since `since`.
 * Returns recordset with fields:
 *   LocaleMessageTime, Dateonly, Swipe_Time,
 *   EmployeeID, PersonGUID, ObjectName1,
 *   PersonnelType, CardNumber, AdmitCode,
 *   Direction, Door
 */

async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor')
          THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name            AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]'     ,'varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]'          ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel      t2    ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType  t3    ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/** True if the `Dateonly` string falls on today in Denver. */
function isTodayInDenver(dateOnly) {
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' })
                             .toFormat('yyyy-LL-dd');
  const today      = DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}



/** Build the live‐occupancy snapshot from allEvents */
function buildOccupancyForToday(allEvents) {

   const todayIn = allEvents.filter(e =>
    e.Direction === 'InDirection' && isTodayInDenver(e.Dateonly)
   );
  
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zone     = mapDoorToFloor(Door, Direction);

    // “Out of office” actually evicts
    if (Direction === 'OutDirection' && zone === 'Out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, zone };
    } else {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
    }
  }


/** Build the live‐occupancy snapshot from allEvents */

  // 2) dedupe: keep only the latest swipe per PersonGUID
  const latestByPerson = new Map();
  todayIn.forEach(e => {
    const prev = latestByPerson.get(e.PersonGUID);
    const tcur = DateTime.fromFormat(e.Swipe_Time, 'HH:mm:ss');
    if (!prev || tcur > DateTime.fromFormat(prev.Swipe_Time, 'HH:mm:ss')) {
      latestByPerson.set(e.PersonGUID, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());

  // 3) tally employees vs contractors, and group by floor
  let employees   = 0;
  let contractors = 0;
  const floorMap  = {};

  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);

    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') {
      employees++;
    } else {
      contractors++;
    }
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occupants]) => ({
    floor,
    total:     occupants.length,
    occupants
  }));

  return {
    asOf:               new Date().toISOString(),
    currentCount:       finalList.length,
    floorBreakdown,
    personnelSummary:   { employees, contractors },
    personnelBreakdown: [
      { personnelType: 'Employee',   count: employees   },
      { personnelType: 'Contractor', count: contractors }
    ],
    totalVisitedToday:  finalList.length,
    visitedToday:       { employees, contractors, total: finalList.length }
  };
}

exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();

  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  // start streaming all swipes from 24h ago
  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  const push = async () => {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    // build everything from the same today-only, deduped data
    const payload = buildOccupancyForToday(events);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
  };

  // initial + interval
  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};










  








