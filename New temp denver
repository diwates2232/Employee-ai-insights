GET http://localhost:5001/api/live-occupancy/denver

const { pool: punePool, sql } = require('./db'); 

// Create Denver connection
const denverPool = new sql.ConnectionPool({
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
});

denverPool.connect();

module.exports = {
  pune: {
    name: 'Pune',
    pool: punePool,
    doorZoneMap:  require('../data/doorZoneMap'),
    zoneFloorMap: require('../data/zoneFloorMap')
  },
  denver: {
    name: 'Denver',
    pool: denverPool,
    // TEMP: Skip zone maps for now
    doorZoneMap: {},
    zoneFloorMap: {}
  }
};













// config/siteConfig.js
const { pool: punePool, sql } = require('./db'); 

// Create Denver connection
const denverPool = new sql.ConnectionPool({
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
});

denverPool.connect();

module.exports = {
  pune: {
    name: 'Pune',
    pool: punePool,
    doorZoneMap:   require('../data/doorZoneMap'),
    zoneFloorMap:  require('../data/zoneFloorMap')
  },
  denver: {
    name: 'Denver',
    pool: denverPool,
    doorZoneMap:   require('../data/denverDoorZoneMap'),
    zoneFloorMap:  require('../data/denverZoneFloorMap')
  }
};












// server.js
const express = require('express');
const cors    = require('cors');
const path    = require('path');

const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// simple sanity-check
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers under /api
app.use('/api', employeeRoutes);           // /api/employees
app.use('/api', liveOccupancyRoutes);      // /api/live-occupancy
app.use('/api', occupancyDenverRoutes);    // /api/live-occupancy/denver

// debug: list registered endpoints
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\n📋 Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
}

// serve React build (if any)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));














// routes/occupancyDenverRoutes.js
const router = require('express').Router();
const { getDenverLiveOccupancy } = require('../controllers/denverLiveOccupancyController');

// mount your Denver endpoint
// this will respond at GET /api/live-occupancy/denver
router.get('/live-occupancy/denver', getDenverLiveOccupancy);

module.exports = router;








// server.js
const express = require('express');
const cors    = require('cors');
const path    = require('path');

const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// simple sanity-check
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers under /api
app.use('/api', employeeRoutes);           // /api/employees
app.use('/api', liveOccupancyRoutes);      // /api/live-occupancy
app.use('/api', occupancyDenverRoutes);    // /api/live-occupancy/denver

// debug: list registered endpoints
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\n📋 Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
}

// serve React build (if any)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));












// server.js

const express = require('express');
const cors    = require('cors');
const path    = require('path');

// existing routers
const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
// fixed path to Denver routes
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// TEMP: simple sanity-check endpoint
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers under /api
app.use('/api', employeeRoutes);           // /api/employees
app.use('/api', liveOccupancyRoutes);      // /api/live-occupancy
app.use('/api', occupancyDenverRoutes);    // /api/live-occupancy/denver

// ————— DEBUG: list all directly registered routes —————
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\n📋 Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
} else {
  console.warn('⚠️ No routes found in app._router.stack');
}

// serve your React build (if you have one)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health-check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));












// server.js

const express = require('express');
const cors    = require('cors');
const path    = require('path');

// existing routers
const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
// new Denver occupancy router
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// TEMP: simple sanity-check endpoint
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers under /api
app.use('/api', employeeRoutes);           // /api/employees
app.use('/api', liveOccupancyRoutes);      // /api/live-occupancy
app.use('/api', occupancyDenverRoutes);    // /api/live-occupancy/denver

// ————— DEBUG: list all directly registered routes —————
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\n📋 Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
} else {
  console.warn('⚠️ No routes found in app._router.stack');
}

// serve your React build (if you have one)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health-check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));

















const express = require('express');
const app = express();

const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');
app.use('/api', occupancyDenverRoutes);


upadte below Server.js file and give me update js file carefully

// server.js

const express = require('express');
const cors    = require('cors');
const path    = require('path');

const employeeRoutes  = require('./routes/employeeRoutes');
const liveOccupancyRt = require('./routes/liveOccupancyRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// TEMP: simple sanity-check endpoint
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers (they themselves define '/employees' and '/live-occupancy')
app.use('/api', employeeRoutes);
app.use('/api', liveOccupancyRt);

// ————— DEBUG: list all directly registered routes —————
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\n📋 Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
} else {
  console.warn('⚠️ No routes found in app._router.stack');
}

// serve your React build (if you have one)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health-check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));
