const express = require('express');
const router = express.Router();
const { getDenverLiveOccupancy } = require('../controllers/denverLiveOccupancyController');

router.get('/live-occupancy-denver', getDenverLiveOccupancy); // <-- Must be a function!

module.exports = router;







// controllers/denverLiveOccupancyController.js
const { denver } = require('../config/siteConfig');
const sql        = require('mssql');

// helper: map door + direction to floor, fallback to 'Unknown Floor'
function mapDoorToFloor(doorName, direction) {
  const key = `${doorName.toUpperCase()}___${direction}`;
  return denver.doorFloorMap[key] || 'Unknown Floor';
}

// 1) fetch all new swipe events since `since`
async function fetchNewEvents(since) {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectIdentity1,
        t1.ObjectName1,
        CASE 
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel      t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType  t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00010027.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, [value] FROM ACVSUJournal_00010027.dbo.ACVSUJournalLogxmlShred
        WHERE [Name] IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'   -- Denver doors
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10),  LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),   LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      ObjectIdentity1,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// 2) total distinct visited today across all directions
async function fetchTotalVisitedToday() {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  const todayStart = new Date();
  todayStart.setHours(0,0,0,0);
  req.input('start', sql.DateTime2, todayStart);

  const { recordset } = await req.query(`
    WITH DailyVisits AS (
      SELECT DISTINCT t1.ObjectIdentity1
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
    )
    SELECT COUNT(*) AS totalVisitedToday FROM DailyVisits;
  `);

  return recordset[0]?.totalVisitedToday || 0;
}

// 3) break out visited-today by Employee vs Contractor
async function fetchVisitedTodayBreakdown() {
  const pool = await denver.pool.connect();
  const req  = pool.request();
  const todayStart = new Date();
  todayStart.setHours(0,0,0,0);
  req.input('start', sql.DateTime2, todayStart);

  const { recordset } = await req.query(`
    WITH Combined AS (
      SELECT
        t1.ObjectIdentity1,
        CASE 
          WHEN pt.Name IN ('Contractor','Terminated Contractor') THEN 'Contractor'
          ELSE 'Employee'
        END AS bucket,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS dt
      FROM ACVSUJournal_00010027.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel      p  ON t1.ObjectIdentity1 = p.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType  pt ON p.PersonnelTypeId = pt.ObjectID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
    ),
    Ranked AS (
      SELECT *, ROW_NUMBER() OVER(PARTITION BY ObjectIdentity1 ORDER BY dt DESC) AS rn
      FROM Combined
    )
    SELECT
      bucket,
      COUNT(*) AS cnt
    FROM Ranked
    WHERE rn = 1
    GROUP BY bucket;
  `);

  const breakdown = { employees: 0, contractors: 0 };
  for (const { bucket, cnt } of recordset) {
    if (bucket === 'Employee')   breakdown.employees   = cnt;
    if (bucket === 'Contractor') breakdown.contractors = cnt;
  }
  breakdown.total = breakdown.employees + breakdown.contractors;
  return breakdown;
}

// 4) build the live‐occupancy snapshot
function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      ObjectIdentity1, PersonnelType,
      Direction, Door, Dateonly, Swipe_Time,
      EmployeeID, ObjectName1, CardNumber
    } = evt;

    const key   = String(ObjectIdentity1);
    const floor = mapDoorToFloor(Door, Direction);

    // only an explicit “OutDirection” at an unmapped door (Unknown Floor) removes them
    if (Direction === 'OutDirection' && floor === 'Unknown Floor') {
      uniquePeople.delete(key);
      delete current[key];
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(key, PersonnelType);
      current[key] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, floor };
    } else {
      // any other swipe-out also clears
      uniquePeople.delete(key);
      delete current[key];
    }
  }

  // live counts
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (pt === 'Employee' || pt === 'Terminated Personnel') employeeCount++;
    else contractorCount++;
  }

  // floor breakdown
  const floorMap = {};
  for (const { floor } of Object.values(current)) {
    floorMap[floor] = (floorMap[floor] || 0) + 1;
  }
  const floorBreakdown = Object.entries(floorMap).map(([floor, count]) => ({ floor, count }));

  // personnel breakdown array
  const personnelBreakdown = [];
  if (employeeCount)   personnelBreakdown.push({ personnelType: 'Employee',   count: employeeCount });
  if (contractorCount) personnelBreakdown.push({ personnelType: 'Contractor', count: contractorCount });

  return {
    asOf:             new Date().toISOString(),
    floorBreakdown,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    personnelBreakdown
  };
}

// 5) SSE endpoint
exports.getDenverLiveOccupancy = async (req, res) => {
  await denver.pool.connect();
  res.writeHead(200, {
    'Content-Type':  'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection':    'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24*60*60*1000);
  const events = [];

  async function push() {
    const fresh = await fetchNewEvents(lastSeen);
    if (fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
      const payload = buildOccupancy(events);
      payload.totalVisitedToday = await fetchTotalVisitedToday();
      payload.visitedToday      = await fetchVisitedTodayBreakdown();
      res.write(`data: ${JSON.stringify(payload)}\n\n`);
    }
  }

  // initial emit
  await push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};
















read all file carefully and give mr updated js controler,file build logic for Live Occupancy as well people Visited today as well.carefully.
use Objec1Indentity as unique id Give me both updated file carefully.

 // config/siteConfig.js

const { pool: punePool, sql } = require('./db'); 

// Create Denver connection
const denverPool = new sql.ConnectionPool({
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
});

denverPool.connect();

module.exports = {
  pune: {
    name: 'Pune',
    pool: punePool,
    doorZoneMap:  require('../data/doorZoneMap'),
    zoneFloorMap: require('../data/zoneFloorMap')
  },
  denver: {
    name: 'Denver',
    pool: denverPool,
    // TEMP: Skip zone maps for now
    doorZoneMap: {},
    zoneFloorMap: {}
  }
};





Controllerfile 

const { denver } = require('../config/siteConfig');
const sql = require('mssql');

async function getDenverLiveOccupancy(req, res) {
  try {
    const pool = await denver.pool.connect();
    const result = await pool.request().query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.ObjectName1,
        -- permanent employees by Int1; contractors by Text12
        CASE 
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
  t1.ObjectIdentity1,
        t3.Name AS PersonnelType,
        -- fallback: Card or CHUID element
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          SCard.[value]
        ) AS CardNumber,
        t5_admit.value AS AdmitCode,
        t5_dir.value   AS Direction,
  CASE
        WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
        ELSE 'Other'
    END AS LogicalLocation,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]      t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType]  t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
      ) AS SCard
        ON t1.XmlGUID = SCard.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > '5-20-2025' 
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
   ObjectIdentity1,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
 WHERE LogicalLocation = 'Denver'
    ORDER BY LocaleMessageTime ASC;
 
    `);

    const records = result.recordset;

    // TODO: Process records to compute live occupancy summary

    res.json({
      site: 'Denver',
      lastUpdated: new Date(),
      data: records // temporary response
    });

  } catch (error) {
    console.error('Error fetching Denver live occupancy:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

module.exports = {
  getDenverLiveOccupancy
};
