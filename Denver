// routes/liveOccupancyRoutes.js
const express = require('express');
const router  = express.Router();

// make sure this path matches your file name exactly:
const { getLiveOccupancy } = require('../controllers/liveOccupancyController');

if (typeof getLiveOccupancy !== 'function') {
  throw new Error('getLiveOccupancy is not a function â€“ check your import path and export!');
}

router.get('/live-occupancy', getLiveOccupancy);

module.exports = router;














// routes/occupancyDenverRoutes.js
const express = require('express');
const router = express.Router();
const { getDenverLiveOccupancy } = require('../controllers/denverLiveOccupancyController');

// Denver live occupancy
router.get('/live-occupancy-denver', getDenverLiveOccupancy);

module.exports = router;











// routes/occupancyDenverRoutes.js
const express = require('express');
const router = express.Router();
const { getDenverLiveOccupancy } = require('../controllers/denverLiveOccupancyController');

// Denver live occupancy
router.get('/live-occupancy-denver', getDenverLiveOccupancy);

module.exports = router;











Now read all file carefully and siolve the iisue. and give me updated js file carefully.
Dont make another changes in below files 



C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\routes\occupancyDenverRoutes.js


const express = require('express');
const router = express.Router();
const { getDenverLiveOccupancy } = require('../controllers/denverLiveOccupancyController');

router.get('/live-occupancy-denver', getDenverLiveOccupancy); // <-- Must be a function!

module.exports = router;




C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\denverLiveOccupancyController.js

const { denver } = require('../config/siteConfig');
const sql = require('mssql');

async function getDenverLiveOccupancy(req, res) {
  try {
    const pool = await denver.pool.connect();
    const result = await pool.request().query(`
    WITH CombinedQuery AS (
      SELECT 
        DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
        t1.ObjectName1,
        -- permanent employees by Int1; contractors by Text12
        CASE 
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
  t1.ObjectIdentity1,
        t3.Name AS PersonnelType,
        -- fallback: Card or CHUID element
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          SCard.[value]
        ) AS CardNumber,
        t5_admit.value AS AdmitCode,
        t5_dir.value   AS Direction,
  CASE
        WHEN t1.[ObjectName2] LIKE '%HQ%' THEN 'Denver'
        ELSE 'Other'
    END AS LogicalLocation,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]      t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType]  t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_admit
        ON t1.XmlGUID = t5_admit.GUID AND t5_admit.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] t5_dir
        ON t1.XmlGUID = t5_dir.GUID AND t5_dir.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, [value]
        FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
        WHERE [Name] IN ('Card','CHUID')
      ) AS SCard
        ON t1.XmlGUID = SCard.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > '5-20-2025' 
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
   ObjectIdentity1,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
 WHERE LogicalLocation = 'Denver'
    ORDER BY LocaleMessageTime ASC;
 
    `);

    const records = result.recordset;

    // TODO: Process records to compute live occupancy summary

    res.json({
      site: 'Denver',
      lastUpdated: new Date(),
      data: records // temporary response
    });

  } catch (error) {
    console.error('Error fetching Denver live occupancy:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

module.exports = {
  getDenverLiveOccupancy
};



C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\config\siteConfig.js


// config/siteConfig.js
const { pool: punePool, sql } = require('./db'); 

// Create Denver connection
const denverPool = new sql.ConnectionPool({
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
});

denverPool.connect();

module.exports = {
  pune: {
    name: 'Pune',
    pool: punePool,
    doorZoneMap:   require('../data/doorZoneMap'),
    zoneFloorMap:  require('../data/zoneFloorMap')
  },
  denver: {
    name: 'Denver',
    pool: denverPool,
    zoneFloorMap:  require('../data/denverDoorFloorMap'),
  }
};




C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\server.js


// server.js
const express = require('express');
const cors    = require('cors');
const path    = require('path');

const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());

// simple sanity-check
app.get('/ping', (req, res) => res.send('pong'));

// mount your routers under /api
app.use('/api', employeeRoutes);           // /api/employees
app.use('/api', liveOccupancyRoutes);      // /api/live-occupancy
app.use('/api', occupancyDenverRoutes);    // /api/live-occupancy/denver

// debug: list registered endpoints
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\nðŸ“‹ Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');
      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
}

// serve React build (if any)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));







