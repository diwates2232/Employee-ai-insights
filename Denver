// scripts/generateDenverDoorFloorMap.js

const fs   = require('fs');
const path = require('path');
const xlsx = require('xlsx');

// 1. Load the workbook & first sheet
const filePath = path.join(__dirname, '..', 'data', 'doorDenver.xlsx');
const workbook = xlsx.readFile(filePath);
const sheet    = workbook.Sheets[workbook.SheetNames[0]];

// 2. Convert to JSON
const rows = xlsx.utils.sheet_to_json(sheet);
if (!rows.length) {
  console.error('No rows found in doorDenver.xlsx');
  process.exit(1);
}
console.log(`Read ${rows.length} rows from doorDenver.xlsx`);

// 3. Build the door→floor map
const doorFloorMap = {};

rows.forEach(row => {
  const rawDoor    = String(row['Door Name'] || '').trim();
  const inDirKey   = String(row['In Direction'] || '').trim();
  const outDirKey  = String(row['Out Direction'] || '').trim();
  const floor      = String(row['Floor'] || '').trim();

  if (!rawDoor || !floor) {
    console.warn('Skipping row (missing Door Name or Floor):', row);
    return;
  }

  // Normalize door name
  const doorName = rawDoor.toUpperCase();

  // If you have explicit in/out strings in separate cols, use them:
  if (inDirKey) {
    doorFloorMap[`${doorName}___${inDirKey}`] = floor;
  }
  if (outDirKey) {
    doorFloorMap[`${doorName}___${outDirKey}`] = floor;
  }

  // Fallback: if someone left IN/OUT blank but you still want defaults:
  // doorFloorMap[`${doorName}___InDirection`]  = doorFloorMap[`${doorName}___InDirection`]  || floor;
  // doorFloorMap[`${doorName}___OutDirection`] = doorFloorMap[`${doorName}___OutDirection`] || floor;
});

// 4. Write out the JS file
const outputPath = path.join(__dirname, '..', 'data', 'denverDoorFloorMap.js');
fs.writeFileSync(outputPath,
  `// Auto-generated from data/doorDenver.xlsx\n` +
  `module.exports = ${JSON.stringify(doorFloorMap, null, 2)};\n`
);

console.log('✅ Denver door-to-floor map written to:', outputPath);




node scripts/generateDenverDoorFloorMap.js









const rows = xlsx.utils.sheet_to_json(sheet);
console.log('Rows read from Excel:', rows); // <-- add this line



// scripts/generateDenverDoorFloorMap.js

const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');

const inputPath = path.join(__dirname, '..', 'data', 'doorDenver.xlsx');
const outputPath = path.join(__dirname, '..', 'config', 'denverDoorFloorMap.js');

const workbook = xlsx.readFile(inputPath);
const sheet = workbook.Sheets[workbook.SheetNames[0]];

// Adjust the column names below to match exactly what's in your Excel
const rows = xlsx.utils.sheet_to_json(sheet);

const doorToFloorMap = {};
rows.forEach(row => {
  const door = row['Door Name']?.trim();
  const floor = row['Floor']?.trim();
  if (door && floor) {
    doorToFloorMap[door] = floor;
  }
});

const fileContent = `// Auto-generated from doorDenver.xlsx\nmodule.exports = ${JSON.stringify(doorToFloorMap, null, 2)};\n`;

fs.writeFileSync(outputPath, fileContent, 'utf-8');
console.log(`✅ Denver door-to-floor map saved to: ${outputPath}`);














node scripts/generateDenverDoorFloorMap.js






// scripts/generateDenverDoorFloorMap.js
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');

const inputPath = path.join(__dirname, '..', 'data', 'doorDenver.xlsx');
const outputPath = path.join(__dirname, '..', 'config', 'denverDoorFloorMap.js');

const workbook = xlsx.readFile(inputPath);
const sheet = workbook.Sheets[workbook.SheetNames[0]];

const jsonData = xlsx.utils.sheet_to_json(sheet);

const doorToFloorMap = {};
jsonData.forEach(row => {
  const doorName = row['Door Name']?.trim();
  const floorName = row['Floor']?.trim();
  if (doorName && floorName) {
    doorToFloorMap[doorName] = floorName;
  }
});

const output = `module.exports = ${JSON.stringify(doorToFloorMap, null, 2)};\n`;

fs.writeFileSync(outputPath, output, 'utf-8');
console.log(`✅ Denver Door-to-Floor map generated at: ${outputPath}`);











SELECT DISTINCT
  t1.ObjectName2 AS DoorName
FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] t1
WHERE 
  t1.MessageType = 'CardAdmitted'
  AND t1.ObjectName2 LIKE '%HQ%' -- only include Denver HQ
ORDER BY DoorName;




const { sql } = require('./db'); // reuse mssql import from db.js
const punePool = require('./db').pool;

// Create Denver connection
const denverPool = new sql.ConnectionPool({
  user:     'GSOC_Test',
  password: 'Westerngsoc@2025',
  server:   'SRVWUDEN0891V',
  database: 'ACVSUJournal_00010027',
  options: {
    encrypt: true,
    trustServerCertificate: true
  }
});

denverPool.connect();

module.exports = {
  pune: {
    name: 'Pune',
    pool: punePool,
    doorZoneMap: require('../data/puneDoorZoneMap'),
    zoneFloorMap: require('../data/puneZoneFloorMap')
  },
  denver: {
    name: 'Denver',
    pool: denverPool,
    doorZoneMap: require('../data/denverDoorZoneMap'),
    zoneFloorMap: require('../data/denverZoneFloorMap')
  }
};
