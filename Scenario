import pandas as pd

def load_csv(path: str = "../data/access_logs.csv") -> pd.DataFrame:
    """
    Load raw access logs from CSV, parse timestamps,
    and extract Dateonly and Swipe_Time columns.
    """
    df = pd.read_csv(path, parse_dates=["LocaleMessageTime"])
    # Derive separate date and time columns
    df["Dateonly"]   = df["LocaleMessageTime"].dt.date
    df["Swipe_Time"] = df["LocaleMessageTime"].dt.time
    return df

def save_pickle(df: pd.DataFrame, path: str = "../data/logs.pkl"):
    """Save DataFrame to a pickle for faster reloads."""
    df.to_pickle(path)
    print(f"✅ Saved DataFrame with {len(df)} rows to {path}")

if __name__ == "__main__":
    # 1) Load raw CSV
    df = load_csv()

    # 2) Quick sanity check
    print("✅ Rows loaded:", len(df))
    print(df.head())

    # 3) Save to pickle
    save_pickle(df)









python -m venv venv
.\venv\Scripts\Activate.ps1   # in PowerShell
# or .\venv\Scripts\activate.bat  # in CMD








# Inside src/
cd src
ni extract.py
ni labelers.py
ni features.py
ni train.py
ni api.py
cd ..

# At project root
ni requirements.txt




cd $HOME\Desktop
mkdir ai-employee-security
cd ai-employee-security

# Create subfolders
mkdir data notebooks src models




yes i want exact thsi type of  mopdel


Step 1: Define Use Cases (Scenarios) Like 

Start by deciding what insights or predictions you want the AI model to generate. Common scenarios include:
	•	Anomaly detection: Identify unusual access patterns.
	•	Employee movement pattern analysis.- As of now We are Working as a Security Analyst
Some times Employee Usee Twice of card 1 is self and another one is for his frend they mark their as well another employee attendace.

Also find Built Scenario using office time duration Whos Duration is very less , or Whos Duration is more.

Highglight those Employee Whos have only one Swipe for the day or only two Swipe for the day.
highlight those Employee Whos 1 st Swipe is Out.
Highlight those Employee pair wise whose swipe got exact same time as Well same door.
Highlight employee from their rejection detaiils trend.
	•	Unauthorized access prediction.

⸻

Step 2: Prepare and Label Data
	•	Use your SQL queries to fetch historical data (door access logs with timestamps, zones, employee info).
	•	Label your data if needed (e.g., normal, anomaly, after-hours, unauthorized).
	•	Clean data (handle missing timestamps, normalize employee IDs, ensure time format consistency).

yes


Extract meaningful features like:
	•	Time of entry/exit
	•	Duration of stay
	•	Zone visited
	•	Frequency of access
	•	Day of the week
	•	Entry direction (In/Out)

⸻

Step 4: Choose Modeling Approach
	•	Supervised Learning: If you have labeled data (e.g., unauthorized vs. authorized).
	•	Unsupervised Learning: For anomaly detection (clustering access patterns).
	•	Time-Series Models: For predicting future occupancy.
	•	Reinforcement Learning: For scenario optimization (less common initially).

⸻

Step 5: Model Training and Evaluation
	•	Use Python (with pandas, scikit-learn, XGBoost, or TensorFlow) to train models.
	•	Split data into training/validation/test sets.
	•	Evaluate using accuracy, precision, recall, or custom KPIs.

⸻

Step 6: Integrate AI with Backend
	•	Create a new route in your Node.js backend like /api/ai-insights.
	•	Call Python scripts or expose the model via a REST API using Flask/FastAPI.

⸻

Step 7: Monitor and Retrain
	•	Regularly re-train the model as new data flows in.
	•	Track model performance over time.
